import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import base64
import os
import re
import glob
import sqlite3
import sys
import unicodedata
import urlparse
from urlparse import parse_qsl
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import datetime
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import anor
import traceback
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
import ithil
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
__settings__ = xbmcaddon . Addon ( id = "plugin.video.palantir" )
if 85 - 85: oo
def OoOoOo ( value ) :
 if not value or value == 'none' :
  if 73 - 73: Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / oo0o % IiII1i1I
  return 'gold'
 else :
  if 67 - 67: i1iI1 + i1iI1 % oo0o * ii1I1ii1IiIi1
  try :
   return value . split ( ']' ) [ 1 ] . split ( '[' ) [ 0 ]
  except :
   if 85 - 85: IIoooO0ooO0oo . IiII1i1I
   return value
   if 8 - 8: oOO * Ii
   if 26 - 26: o00oO0oo0O0O0 - IIoooO0ooO0oo
try :
 O0O000000Oo = xbmc . translatePath ( __settings__ . getSetting ( 'MainView' ) )
 I1II = xbmc . translatePath ( __settings__ . getSetting ( 'DownView' ) )
 I1iI1iiiIiI1 = xbmc . translatePath ( __settings__ . getSetting ( 'FavView' ) )
 OO0O0 = xbmc . translatePath ( __settings__ . getSetting ( 'PelisView' ) )
 ii1i1ii1I = xbmc . translatePath ( __settings__ . getSetting ( 'EpisodesView' ) )
 o0o0000O0 = xbmc . translatePath ( __settings__ . getSetting ( 'ListView' ) )
 oO0O0o0ooO = xbmc . translatePath ( __settings__ . getSetting ( 'SeriesView' ) )
 i1IiI1iii = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'MenuColor' ) ) )
 iii1II = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'TagColor' ) ) )
 I111i11I1I = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'ServerColor' ) ) )
 i11ii = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'AltColor' ) ) )
 o0O0oO0 = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'AudioColor' ) ) )
 IIIi1111iI = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'CategoryColor' ) ) )
 iiIIiiiI11 = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'DateColor' ) ) )
 O00O000 = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'CapiColor' ) ) )
 O0OOO = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'PeliColor' ) ) )
 if 4 - 4: ooOooO0OOO
 if not o0o0000O0 or o0o0000O0 == 'none' :
  o0o0000O0 = '502'
 if not oO0O0o0ooO or oO0O0o0ooO == 'none' :
  oO0O0o0ooO = '515'
 if not O0O000000Oo or O0O000000Oo == 'none' :
  O0O000000Oo = '500'
 if not I1II or I1II == 'none' :
  I1II = '500'
 if not I1iI1iiiIiI1 or I1iI1iiiIiI1 == 'none' :
  I1iI1iiiIiI1 = '500'
 if not OO0O0 or OO0O0 == 'none' :
  OO0O0 = '502'
 if not ii1i1ii1I or ii1i1ii1I == 'none' :
  ii1i1ii1I = '502'
except :
 xbmc . log ( 'ERROR Procesing initial configuration' )
 traceback . print_exc ( file = sys . stdout )
 if 53 - 53: ooOooO0OOO
 if 85 - 85: ooOooO0OOO + IIII
 if 32 - 32: IiII1i1I - iiIIi1i1Iii * II + OOO - iiIIi1i1Iii
try :
 import json
except :
 import simplejson as json
 if 28 - 28: IIII
def OoooO0O ( s ) :
 if 95 - 95: IiII1IiI % I1IiI1III11i
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 39 - 39: IIoooO0ooO0oo
 if 40 - 40: ii1I1ii1IiIi1 * oo / I1
def I1iII1i1i ( bas ) :
 ithil . Iiii11iIi1I1 ( bas )
 if 41 - 41: i1iI1 - OOO % ooOooO0OOO - IIoooO0ooO0oo + ooOooO0OOO
 if 33 - 33: oo + oOO / ooOooO0OOO + Ii + ii1I1ii1IiIi1 . ii1I1ii1IiIi1
def III11Ii ( ) :
 import xbmc
 oO0 = xbmc . Keyboard ( "" )
 oO0 . doModal ( )
 i1IiI11i1Iii = ''
 if ( oO0 . isConfirmed ( ) ) :
  i1IiI11i1Iii = oO0 . getText ( )
 return i1IiI11i1Iii
 if 71 - 71: OOoOoO0o0o0OO * oOO * Ii
 if 92 - 92: o00oO0oo0O0O0 . oo0o * OOO * Ii / oo
 if 100 - 100: I1 * OOoOoO0o0o0OO
oooOOO = 'utf-8'
ii = '.tmp'
oOOO0O0 = 'action'
OOO00Ooo0 = xbmcaddon . Addon ( )
IiIi = OOO00Ooo0 . getAddonInfo ( 'version' )
I1i11iIi11Ii1I1 = xbmc . translatePath ( OOO00Ooo0 . getAddonInfo ( 'path' ) . decode ( oooOOO ) )
oOoO = xbmc . translatePath ( OOO00Ooo0 . getAddonInfo ( 'profile' ) . decode ( oooOOO ) )
iii11i1IIi = os . path . join ( I1i11iIi11Ii1I1 , "resources/media/" )
if 4 - 4: oo0o % IiII1IiI
i11i = base64 . urlsafe_b64decode ( 'JXMvbW9yaWElcw==' ) % ( oOoO , ii )
iIiIiiiIi1I1I = '%s/bree.fav' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
iiI1IiI1iiII1 = '%s/bree.favd' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
iIIiIiI1I1I = '%s/bree.favp' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
iiIii1IIi1I = '%s/bree.favs' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
iIiiIi1i1i1i1 = '%s/bree.dwn' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
IIi11Ii1 = [ "serie_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "has_content" , "audio" ,
 "category" , "date(updated)" , "tmdb" ]
O0Oo0oOO = [ "peli_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "'N'" , "audio" , "category" ,
 "date(updated)" , "active" ]
iiI1111IIiiI = [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" ,
 "sinopsis" ,
 "caratula" , "poster" , "updated" , "puntos" , "category" , "active" , "tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ]
ooo0ooOoO0Oo = 200
IIIi11 = ", CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa "
Iii1 = 'series'
IiIIi1I1Ii = 'pelisGroup'
if 97 - 97: IIII . Ii1I * oo
if not os . path . exists ( oOoO ) :
 try :
  os . makedirs ( oOoO )
 except :
  pass
I1iI11I = sys . argv [ 0 ]
iiIIiiII1 = int ( sys . argv [ 1 ] )
try :
 if 66 - 66: i1iI1 % I1 * I1
 OOo0oo = anor . I1i1I1iI11I ( base64 . urlsafe_b64decode (
 'c2VsZWN0IGlkUGF0aCBmcm9tIHBhdGggd2hlcmUgc3RyUGF0aD0icGx1Z2luOi8vcGx1Z2luLnZpZGVvLnBhbGFudGlyLyI=' ) ) [ 1 ] [ 0 ] [ 0 ]
except :
 OOo0oo = 0
 if 6 - 6: IiII1i1I / oOO / Ii1I
 if 10 - 10: oooOoO + oo * oo
def ooo0 ( path , type = 'r' ) :
 oOOoO00oO0 = open ( str ( path ) , type )
 O0OOo0oo00O0O = oOOoO00oO0 . read ( )
 oOOoO00oO0 . close ( )
 return O0OOo0oo00O0O
 if 79 - 79: Ii1I + OOO + IiII1IiI - II . ii1I1ii1IiIi1 / II
 if 23 - 23: o00oO0oo0O0O0 - ii1I1ii1IiIi1 . Ii1I + oooOoO
if os . path . exists ( iIiIiiiIi1I1I ) == True :
 i11iii = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( iIiIiiiIi1I1I ) ) )
else :
 i11iii = { }
 if 78 - 78: I1IiI1III11i + OOO - oOO
if os . path . exists ( iIIiIiI1I1I ) == True :
 IiiIi11iIII1 = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( iIIiIiI1I1I ) ) )
else :
 IiiIi11iIII1 = { }
 if 42 - 42: Ii1I * oooOoO . IiII1IiI + IIII * OOoOoO0o0o0OO
if os . path . exists ( iiI1IiI1iiII1 ) == True :
 ooIIII = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( iiI1IiI1iiII1 ) ) )
else :
 ooIIII = { }
 if 56 - 56: IiII1i1I % IiII1IiI . II / OOO
if os . path . exists ( iiIii1IIi1I ) == True :
 i11 = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( iiIii1IIi1I ) ) )
else :
 i11 = { }
 if 8 - 8: IiII1IiI + Ii1I * oOO - IiII1i1I - iiIIi1i1Iii
 if 14 - 14: oo / Ii1I / IiII1i1I / II / oOO / o00oO0oo0O0O0
def O000000O0OoOo ( nombre , caratula = None , poster = None , video = { } , isPlayable = False ) :
 OoOO0OO0o0O = xbmcgui . ListItem ( label = nombre , iconImage = caratula )
 if caratula and poster :
  OoOO0OO0o0O . setArt ( IIiiII111i ( caratula , poster ) )
 if len ( video ) > 0 :
  OoOO0OO0o0O . setInfo ( 'video' , video )
 if isPlayable :
  OoOO0OO0o0O . setProperty ( 'IsPlayable' , 'true' )
 return OoOO0OO0o0O
 if 11 - 11: IiII1i1I
def II1Ii11i1Ii1I ( sagaName ) :
 Ii11i1iIiII11 = xbmc . translatePath ( __settings__ . getSetting ( 'favSaga' ) )
 if 62 - 62: iiIIi1i1Iii / i1iI1 % IIII
 Oo00o0O0oOo0 = [ ]
 if Ii11i1iIiII11 == '' or Ii11i1iIiII11 == 'false' :
  Oo00o0O0oOo0 = [ ( 'Añadir al Menu' , 'XBMC.RunPlugin(%s?action=to_saga&saga=%s)' % (
 I1iI11I , sagaName ) ) ]
 elif sagaName == Ii11i1iIiII11 :
  Oo00o0O0oOo0 = [ ( 'Eliminar del Menu' , 'XBMC.RunPlugin(%s?action=to_saga&saga=false)' % (
 I1iI11I ) ) ]
 return Oo00o0O0oOo0
 if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
def O0oo00 ( sagaName ) :
 if 80 - 80: IiII1IiI * iiIIi1i1Iii / oOO / I1IiI1III11i / OOO + o00oO0oo0O0O0
 if sagaName :
  __settings__ . setSetting ( 'favSaga' , sagaName )
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 81 - 81: II - ii1I1ii1IiIi1 / Ii1I + oooOoO
  if 51 - 51: IiII1IiI + II + oo0o . II
  if 86 - 86: OOO / IiII1IiI * IiII1IiI * o00oO0oo0O0O0
  if 90 - 90: I1 - oo0o % OOoOoO0o0o0OO - OOO . i1iI1 / IIII
def Iiooo ( idFile , idPath , fileName , to_watch ) :
 if to_watch :
  Oo00o0O0oOo0 = ( 'Marcar como visto' , 'XBMC.RunPlugin(%s?action=to_watch&idFile=%s&idPath=%s&fileName=%s)' % (
 I1iI11I , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 else :
  if 10 - 10: IIII
  Oo00o0O0oOo0 = ( 'Marcar como no visto' ,
 'XBMC.RunPlugin(%s?action=to_unwatch&idFile=%s&idPath=%s&fileName=%s)' % (
 I1iI11I , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 return Oo00o0O0oOo0
 if 72 - 72: oOO - OOO . oooOoO
 if 60 - 60: oooOoO / ii1I1ii1IiIi1 * oooOoO
def i1II1 ( idFile , idPath , fileName , to_watch ) :
 fileName = base64 . urlsafe_b64decode ( fileName )
 if to_watch :
  iiIiIiiiI = 1
 else :
  iiIiIiiiI = 0
 if int ( idFile ) > 0 :
  I1I = "update files set playCount=%s where idFile=%s AND idPath=%s AND strFilename='%s'" % (
 iiIiIiiiI , idFile , idPath , fileName )
 else :
  I1I = "insert into files (idFile, idPath, strFilename, playCount, lastPlayed) VALUES (%s, %s, '%s', %s, %s)" % (
 '(select max (idFile) +1 from files)' , idPath , fileName , iiIiIiiiI , "datetime('now')" )
 anor . I1i1I1iI11I ( I1I )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 79 - 79: II
 if 18 - 18: II + I1 % iiIIi1i1Iii - Ii * IIII . IiII1i1I
def O0O000o ( ) :
 iIIiIII1i = [ '%s/bree.fav' % oOoO , '%s/bree.favd' % oOoO , '%s/bree.favp' % oOoO , '%s/bree.favs' % oOoO , '%s/bree.dwn' % oOoO , '%s/settings.xml' % oOoO ]
 if 9 - 9: i1iI1 . i1iI1
 if 1 - 1: iiIIi1i1Iii . ooOooO0OOO / ooOooO0OOO
 if 82 - 82: IiII1IiI . II . IiII1i1I - I1IiI1III11i
 IIIII = xbmc . translatePath ( __settings__ . getSetting ( 'copyPath' ) )
 import zipfile
 import time
 if IIIII :
  IIIII = xbmc . translatePath ( IIIII )
  if 39 - 39: oOO * IIII % Ii1I - oo0o / OOoOoO0o0o0OO
  OOo0o = "%s/Palantir_Backup_%s.zip" % ( IIIII , time . strftime ( "%d-%m-%Y_%H%M%S" ) )
  OoO0O = zipfile . ZipFile ( OOo0o , "w" )
  for OoOoOOo0OO0 in iIIiIII1i :
   if os . path . exists ( OoOoOOo0OO0 ) :
    ooo00o0O0o0o = OoOoOOo0OO0 . split ( '/' )
    OoO0O . write ( OoOoOOo0OO0 , ooo00o0O0o0o [ len ( ooo00o0O0o0o ) - 1 ] , compress_type = zipfile . ZIP_DEFLATED )
  OoO0O . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Copia Realizada en : %s' % OOo0o , xbmcgui . NOTIFICATION_INFO , 10000 )
 else :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Establezca la ruta para la copia' , xbmcgui . NOTIFICATION_INFO , 7000 )
  if 42 - 42: i1iI1 / i1iI1 + oooOoO / o00oO0oo0O0O0
  if 90 - 90: oo0o * oo0o % ii1I1ii1IiIi1
  if 86 - 86: OOoOoO0o0o0OO . IiII1IiI - OOO - IIII
def oOOoOO ( ) :
 iII1iIIiIi11I = xbmc . translatePath ( __settings__ . getSetting ( 'copyPath' ) )
 IiI1iI = xbmcgui . Dialog ( )
 try :
  IIIII = IiI1iI . browse ( type = 1 , heading = __settings__ . getLocalizedString ( 34003 ) ,
 shares = 'files' , mask = '.zip' , useThumbs = False , treatAsFolder = False , defaultt = iII1iIIiIi11I ,
 enableMultiple = False )
 except TypeError :
  IIIII = IiI1iI . browse ( type = 1 , heading = __settings__ . getLocalizedString ( 34003 ) ,
 s_shares = 'files' , mask = '.zip' , useThumbs = False , treatAsFolder = False ,
 defaultt = iII1iIIiIi11I ,
 enableMultiple = False )
 if 'Palantir_Backup_' in IIIII :
  import zipfile
  iI = zipfile . ZipFile ( IIIII , 'r' )
  iI . extractall ( oOoO )
  iI . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Copia Restaurada : %s' % IIIII , xbmcgui . NOTIFICATION_INFO , 7000 )
 elif IIIII . endswith ( '.zip' ) :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'El fichero debe ser Palantir_Backup_... Invalido %s' % IIIII , xbmcgui . NOTIFICATION_WARNING , 7000 )
  if 4 - 4: IiII1i1I / OOoOoO0o0o0OO - Ii1I - I1IiI1III11i
  if 22 - 22: oo0o * oOO . Ii1I - i1iI1 - Ii - o00oO0oo0O0O0
  if 23 - 23: ii1I1ii1IiIi1 + ooOooO0OOO + OOoOoO0o0o0OO
  if 63 - 63: Ii1I - Ii1I * i1iI1 . Ii - o00oO0oo0O0O0
  if 2 - 2: oooOoO + ii1I1ii1IiIi1 . IiII1IiI % i1iI1
def IiIIiI ( id , type , nombre , url , caratula , poster , remove ) :
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
  if 72 - 72: IIoooO0ooO0oo
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if not remove :
  Oo00o0O0oOo0 = ( 'Descarga en Palantir' ,
 'XBMC.RunPlugin(%s?action=addDownload&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s)' % (
 I1iI11I , id , base64 . urlsafe_b64encode ( nombre ) , url , base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
 else :
  Oo00o0O0oOo0 = ( 'Borrar descarga' ,
 'XBMC.RunPlugin(%s?action=rmDownload&id=%s&nombre=%s&caratula=%s&poster=%s&type=%s)' % (
 I1iI11I , id , base64 . urlsafe_b64encode ( nombre ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
  if 64 - 64: OOoOoO0o0o0OO . II % IIII
 return Oo00o0O0oOo0
 if 16 - 16: IiII1IiI * I1 * I1
def oooo0o ( options ) :
 if 66 - 66: I1 / oooOoO
 try :
  i1II11II11I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
  OOO00oO00OoO0 = json . loads ( ooo0 ( iIiiIi1i1i1i1 ) )
  if 23 - 23: Ii1I % II / oooOoO
  if 82 - 82: ii1I1ii1IiIi1 % IIoooO0ooO0oo
  if 11 - 11: OOO / i1iI1 - ooOooO0OOO / oooOoO
  if 90 - 90: oo * IIII + OOO % IIII - oOO
  if 70 - 70: IIII + ii1I1ii1IiIi1 * IiII1i1I % ooOooO0OOO + OOoOoO0o0o0OO - I1
  os . remove ( '%s%s' % ( i1II11II11I , base64 . urlsafe_b64decode ( options [ 'nombre' ] ) ) )
  OOO00oO00OoO0 . pop ( options [ 'nombre' ] , None )
  Oo0 = open ( iIiiIi1i1i1i1 , "w" )
  Oo0 . write ( json . dumps ( OOO00oO00OoO0 ) )
  if 62 - 62: oo0o % ooOooO0OOO - i1iI1 / i1iI1 . iiIIi1i1Iii
  Oo0 . close ( )
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 except :
  traceback . print_exc ( file = sys . stdout )
  xbmc . log ( '[addon.Palantir] Error Ops %s' % options )
  return
  if 80 - 80: OOoOoO0o0o0OO / IIII * Ii1I % oooOoO . o00oO0oo0O0O0
def OOoO0oo0oo00 ( download_file ) :
 o00O0o00o = __settings__ . getSetting ( 'MaxNumDownloads' )
 i1 = __settings__ . getSetting ( 'MaxSizeDownloads' )
 if 29 - 29: II * Ii + II . oo * IiII1i1I
 if 98 - 98: ooOooO0OOO % II / oo / IiII1i1I
 if 57 - 57: IIII . II
 if 53 - 53: IIII + oo * i1iI1 . oOO - IiII1IiI . IIII
 Oo00o000O = set ( )
 i1II11II11I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 for Oo0Oo0 in download_file . keys ( ) :
  Oo00o000O . add ( Oo0Oo0 )
  if 42 - 42: iiIIi1i1Iii % o00oO0oo0O0O0 - OOoOoO0o0o0OO
 iii = set ( )
 if 36 - 36: oooOoO
 OOOo00ooo0Oo = oOo ( confirmationMessage = False )
 if 16 - 16: II . I1IiI1III11i
 OO = 0
 if OOOo00ooo0Oo :
  for iiiIiIi1I in os . listdir ( i1II11II11I ) :
   iii . add ( os . path . splitext ( iiiIiIi1I ) [ 0 ] )
   if 50 - 50: II - I1IiI1III11i * ooOooO0OOO / IIII . ooOooO0OOO . IiII1i1I
  if int ( o00O0o00o ) <= len ( Oo00o000O & set ( iii ) ) and int ( o00O0o00o ) < 11 :
   o0 = 'Maximo numero de descargas superado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   return False
   if 46 - 46: oo0o * ii1I1ii1IiIi1 . oooOoO * oOO % OOO
  OO = sum ( os . path . getsize ( '%s%s' % ( i1II11II11I , f ) ) for f in os . listdir ( i1II11II11I ) if os . path . isfile ( '%s%s' % ( i1II11II11I , f ) ) and os . path . splitext ( f ) [ 0 ] in Oo00o000O )
  if 57 - 57: i1iI1 - IIII - II * iiIIi1i1Iii * IIII
  if 49 - 49: I1IiI1III11i + iiIIi1i1Iii
  if i1 != '6' and i1 != 'Ilimitado' and i1 != 'Unlimited' :
   if i1 == '0' :
    i1 = 1024
   elif i1 == '1' :
    i1 = 1024 * 2
   elif i1 == '2' :
    i1 = 1024 * 3
   elif i1 == '3' :
    i1 = 1024 * 5
   elif i1 == '4' :
    i1 = 1024 * 10
   elif i1 == '5' :
    i1 = 1024 * 20
   else :
    i1 = i1 . replace ( 'GB' , '' )
   if int ( OO ) / 1048576 > int ( i1 ) :
    o0 = 'Tamaño maximo para descargas superado'
    xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
    OOOo00ooo0Oo = False
    if 19 - 19: ooOooO0OOO . OOoOoO0o0o0OO / Ii + IIII
  return OOOo00ooo0Oo
 else :
  return False
  if 87 - 87: ii1I1ii1IiIi1
  if 65 - 65: OOO / oo / oo % iiIIi1i1Iii
def IiIiII1I1Ii ( options ) :
 OOO00oO00OoO0 = { }
 if 48 - 48: oooOoO * IIoooO0ooO0oo * Ii + IIoooO0ooO0oo
 if os . path . exists ( iIiiIi1i1i1i1 ) :
  OOO00oO00OoO0 = json . loads ( ooo0 ( iIiiIi1i1i1i1 ) )
 if OOoO0oo0oo00 ( OOO00oO00OoO0 ) :
  Oo0o0oO = OoooO0O ( unicode ( base64 . urlsafe_b64decode ( options [ 'nombre' ] ) . decode ( 'utf-8' ) ) )
  I11 = base64 . urlsafe_b64encode ( Oo0o0oO )
  if 74 - 74: IIII * Ii * iiIIi1i1Iii - IIoooO0ooO0oo
  i1iIIIiii1 , IiIiIi1iI1 = os . path . splitext ( Oo0o0oO )
  if 53 - 53: IiII1i1I / ii1I1ii1IiIi1 / o00oO0oo0O0O0 - OOO * ooOooO0OOO + oo0o
  if Oo0o0oO . endswith ( IiIiIi1iI1 ) :
   Oo0o0oO = i1iIIIiii1
   if 90 - 90: IiII1i1I + IIoooO0ooO0oo / oooOoO + OOO * Ii1I % iiIIi1i1Iii
  OOO00oO00OoO0 [ Oo0o0oO ] = (
 options [ 'id' ] , Oo0o0oO , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  OoOoOOo0OO0 = open ( iIiiIi1i1i1i1 , "w" )
  if 97 - 97: OOoOoO0o0o0OO * II . I1 + I1IiI1III11i
  OoOoOOo0OO0 . write ( json . dumps ( OOO00oO00OoO0 ) )
  OoOoOOo0OO0 . close ( )
  return True
 else :
  return False
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 82 - 82: II + ii1I1ii1IiIi1 % iiIIi1i1Iii . II
 if 59 - 59: oooOoO * IiII1IiI / IiII1IiI + II % ii1I1ii1IiIi1 % IIII
def Iii1oO00o0000OO0O ( ) :
 i1Ii11i = [ ]
 i1II11II11I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 if os . path . exists ( iIiiIi1i1i1i1 ) == False :
  OoOoOOo0OO0 = open ( iIiiIi1i1i1i1 , "w" )
  OoOoOOo0OO0 . write ( json . dumps ( { } ) )
  if 86 - 86: IiII1IiI
  OoOoOOo0OO0 . close ( )
 else :
  if 8 - 8: oo0o - II + oo0o
  items = json . loads ( ooo0 ( iIiiIi1i1i1i1 ) )
  if 25 - 25: ii1I1ii1IiIi1 + I1 / oooOoO
  for iIi , I1iII1II1iII in items . copy ( ) . iteritems ( ) :
   OoOoOoo0000o = I1iII1II1iII [ 0 ] . encode ( 'utf-8' )
   IIIii1I1ii = I1iII1II1iII [ 1 ] . encode ( 'utf-8' , 'ignore' )
   if 42 - 42: oOO . OOO / IiII1IiI % IIoooO0ooO0oo
   if 7 - 7: oo / Ii - OOO
   if 25 - 25: IIoooO0ooO0oo . oOO / IiII1i1I / IIII
   if 95 - 95: oOO / II * ii1I1ii1IiIi1 - oo + IiII1IiI
   i1iI1oOoOo0O0 = os . path . splitext ( i1II11II11I ) [ 0 ] + re . sub ( r'(?<!\[)\]' , '[]]' , re . sub ( r'\[' , '[[]' , IIIii1I1ii ) ) + '.*'
   O0OOO0oo = glob . glob ( i1iI1oOoOo0O0 )
   if 92 - 92: ooOooO0OOO . I1
   if len ( O0OOO0oo ) > 0 :
    O0OOO0oo = O0OOO0oo [ 0 ]
    IIIii1I1ii = IIIii1I1ii + ( os . path . splitext ( O0OOO0oo ) [ 1 ] ) . encode ( 'utf-8' , 'ignore' )
    if 98 - 98: IiII1IiI
   else :
    O0OOO0oo = ''
    if 92 - 92: o00oO0oo0O0O0 - OOO * Ii
   if not os . path . exists ( O0OOO0oo ) :
    if 97 - 97: IIoooO0ooO0oo % II - oo / i1iI1 * oOO % oo
    items . pop ( IIIii1I1ii , None )
   else :
    I1IiI1111111 = I1iII1II1iII [ 2 ] . encode ( 'utf-8' )
    Ii11I11Ii11I = I1iII1II1iII [ 3 ] . encode ( 'utf-8' )
    oooOO0OO0 = I1iII1II1iII [ 4 ] . encode ( 'utf-8' )
    II1II1I11 = base64 . urlsafe_b64decode ( Ii11I11Ii11I )
    I1IiiiIIIII1 = base64 . urlsafe_b64decode ( I1IiI1111111 )
    if 6 - 6: oOO % ooOooO0OOO * oo0o . OOO
    o0OOo0OoOoOo = False
    if len ( OoOoOoo0000o . split ( '-' ) ) == 3 :
     o0OOo0OoOoOo = True
     if 71 - 71: oooOoO * Ii / ii1I1ii1IiIi1 - ooOooO0OOO
     if 72 - 72: oo0o . IiII1IiI * I1IiI1III11i * ooOooO0OOO + Ii % IIII
    OoOO0OO0o0O = O000000O0OoOo ( nombre = IIIii1I1ii , caratula = I1IiiiIIIII1 , poster = II1II1I11 , isPlayable = o0OOo0OoOoOo )
    OoOO0OO0o0O . addContextMenuItems ( [ IiIIiI ( id = str ( I1iII1II1iII [ 0 ] ) , nombre = IIIii1I1ii , url = base64 . urlsafe_b64encode ( '%s%s' % ( i1II11II11I , IIIii1I1ii ) ) ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , remove = True , type = oooOO0OO0 ) ] )
    I1Iiii = '{0}?{1}=playLocal&path={2}&tit={3}' . format ( I1iI11I , oOOO0O0 , base64 . urlsafe_b64encode ( O0OOO0oo ) , base64 . urlsafe_b64encode ( IIIii1I1ii ) )
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , not o0OOo0OoOoOo ) )
    if 25 - 25: o00oO0oo0O0O0 . oo
  Oo0 = open ( iIiiIi1i1i1i1 , "w" )
  if 28 - 28: OOO . I1IiI1III11i / iiIIi1i1Iii + Ii1I * oOO + oooOoO
  Oo0 . write ( json . dumps ( items ) )
  Oo0 . close ( )
 try :
  if 47 - 47: o00oO0oo0O0O0 + oo0o - IIoooO0ooO0oo . i1iI1 / Ii1I
  OOo000Oo ( I1II )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 96 - 96: ooOooO0OOO . o00oO0oo0O0O0
 if 77 - 77: iiIIi1i1Iii * oooOoO . II
def OoO0ooOOO ( options ) :
 if 22 - 22: o00oO0oo0O0O0 . ooOooO0OOO - ii1I1ii1IiIi1 * oo
 if IiIiII1I1Ii ( options ) :
  ithil . IIi ( options [ 'url' ] , options [ 'nombre' ] , i11i , options [ 'id' ] , options [ 'type' ] , 'download' , options )
  if 65 - 65: iiIIi1i1Iii
def oO0oO ( ) :
 if 45 - 45: Ii - iiIIi1i1Iii . oOO . IiII1IiI / oooOoO * iiIIi1i1Iii
 iii1IiI1111 = xbmcaddon . Addon ( id = "script.module.simple.downloader" )
 O0O0O0O0O = iii1IiI1111 . getAddonInfo ( 'profile' )
 for I11111IiiIII1 in os . listdir ( xbmc . translatePath ( O0O0O0O0O ) ) :
  try :
   if 38 - 38: Ii + ii1I1ii1IiIi1 + Ii1I * I1IiI1III11i . II + II
   os . remove ( '%s%s' % ( xbmc . translatePath ( O0O0O0O0O ) , I11111IiiIII1 ) )
  except :
   if 57 - 57: oo0o + OOoOoO0o0o0OO - oo0o . Ii - IIII
   o0 = 'No se puede borrar el fichero %s ' % I11111IiiIII1
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 5 - 5: IIII + ii1I1ii1IiIi1 + IiII1i1I
   if 11 - 11: OOoOoO0o0o0OO + oooOoO - ooOooO0OOO / IIII . ooOooO0OOO
   if 96 - 96: iiIIi1i1Iii . ooOooO0OOO % Ii1I . iiIIi1i1Iii
   if 1 - 1: IIoooO0ooO0oo % OOoOoO0o0o0OO % oooOoO . oOO
 iI111i = '%s%s' % ( xbmc . translatePath ( 'special://temp' ) , 'commoncache.db' )
 try :
  oOoO0O00000 = sqlite3 . connect ( iI111i )
  IIiIii1IiI1i = oOoO0O00000 . cursor ( )
  IIiIii1IiI1i . execute ( "delete from Downloader" )
  oOoO0O00000 . commit ( )
  oOoO0O00000 . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Limpieza realizada correctamente' , xbmcgui . NOTIFICATION_INFO , 5000 )
 except :
  traceback . print_exc ( file = sys . stdout )
  o0 = 'No se puede borrar bd commoncache'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
  if 54 - 54: IIII . ooOooO0OOO * OOO - IiII1IiI
def oOo ( confirmationMessage = True ) :
 o00O0o00o = __settings__ . getSetting ( 'MaxNumDownloads' )
 i1 = __settings__ . getSetting ( 'MaxSizeDownloads' )
 iII1iIIiIi11I = __settings__ . getSetting ( 'DownloadPath' )
 if 77 - 77: II * IiII1i1I % I1 + I1 / oOO
 if not iII1iIIiIi11I :
  iII1iIIiIi11I = 'downloads'
 i1II11II11I = xbmc . translatePath ( iII1iIIiIi11I )
 if 21 - 21: I1 . oo0o / IIII % II - I1
 if i1II11II11I . lower ( ) . startswith ( "smb://" ) :
  o0 = 'La ruta Samba no está soportada, seleccione otra ruta para las descargas'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 if not os . path . exists ( i1II11II11I ) :
  try :
   os . mkdir ( i1II11II11I )
  except :
   o0 = 'No existe la ruta %s y no se puede crear.\nRevisa la configuracion y selecciona una ruta con permisos de escritura' % iII1iIIiIi11I
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 78 - 78: oOO
 try :
  OoOoOOo0OO0 = open ( '%s/bolson.test' % i1II11II11I , "w" )
  OoOoOOo0OO0 . write ( 'Test' )
  OoOoOOo0OO0 . close ( )
  try :
   os . remove ( '%s/bolson.test' % i1II11II11I )
   if confirmationMessage :
    o0 = 'Ruta de descargas correcta'
    xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_INFO , 5000 )
   return True
  except :
   o0 = 'No se puede borrar en la carpeta seleccionada'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 except :
  o0 = 'No se puede guardar en la carpeta seleccionada'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return False
 if 87 - 87: iiIIi1i1Iii * ii1I1ii1IiIi1 / oOO % OOO / OOoOoO0o0o0OO
 if 38 - 38: OOoOoO0o0o0OO * I1 / Ii1I
 if 70 - 70: oooOoO * IiII1IiI . II . Ii1I * I1 + oooOoO
 if 77 - 77: o00oO0oo0O0O0 % I1
def OO0o0O0 ( id , type , nombre , url , caratula , poster , fav = i11iii , text = '' , favLiteral = '' , refresh = None ) :
 if 99 - 99: ooOooO0OOO % oOO
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if id not in fav :
  if 89 - 89: OOO
  Oo00o0O0oOo0 = ( 'Añadir a favoritos %s Palantir' % text ,
 'XBMC.RunPlugin(%s?action=addfav%s&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s&text=%s)' % (
 I1iI11I , favLiteral , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type , text ) )
 else :
  Oo00o0O0oOo0 = ( 'Eliminar de favoritos %s Palantir' % text ,
 'XBMC.RunPlugin(%s?action=rmfav%s&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&refresh=%s&type=%s&text=%s)' % (
 I1iI11I , favLiteral , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , refresh , type , text ) )
 return Oo00o0O0oOo0
 if 1 - 1: oo
 if 30 - 30: ooOooO0OOO / IiII1i1I
def OoOOoOO0 ( options , favoritos = iIiIiiiIi1I1I ) :
 OOO00oO00OoO0 = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( favoritos ) ) )
 OOO00oO00OoO0 . pop ( options [ 'id' ] , None )
 Oo0 = open ( favoritos , "w" )
 Oo0 . write ( base64 . urlsafe_b64encode ( json . dumps ( OOO00oO00OoO0 ) ) )
 Oo0 . close ( )
 if 'refresh' in options and options [ 'refresh' ] :
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 35 - 35: oo0o % i1iI1 / IiII1i1I
  if 13 - 13: IiII1i1I
def O00000 ( favoritos , fav , favLiteral , text ) :
 i1Ii11i = [ ]
 if os . path . exists ( favoritos ) == False :
  OoOoOOo0OO0 = open ( favoritos , "w" )
  OoOoOOo0OO0 . write ( base64 . urlsafe_b64encode ( json . dumps ( { } ) ) )
  OoOoOOo0OO0 . close ( )
 else :
  items = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( favoritos ) ) )
  for iIi in sorted ( items . items ( ) , key = lambda iii1IiI : iii1IiI [ 1 ] [ 1 ] ) :
   I1iII1II1iII = iIi [ 1 ]
   OoOoOoo0000o = I1iII1II1iII [ 0 ] . encode ( 'utf-8' )
   IIIii1I1ii = I1iII1II1iII [ 1 ] . encode ( 'utf-8' )
   try :
    if 66 - 66: oOO * oOO - ii1I1ii1IiIi1 + Ii - oOO
    IIIii1I1ii = I1iII1II1iII [ 1 ] . encode ( 'utf-8' , 'ignore' )
   except :
    pass
   I1Iiii = I1iII1II1iII [ 2 ] . encode ( 'utf-8' )
   I1IiI1111111 = I1iII1II1iII [ 3 ] . encode ( 'utf-8' )
   Ii11I11Ii11I = I1iII1II1iII [ 4 ] . encode ( 'utf-8' )
   oooOO0OO0 = I1iII1II1iII [ 5 ] . encode ( 'utf-8' )
   II1II1I11 = base64 . urlsafe_b64decode ( Ii11I11Ii11I )
   I1IiiiIIIII1 = base64 . urlsafe_b64decode ( I1IiI1111111 )
   IIIii1I1ii = base64 . urlsafe_b64decode ( IIIii1I1ii )
   o0OOo0OoOoOo = False
   if len ( OoOoOoo0000o . split ( '-' ) ) == 3 and not 'groupId' in base64 . urlsafe_b64decode ( I1Iiii ) :
    o0OOo0OoOoOo = True
   OoOO0OO0o0O = O000000O0OoOo ( nombre = IIIii1I1ii , caratula = I1IiiiIIIII1 , poster = II1II1I11 , isPlayable = o0OOo0OoOoOo )
   OoOO0OO0o0O . addContextMenuItems ( [ OO0o0O0 ( id = str ( I1iII1II1iII [ 0 ] ) , nombre = IIIii1I1ii , url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , refresh = True , type = oooOO0OO0 , fav = fav , text = text , favLiteral = favLiteral ) ] )
   i1Ii11i . append ( ( base64 . urlsafe_b64decode ( I1Iiii ) , OoOO0OO0o0O , not o0OOo0OoOoOo ) )
 try :
  if 44 - 44: II + ii1I1ii1IiIi1
  OOo000Oo ( I1iI1iiiIiI1 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 35 - 35: oo0o + IIII % oo0o % II / OOO % II
 if 84 - 84: oOO
def iioO0oo00O0O ( options , favoritos = iIiIiiiIi1I1I ) :
 iiIIiIIIi = { }
 if os . path . exists ( favoritos ) == False :
  if 89 - 89: iiIIi1i1Iii * II . oo0o / II
  iiIIiIIIi [ options [ 'id' ] ] = (
 options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  OoOoOOo0OO0 = open ( favoritos , "w" )
  OoOoOOo0OO0 . write ( base64 . urlsafe_b64encode ( json . dumps ( iiIIiIIIi ) ) )
  OoOoOOo0OO0 . close ( )
 else :
  OOO00oO00OoO0 = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( favoritos ) ) )
  OOO00oO00OoO0 [ options [ 'id' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  Oo0 = open ( favoritos , "w" )
  Oo0 . write ( base64 . urlsafe_b64encode ( json . dumps ( OOO00oO00OoO0 ) ) )
  Oo0 . close ( )
 if 'text' in options :
  o0Oo = options [ 'text' ]
 else :
  o0Oo = ''
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 iiiIii1IiII = xbmcgui . Dialog ( )
 iiiIii1IiII . notification ( 'Palantir' ,
 'Favorito añadido a [COLOR gold]%s[/COLOR] Palantir' % ( o0Oo ) ,
 xbmcgui . NOTIFICATION_INFO , 3000 )
 if 83 - 83: OOO
def IIiiII111i ( caratula , poster ) :
 if caratula == None :
  caratula = ''
 if poster == None :
  poster = ''
 return { 'icon' : caratula , 'fanart' : poster , 'thumb' : caratula }
 if 49 - 49: oOO + iiIIi1i1Iii * ooOooO0OOO + OOoOoO0o0o0OO
 if 88 - 88: oo0o - II + IiII1IiI . Ii1I % Ii1I / i1iI1
 if 88 - 88: OOO / iiIIi1i1Iii * II
def OOO0oOO0O0oO0 ( dimension ) :
 if dimension :
  IIiiI = dimension . split ( "x" )
  if len ( IIiiI ) == 2 :
   ii11i1I11i = int ( IIiiI [ 0 ] )
   iI1IiI1IIiIi = int ( IIiiI [ 1 ] )
   if ii11i1I11i == 0 or iI1IiI1IIiIi == 0 :
    return ""
   elif ii11i1I11i <= 720 and iI1IiI1IIiIi <= 480 :
    return "[COLOR oldlace](SD)[/COLOR]"
   elif ii11i1I11i <= 768 and iI1IiI1IIiIi <= 576 :
    return "[COLOR moccasin](HD)[/COLOR]"
   elif ii11i1I11i <= 960 and iI1IiI1IIiIi <= 544 :
    return "[COLOR peachpuff](HD)[/COLOR]"
   elif ii11i1I11i <= 1280 and iI1IiI1IIiIi <= 720 :
    return "[COLOR sandybrown](720)[/COLOR]"
   else :
    return "[COLOR chocolate](1080)[/COLOR]"
  else :
   return ""
 return ""
 if 19 - 19: oo0o / oooOoO % o00oO0oo0O0O0 % OOoOoO0o0o0OO / IIII
 if 15 - 15: Ii1I . i1iI1 + Ii . OOoOoO0o0o0OO * IIII . IIoooO0ooO0oo
def i1I ( url ) :
 if 37 - 37: oo0o
 OO0O0OOO = ithil . iII1iIIiIi11I ( i11i , url )
 I1IIi1 = ithil . oo0o00ooO ( i11i , url )
 if I1IIi1 :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario en %s (%s) validado' % ( url , OO0O0OOO [ 0 ] . encode ( 'utf-8' ) ) , xbmcgui . NOTIFICATION_INFO , 5000 )
 else :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario en %s (%s) y contraseña no válidas' % ( url , OO0O0OOO [ 0 ] . encode ( 'utf-8' ) ) , xbmcgui . NOTIFICATION_WARNING , 5000 )
  if 74 - 74: IIII - Ii1I / II
  if 7 - 7: OOO
  if 38 - 38: oooOoO / I1 * IIoooO0ooO0oo
def OoOO00oo ( serie_sinop , serie_caratula , serie_poster , temp_sinop , temp_caratula , temp_poster ) :
 OOO00oO00OoO0 = [ ]
 if temp_sinop == None :
  OOO00oO00OoO0 . append ( serie_sinop )
 else :
  OOO00oO00OoO0 . append ( temp_sinop )
 if temp_caratula == None :
  OOO00oO00OoO0 . append ( serie_caratula )
 else :
  OOO00oO00OoO0 . append ( temp_caratula )
 if temp_poster == None :
  OOO00oO00OoO0 . append ( serie_poster )
 else :
  OOO00oO00OoO0 . append ( temp_poster )
 return OOO00oO00OoO0
 if 33 - 33: oo0o * oo / iiIIi1i1Iii / OOO * iiIIi1i1Iii
 if 3 - 3: o00oO0oo0O0O0 * OOoOoO0o0o0OO
 if 5 - 5: IiII1IiI % OOoOoO0o0o0OO
def Ooo00o0oo0o ( operator , value , params ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 oo0 = 1
 if 'page' in params and 'c_page' in params and 'alfa' in params :
  oo0 = int ( params [ 'c_page' ] )
  if 22 - 22: oooOoO * oo0o * I1 . I1IiI1III11i + IiII1IiI
  if 5 - 5: OOO % IiII1IiI
  if 83 - 83: IiII1i1I
  if 75 - 75: IIoooO0ooO0oo . IIoooO0ooO0oo + OOO / Ii - ooOooO0OOO
  IIiIii1IiI1i . execute ( "Select " + "," . join (
 IIi11Ii1 ) + IIIi11 + " from series where lower(category) " + operator + " ? AND alfa >='" + base64 . urlsafe_b64decode (
 params [ 'alfa' ] ) + "' AND active > 0 AND " + base64 . urlsafe_b64decode (
 params [ 'page' ] ) + " order by alfa asc, nombre asc LIMIT " + str ( ooo0ooOoO0Oo ) , ( value , ) )
 else :
  params [ 'c_page' ] = 1
  IIiIii1IiI1i . execute ( "Select " + "," . join (
 IIi11Ii1 ) + IIIi11 + " from series where active > 0 and lower(category) " + operator + " ? order by alfa asc, nombre asc LIMIT " + str (
 ooo0ooOoO0Oo ) , ( value , ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 63 - 63: IIII - i1iI1 * I1 % II - oo
 params [ 'actionParams' ] = 'alfa=' + base64 . urlsafe_b64encode ( Ii111I [ 0 ] [ len ( IIi11Ii1 ) ] )
 params [ 'c_page' ] = oo0
 I1IiIiI ( Ii111I , False , True , False , params )
 if 66 - 66: I1 . oOO + oooOoO * ii1I1ii1IiIi1 . OOO
 if 54 - 54: IiII1i1I + OOoOoO0o0o0OO + ooOooO0OOO
def iI1IiiII1iI ( fields , table , categoryCondition ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "Select " + "," . join ( fields ) + " from " + table + " where active > 0 %s order by updated desc limit %s" % ( categoryCondition , str ( ooo0ooOoO0Oo ) ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 I1IiIiI ( Ii111I , True , True , True )
 if 56 - 56: I1 * ii1I1ii1IiIi1
 if 25 - 25: IIoooO0ooO0oo / i1iI1 / Ii . IIII
def i11iIIi ( order ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "Select " + "," . join ( IIi11Ii1 ) + " from series where active > 0 order by " + order + " desc, nombre asc limit " + str ( ooo0ooOoO0Oo ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 I1IiIiI ( Ii111I , True , True , False )
 if 48 - 48: oooOoO - oo / o00oO0oo0O0O0 % Ii1I % Ii
def OooOoOooo ( order , params ) :
 if 46 - 46: oooOoO * OOO / IiII1i1I . I1IiI1III11i - Ii1I / OOO
 if 46 - 46: oo0o % oo / i1iI1
 if 52 - 52: oooOoO % OOoOoO0o0o0OO - iiIIi1i1Iii - o00oO0oo0O0O0
 if 51 - 51: oOO
 if 77 - 77: oooOoO - OOO - I1 * I1
 if 11 - 11: Ii1I * oo / OOoOoO0o0o0OO / iiIIi1i1Iii
 Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb,"
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ ] , [ ] , order , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , None , None , info = params )
 if 9 - 9: o00oO0oo0O0O0 * oOO + IiII1i1I . OOoOoO0o0o0OO . Ii1I - oo0o
def IIII1I ( serie_attr , type ) :
 oOO0oO = III11Ii ( )
 if oOO0oO :
  oOoO0O00000 = sqlite3 . connect ( i11i )
  IIiIii1IiI1i = oOoO0O00000 . cursor ( )
  if 91 - 91: OOO - IiII1i1I % iiIIi1i1Iii * ooOooO0OOO / iiIIi1i1Iii
  oOO0oO = '%' + oOO0oO + '%'
  O0o0oooo00 = ''
  if type != Iii1 :
   O0o0oooo00 = ' group by group_id'
  try :
   IIiIii1IiI1i . execute ( "Select " + "," . join (
 serie_attr ) + IIIi11 + " from " + type + " where active > 0 and nombre like ? " + O0o0oooo00 + " order by alfa asc, nombre asc" ,
 ( unicode ( oOO0oO . decode ( 'utf-8' ) ) , ) )
  except :
   IIiIii1IiI1i . execute ( "Select " + "," . join (
 serie_attr ) + IIIi11 + " from " + type + " where active > 0 and nombre like ? " + O0o0oooo00 + " order by alfa asc, nombre asc" ,
 ( OoooO0O ( unicode ( oOO0oO . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
  Ii111I = IIiIii1IiI1i . fetchall ( )
  if len ( Ii111I ) == 0 :
   IIiIii1IiI1i . execute ( "Select " + "," . join ( serie_attr ) + " from " + type + " where active > 0 and nombre like ? " + O0o0oooo00 + " order by nombre asc" ,
 ( OoooO0O ( unicode ( oOO0oO . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
   Ii111I = IIiIii1IiI1i . fetchall ( )
  oOoO0O00000 . close ( )
  if type == Iii1 :
   I1IiIiI ( Ii111I , True , True , False )
  else :
   OooO00OOo0OOO ( Ii111I , 'pelis' , info = { 'puntos' : 'true' , 'anno' : 'true' } )
   if 17 - 17: II * Ii
   if 26 - 26: o00oO0oo0O0O0 + OOO + oo0o / oooOoO - ii1I1ii1IiIi1 / IIII
def O0O00OooO00O ( audio = None , tab = 'series' , params = { } ) :
 if not audio :
  oOoO0O00000 = sqlite3 . connect ( i11i )
  IIiIii1IiI1i = oOoO0O00000 . cursor ( )
  IIiIii1IiI1i . execute ( "Select audio,count(audio) from " + tab + " where audio!='ES' and active > 0 group by audio order by audio" )
  Ii111I = IIiIii1IiI1i . fetchall ( )
  oOoO0O00000 . close ( )
  i1Ii11i = [ ]
  o00o0O = { }
  for III1I1iI1I1iI in Ii111I :
   if 32 - 32: IIoooO0ooO0oo + IIII
   for II1I1III11Ii1 in III1I1iI1I1iI [ 0 ] . replace ( 'ES' , '' ) . split ( '#' ) :
    if II1I1III11Ii1 and II1I1III11Ii1 not in o00o0O :
     o00o0O [ II1I1III11Ii1 ] = III1I1iI1I1iI [ 1 ]
    elif II1I1III11Ii1 :
     o00o0O [ II1I1III11Ii1 ] = o00o0O [ II1I1III11Ii1 ] + III1I1iI1I1iI [ 1 ]
     if 68 - 68: ooOooO0OOO - oo
     if 84 - 84: I1IiI1III11i + ooOooO0OOO + IIoooO0ooO0oo + Ii * oooOoO - I1
  for II1I1III11Ii1 , iiiO000Oo in o00o0O . iteritems ( ) :
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR] (%s)' % ( i1IiI1iii , II1I1III11Ii1 , iiiO000Oo )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = '' )
   if tab == 'series' :
    I1Iiii = '{0}?action=seriesByLang&lang={1}' . format ( I1iI11I , II1I1III11Ii1 . encode ( 'utf-8' ) )
   else :
    I1Iiii = '{0}?action=pelisByLang&lang={1}' . format ( I1iI11I , II1I1III11Ii1 . encode ( 'utf-8' ) )
   iIi1Ii = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
  try :
   if 73 - 73: Ii / I1IiI1III11i . oo . IIII . I1IiI1III11i
   OOo000Oo ( o0o0000O0 )
  except :
   pass
  xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
  xbmcplugin . endOfDirectory ( iiIIiiII1 )
 else :
  params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
  params [ "action" ] = 'pelisByLang'
  if 'page' in params and 'c_page' in params :
   if 68 - 68: Ii / IiII1i1I % IiII1i1I / I1
   params [ "actionParams" ] = 'lang=' + audio
  else :
   params [ "c_page" ] = 1
   params [ "actionParams" ] = 'lang=' + audio
   if 47 - 47: IIoooO0ooO0oo * OOO + I1IiI1III11i
   if 44 - 44: IIII % II + IIII / IiII1IiI / oOO / i1iI1
   if 47 - 47: IiII1IiI % II . IIoooO0ooO0oo * i1iI1 . IIII
  params [ "sql_cond" ] = " active > 0 and audio like '%" + audio . decode ( 'utf-8' ) + "%'"
  if tab == 'series' :
   OO0OoO00O0o = IIi11Ii1 [ : ]
   if 79 - 79: ii1I1ii1IiIi1 * oo
   if 80 - 80: Ii1I . oOO * II - OOoOoO0o0o0OO
   if 6 - 6: oo0o / I1 * ii1I1ii1IiIi1 + ii1I1ii1IiIi1 / I1
   Ii111I = O000o000o0Oo ( "series" , IIi11Ii1 , [ ] , [ ] , [ "nombre" ] , params )
   I1IiIiI ( Ii111I , True , True , False , params )
  else :
   params [ "action" ] = 'pelisByLang'
   params [ "sql_group" ] = ' group_id '
   params [ "puntos" ] = 'true'
   params [ "anno" ] = 'true'
   if params [ "c_page" ] > 1 :
    params [ "sql_cond" ] = params [ "sql_cond" ] + ' and ' + base64 . urlsafe_b64decode ( params [ "page" ] )
    if 22 - 22: IIII - II - I1 - oooOoO + I1 % IiII1i1I
   Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ ] , [ ] , [ "nombre" ] , params )
   OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
   if 82 - 82: II - ooOooO0OOO / oo / II . OOoOoO0o0o0OO
   if 75 - 75: oo0o
def oOOO0o ( params , type ) :
 if 'letra' in params :
  i1ii = params [ 'letra' ]
 else :
  i1ii = None
 I1ii1iiiI = { 'A' : 'unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198' ,
 'E' : 'unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203' ,
 'I' : 'unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207' ,
 'O' : 'unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214' ,
 'U' : 'unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220' }
 ooOOooOO00O = '!0-9..'
 IIi1Ii1i111i = 'unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90'
 if type == 'serie' :
  oOoo = IIi11Ii1
  oOoo . append ( "CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa " )
  I1IiiII11 = ''
 else :
  oOoo = O0Oo0oOO
  I1IiiII11 = 'group by group_id'
 if not i1ii :
  IIi = "" . join ( [ "When " + I1IiiIi + " Then '" + iii1IiI + "'" for iii1IiI , I1IiiIi in I1ii1iiiI . iteritems ( ) ] )
  oOoO0O00000 = sqlite3 . connect ( i11i )
  IIiIii1IiI1i = oOoO0O00000 . cursor ( )
  IIiIii1IiI1i . execute (
 "select alfa, count (alfa) from (select CASE " + IIi + " WHEN " + IIi1Ii1i111i + " THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa, nombre, " + type + "_id from " + type + "s where active > 0 ) group by alfa order by alfa" )
  Ii111I = IIiIii1IiI1i . fetchall ( )
  oOoO0O00000 . close ( )
  i1Ii11i = [ ]
  for III1I1iI1I1iI in Ii111I :
   i1ii = III1I1iI1I1iI [ 0 ]
   iiiO000Oo = III1I1iI1I1iI [ 1 ]
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR] (%s)' % ( i1IiI1iii , i1ii , iiiO000Oo )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = '' )
   I1Iiii = '{0}?action={1}sByAZ&letra={2}' . format ( I1iI11I , type , i1ii )
   iIi1Ii = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
  try :
   if 4 - 4: II * IiII1IiI . oooOoO * I1
   OOo000Oo ( o0o0000O0 )
  except :
   pass
  xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
  xbmcplugin . endOfDirectory ( iiIIiiII1 )
 else :
  params [ 'sql_group' ] = ' group_id'
  params [ 'action' ] = type + 'sByAZ'
  params [ 'actionParams' ] = ''
  params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
  params [ 'anno' ] = 'true'
  params [ "puntos" ] = "true"
  params [ "letra" ] = i1ii
  params [ 'actionParams' ] = 'letra=' + i1ii
  if 'page' in params and 'c_page' in params :
   oo0 = int ( params [ 'c_page' ] )
   params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
   params [ "c_page" ] = oo0
   oOoO0O00000 = sqlite3 . connect ( i11i )
   IIiIii1IiI1i = oOoO0O00000 . cursor ( )
   if i1ii in I1ii1iiiI :
    I1ii1iiiI [ i1ii ] = I1ii1iiiI [ i1ii ] + ' OR'
   elif i1ii == ooOOooOO00O :
    I1ii1iiiI [ i1ii ] = "AND" . join ( [ " NOT ( " + I1IiiIi + ") " for iii1IiI , I1IiiIi in I1ii1iiiI . iteritems ( ) ] ) + " AND NOT (" + IIi1Ii1i111i + ") OR"
   else :
    I1ii1iiiI [ i1ii ] = ''
   O0o0oooo00 = ''
   if type == 'peli' :
    oOoo = iiI1111IIiiI
    O0o0oooo00 = ' group by group_id'
    if 89 - 89: IIoooO0ooO0oo + i1iI1 . IiII1IiI
    if 45 - 45: OOO
   IIiIii1IiI1i . execute (
 "select " + "," . join ( oOoo ) + " from " + type + "s where active > 0 AND ( " + I1ii1iiiI [
 i1ii ] + " upper(substr(nombre, 1, 1)) == ?) and category not in ('Documental', 'Musica') and " + params [ 'sql_cond' ] + " " + O0o0oooo00 + " order by nombre limit " + str ( ooo0ooOoO0Oo ) ,
 ( i1ii , ) )
   Ii111I = IIiIii1IiI1i . fetchall ( )
   oOoO0O00000 . close ( )
   if type == 'peli' :
    OooO00OOo0OOO ( Ii111I , type = 'pelis' , info = params )
   else :
    params [ 'actionParams' ] = 'alfa >' + i1ii
    I1IiIiI ( Ii111I , True , True , False )
  else :
   oo0 = 1
   params [ "c_page" ] = oo0
   oOoO0O00000 = sqlite3 . connect ( i11i )
   IIiIii1IiI1i = oOoO0O00000 . cursor ( )
   if i1ii in I1ii1iiiI :
    I1ii1iiiI [ i1ii ] = I1ii1iiiI [ i1ii ] + ' OR'
   elif i1ii == ooOOooOO00O :
    I1ii1iiiI [ i1ii ] = "AND" . join ( [ " NOT ( " + I1IiiIi + ") " for iii1IiI , I1IiiIi in I1ii1iiiI . iteritems ( ) ] ) + " AND NOT (" + IIi1Ii1i111i + ") OR"
   else :
    I1ii1iiiI [ i1ii ] = ''
   O0o0oooo00 = ''
   if type == 'peli' :
    oOoo = iiI1111IIiiI
    O0o0oooo00 = ' group by group_id'
    if 28 - 28: IiII1IiI + I1 % ii1I1ii1IiIi1
   IIiIii1IiI1i . execute (
 "select " + "," . join ( oOoo ) + " from " + type + "s where active > 0 and category not in ('Documental', 'Musica') AND ( " + I1ii1iiiI [
 i1ii ] + " upper(substr(nombre, 1, 1)) == ?) " + O0o0oooo00 + " order by nombre limit " + str ( ooo0ooOoO0Oo ) ,
 ( i1ii , ) )
   Ii111I = IIiIii1IiI1i . fetchall ( )
   oOoO0O00000 . close ( )
   if type == 'peli' :
    OooO00OOo0OOO ( Ii111I , type = 'pelis' , info = params )
   else :
    if 25 - 25: IIII . Ii1I % o00oO0oo0O0O0 / o00oO0oo0O0O0 . IIII
    I1IiIiI ( Ii111I , True , True , False , params )
    if 88 - 88: OOO / II / ii1I1ii1IiIi1 - Ii1I / I1
    if 1 - 1: OOoOoO0o0o0OO . IiII1i1I * iiIIi1i1Iii + i1iI1
def I1I1i1i11I1i ( option ) :
 I1IIiI11III = [ ]
 if "Series" == option :
  I1IIiI11III . append ( { 'title' : 'Recientes' , oOOO0O0 : 'ultimas_series' , 'ico' : 'https://i.imgur.com/hHQBaaW.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Favoritas' , oOOO0O0 : 'listfavs' , 'ico' : 'https://i.imgur.com/TkzVH1t.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series' , oOOO0O0 : Iii1 , 'ico' : Iii1 , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series 4K' , oOOO0O0 : 'series_4k' , 'ico' : 'https://i.imgur.com/aCSDdvv.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series 3D' , oOOO0O0 : 'series_3d' , 'ico' : 'https://i.imgur.com/OBmAHRt.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Dibujos' , oOOO0O0 : 'series_dibujos' , 'ico' : 'https://i.imgur.com/R6IogDz.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Retro' , oOOO0O0 : 'series_retro' , 'ico' : 'https://i.imgur.com/SuKdnTC.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Telenovelas' , oOOO0O0 : 'telenovelas' , 'ico' : 'https://i.imgur.com/QuVTIl1.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series A-Z' , oOOO0O0 : 'seriesByAZ' , 'ico' : 'https://i.imgur.com/tAnpggA.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Otros Idiomas' , oOOO0O0 : 'seriesByLang' , 'ico' : 'https://i.imgur.com/AnZ6MYs.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas' , oOOO0O0 : 'series_mas_vistas' , 'ico' : 'https://i.imgur.com/SBBU2Yf.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas Último Mes' , oOOO0O0 : 'series_mas_vistas_mes' , 'ico' : 'https://i.imgur.com/ybj8L1p.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Buscar Serie' , oOOO0O0 : 'searchSerie' , 'ico' : 'https://i.imgur.com/IbA8WPm.png' , 'fan' : 'fanart_palantir' } )
 elif "Pelis" == option :
  I1IIiI11III . append ( { 'title' : 'Recientes' , oOOO0O0 : 'ultimas_pelis' , 'ico' : 'https://i.imgur.com/3r4zdmV.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Favoritas' , oOOO0O0 : 'listfavp' , 'ico' : 'https://i.imgur.com/ejZXQgV.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Cine 4K' , oOOO0O0 : 'cine_4k' , 'ico' : 'https://i.imgur.com/29Qe3Wp.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Cine 3D' , oOOO0O0 : 'cine_3d' , 'ico' : 'https://i.imgur.com/9F6SmKy.png' , 'fan' : 'fanart_palantir' } )
  oO0000o00O00 ( I1IIiI11III )
  I1IIiI11III . append ( { 'title' : 'Pelis A-Z' , oOOO0O0 : 'pelisByAZ' , 'ico' : 'https://i.imgur.com/HilLXIK.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Genero' , oOOO0O0 : 'list_generos' , 'ico' : 'https://i.imgur.com/RzzZRYS.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Por Años' , oOOO0O0 : 'anyo' , 'ico' : 'https://i.imgur.com/TEIDKvd.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Otros Idiomas' , oOOO0O0 : 'pelisByLang' , 'ico' : 'https://i.imgur.com/mLw6kE9.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Sagas' , oOOO0O0 : 'sagas' , 'ico' : 'https://i.imgur.com/2tUJc7a.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Top (Año)' , oOOO0O0 : 'anyo_top' , 'ico' : 'https://i.imgur.com/E7HftxU.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Últimas Por Años' , oOOO0O0 : 'ultimas_pelis_anyo' , 'ico' : 'https://i.imgur.com/Nxt4Yjk.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas' , oOOO0O0 : 'pelis_mas_vistas' , 'ico' : 'https://i.imgur.com/WSmSH5m.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas Último Mes' , oOOO0O0 : 'pelis_mas_vistas_mes' , 'ico' : 'https://i.imgur.com/YhDMoqm.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Buscar Peli' , oOOO0O0 : 'searchPeli' , 'ico' : 'https://i.imgur.com/As5sQaT.png' , 'fan' : 'fanart_palantir' } )
 elif "Dibujos" == option :
  I1IIiI11III . append ( { 'title' : 'Favoritos' , oOOO0O0 : 'listfavd' , 'ico' : 'https://i.imgur.com/XCzzXQx.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Recientes' , oOOO0O0 : 'last_peli_inf' , 'ico' : 'https://i.imgur.com/GWY34W0.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series Dibujos' , oOOO0O0 : 'series_dibujos' , 'ico' : 'https://i.imgur.com/R6IogDz.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Pelis Dibujos' , oOOO0O0 : 'peli_inf' , 'ico' : 'https://i.imgur.com/96QyTA3.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Especial Disney' , oOOO0O0 : 'saga_detail&saga=%s' % base64 . urlsafe_b64encode ( 'Especial Disney' ) , 'ico' : 'https://i.imgur.com/5qIzMJc.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Top Pelis Dibujos' , oOOO0O0 : 'top_peli_inf' , 'ico' : 'https://i.imgur.com/oeg7TbY.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas' , oOOO0O0 : 'pelis_dibujos_mas_vistas' , 'ico' : 'https://i.imgur.com/2pLOyHE.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas Último Mes' , oOOO0O0 : 'pelis_dibujos_mas_vistas_mes' , 'ico' : 'https://i.imgur.com/6FrLnUR.png' , 'fan' : 'fanart_palantir' } )
 elif "Herramientas" == option :
  if 90 - 90: IIII * oo0o * o00oO0oo0O0O0
  I1IIiI11III . append ( { 'title' : 'Crear Copia Favoritos' , oOOO0O0 : 'createCopy' , 'ico' : 'https://i.imgur.com/2naDD8N.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Restaurar Favoritos' , oOOO0O0 : 'restoreCopy' , 'ico' : 'https://i.imgur.com/D1mlcyK.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Abrir Ajustes' , oOOO0O0 : 'openSettings' , 'ico' : 'https://i.imgur.com/8wESSCK.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Cuentas Palantir' , oOOO0O0 : 'install' , 'options' : '&options=script.cuentas.palantir' , 'ico' : 'https://i.imgur.com/vAttLry.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Extended Info' , oOOO0O0 : 'install' , 'options' : '&options=script.extendedinfo' , 'ico' : 'https://i.imgur.com/9n5jwl7.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Resolveurl' , oOOO0O0 : 'install' , 'options' : '&options=script.module.resolveurl' , 'ico' : 'https://i.imgur.com/sjQt6Pr.png' , 'fan' : 'fanart_palantir' } )
  if 66 - 66: Ii1I % I1IiI1III11i + oo
  I1IIiI11III . append ( { 'title' : 'Instalar Add To Lib' , oOOO0O0 : 'install' , 'options' : '&options=context.addtolib' , 'ico' : 'https://i.imgur.com/8plIqlA.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Agrego Contenido' , oOOO0O0 : 'install' , 'options' : '&options=context.agregacontenido' , 'ico' : 'https://i.imgur.com/q30n1Ri.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Common Plugin Cache' , oOOO0O0 : 'install' , 'options' : '&options=script.common.plugin.cache' , 'ico' : 'https://i.imgur.com/AqK2rHu.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Plugin YouTube' , oOOO0O0 : 'install' , 'options' : '&options=plugin.video.youtube' , 'ico' : 'https://i.imgur.com/5e7aI7K.png' , 'fan' : 'fanart_palantir' } )
 elif "Anime" == option :
  I1IIiI11III . append ( { 'title' : 'Pelis Anime' , oOOO0O0 : 'peli_anime' , 'ico' : 'https://i.imgur.com/UMebktG.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series Anime' , oOOO0O0 : 'series_anime' , 'ico' : 'https://i.imgur.com/TplIDPd.png' , 'fan' : 'fanart_palantir' } )
  if 55 - 55: iiIIi1i1Iii . IIII / oo0o . i1iI1 * IIoooO0ooO0oo
  if 56 - 56: o00oO0oo0O0O0 + IiII1IiI . ooOooO0OOO
  if 78 - 78: iiIIi1i1Iii / OOO - IIoooO0ooO0oo / IIII / i1iI1 / oOO
  if 58 - 58: I1 . IIoooO0ooO0oo
  I1IIiI11III . append ( { 'title' : 'Recientes' , oOOO0O0 : 'ultimas_series_anime' , 'ico' : 'https://i.imgur.com/HCY8mwQ.png' , 'fan' : 'fanart_palantir' } )
 elif "Documental" == option :
  I1IIiI11III . append ( { 'title' : 'Documentales A/Z' , oOOO0O0 : 'series_documentales' , 'ico' : 'https://i.imgur.com/MPfb8Eg.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Recientes' , oOOO0O0 : 'ultimos_documentales' , 'ico' : 'https://i.imgur.com/T4Ttvfi.png' , 'fan' : 'fanart_palantir' } )
 elif "Musica" == option :
  I1IIiI11III . append ( { 'title' : 'Musica A/Z' , oOOO0O0 : 'series_musica' , 'ico' : 'https://i.imgur.com/26YtbJU.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Reciente' , oOOO0O0 : 'ultimas_musicas' , 'ico' : 'https://i.imgur.com/GGxYkeZ.png' , 'fan' : 'fanart_palantir' } )
  if 19 - 19: Ii1I % iiIIi1i1Iii . IIII - Ii
 else :
  I1IIiI11III . append ( { 'title' : 'Favoritos' , oOOO0O0 : 'listfav' , 'ico' : 'https://i.imgur.com/1lK65jn.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Pelis' , oOOO0O0 : 'pelis_menu' , 'ico' : 'https://i.imgur.com/9jCIY8p.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series' , oOOO0O0 : 'series_menu' , 'ico' : 'https://i.imgur.com/EpQn8Us.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Dibujos' , oOOO0O0 : 'dibujos_menu' , 'ico' : 'https://i.imgur.com/FZzfxhj.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Anime' , oOOO0O0 : 'anime_menu' , 'ico' : 'https://i.imgur.com/IXJbnnF.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Musica' , oOOO0O0 : 'musica_menu' , 'ico' : 'https://i.imgur.com/9V47XYg.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Documentales' , oOOO0O0 : 'documentales_menu' , 'ico' : 'https://i.imgur.com/DHCeqnl.png' , 'fan' : 'fanart_palantir' } )
  if 4 - 4: OOoOoO0o0o0OO - oo0o - i1iI1 - Ii1I % IIoooO0ooO0oo
  if 38 - 38: o00oO0oo0O0O0 % IIoooO0ooO0oo . II . oooOoO - i1iI1 / o00oO0oo0O0O0
  I1IIiI11III . append ( { 'title' : 'Tutoriales' , oOOO0O0 : 'saga_detail&saga=%s' % base64 . urlsafe_b64encode ( 'Tutoriales' ) , 'ico' : 'https://i.imgur.com/Qyb6KwW.png' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Herramientas' , oOOO0O0 : 'herramientas_menu' , 'ico' : 'https://i.imgur.com/s9RGrMo.png' , 'fan' : 'fanart_palantir' } )
 return I1IIiI11III
 if 68 - 68: oooOoO
 if 50 - 50: o00oO0oo0O0O0 - II . OOO / I1
 if 15 - 15: IIoooO0ooO0oo % IIII
def oOooO0O ( ) :
 I1IIiI11III = [ ]
 I1IIiI11III . append ( { 'title' : 'Series' , oOOO0O0 : Iii1 , 'ico' : Iii1 , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series A-Z' , oOOO0O0 : 'seriesByAZ' , 'ico' : 'https://i.imgur.com/tAnpggA.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series Infantiles' , oOOO0O0 : 'series_dibujos' , 'ico' : 'https://i.imgur.com/R6IogDz.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series Retro' , oOOO0O0 : 'series_retro' , 'ico' : 'https://i.imgur.com/SuKdnTC.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series 4K' , oOOO0O0 : 'series_4k' , 'ico' : 'https://i.imgur.com/aCSDdvv.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series 3D' , oOOO0O0 : 'series_3d' , 'ico' : 'https://i.imgur.com/OBmAHRt.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Favoritos' , oOOO0O0 : 'listfav' , 'ico' : 'https://i.imgur.com/1lK65jn.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis A-Z' , oOOO0O0 : 'pelisByAZ' , 'ico' : 'https://i.imgur.com/HilLXIK.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis (Genero)' , oOOO0O0 : 'list_generos' , 'ico' : 'https://i.imgur.com/RzzZRYS.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Cine 4K' , oOOO0O0 : 'cine_4k' , 'ico' : 'https://i.imgur.com/29Qe3Wp.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Cine 3D' , oOOO0O0 : 'cine_3d' , 'ico' : 'https://i.imgur.com/9F6SmKy.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis (Año)' , oOOO0O0 : 'anyo' , 'ico' : 'https://i.imgur.com/TEIDKvd.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis Dibujos' , oOOO0O0 : 'peli_inf' , 'ico' : 'https://i.imgur.com/96QyTA3.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Top Pelis (Año)' , oOOO0O0 : 'anyo_top' , 'ico' : 'https://i.imgur.com/E7HftxU.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Top Pelis Dibujos' , oOOO0O0 : 'top_peli_inf' , 'ico' : 'https://i.imgur.com/oeg7TbY.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis Dibujos Recientes' , oOOO0O0 : 'last_peli_inf' , 'ico' : 'https://i.imgur.com/GWY34W0.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis Recientes' , oOOO0O0 : 'ultimas_pelis' , 'ico' : 'https://i.imgur.com/3r4zdmV.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series Recientes' , oOOO0O0 : 'ultimas_series' , 'ico' : 'https://i.imgur.com/hHQBaaW.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Sagas' , oOOO0O0 : 'sagas' , 'ico' : 'https://i.imgur.com/2tUJc7a.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Buscar Peli' , oOOO0O0 : 'searchPeli' , 'ico' : 'https://i.imgur.com/As5sQaT.png' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Buscar Serie' , oOOO0O0 : 'searchSerie' , 'ico' : 'https://i.imgur.com/IbA8WPm.png' , 'fan' : 'fanart_palantir' } )
 if 98 - 98: oo
 if 32 - 32: ii1I1ii1IiIi1 . oooOoO / IiII1IiI - II . oo / ooOooO0OOO
 return I1IIiI11III
 if 19 - 19: OOoOoO0o0o0OO * oo . oo
 if 72 - 72: IiII1IiI
def ii1Iii ( function_menu ) :
 if 81 - 81: i1iI1 % oo * o00oO0oo0O0O0
 I1IIiI11III = function_menu
 i1Ii11i = [ ]
 for O0OoOOoOoO in I1IIiI11III :
  if O0OoOOoOoO [ 'ico' ] . lower ( ) . startswith ( 'http' ) :
   I1IiI1111111 = O0OoOOoOoO [ 'ico' ]
  else :
   I1IiI1111111 = '%s/%s.png' % ( iii11i1IIi , O0OoOOoOoO [ 'ico' ] )
  OoOO0OO0o0O = O000000O0OoOo ( nombre = '[COLOR %s][B]%s[/B][/COLOR]' % ( i1IiI1iii , O0OoOOoOoO [ 'title' ] ) , caratula = I1IiI1111111 ,
 poster = '%s/%s.jpg' % ( iii11i1IIi , O0OoOOoOoO [ 'fan' ] ) )
  if 'options' in O0OoOOoOoO :
   I1Iiii = '{0}?{1}={2}{3}' . format ( I1iI11I , oOOO0O0 , O0OoOOoOoO [ oOOO0O0 ] , O0OoOOoOoO [ 'options' ] )
  else :
   I1Iiii = '{0}?{1}={2}' . format ( I1iI11I , oOOO0O0 , O0OoOOoOoO [ oOOO0O0 ] )
  iIi1Ii = True
  if 'isSaga' in O0OoOOoOoO and O0OoOOoOoO [ 'isSaga' ] == 'true' :
   OoOO0OO0o0O . addContextMenuItems ( II1Ii11i1Ii1I ( base64 . urlsafe_b64encode ( O0OoOOoOoO [ 'title' ] ) ) )
  i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  if 83 - 83: Ii1I
  OOo000Oo ( O0O000000Oo )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 48 - 48: iiIIi1i1Iii
def OOo000Oo ( view ) :
 if xbmc . translatePath ( __settings__ . getSetting ( 'EnableView' ) ) == 'true' and view != 'none' :
  if 34 - 34: iiIIi1i1Iii . oo % ooOooO0OOO
  if 9 - 9: I1IiI1III11i % I1IiI1III11i + oOO + oOO
  if 36 - 36: iiIIi1i1Iii * i1iI1
  if 52 - 52: IIoooO0ooO0oo / IIoooO0ooO0oo
  if 67 - 67: ii1I1ii1IiIi1
  if 100 - 100: Ii1I * i1iI1 % ii1I1ii1IiIi1 / IIoooO0ooO0oo * I1IiI1III11i . OOO
  if 36 - 36: oo / oo - OOoOoO0o0o0OO - I1
  if 85 - 85: Ii . iiIIi1i1Iii . OOoOoO0o0o0OO
  if 50 - 50: oo * I1 + oo0o % OOO + Ii1I
  xbmc . executebuiltin ( "Container.SetViewMode(%s)" % str ( view ) )
  if 22 - 22: oOO * OOoOoO0o0o0OO
def oO0000o00O00 ( categories ) :
 Ii11i1iIiII11 = xbmc . translatePath ( __settings__ . getSetting ( 'favSaga' ) )
 if Ii11i1iIiII11 != '' and Ii11i1iIiII11 != 'false' :
  if 2 - 2: I1IiI1III11i + iiIIi1i1Iii . Ii - oOO
  Oo0ooOo0oo = xbmcgui . ListItem ( label = base64 . urlsafe_b64decode ( Ii11i1iIiII11 ) , iconImage = 'https://i.imgur.com/2tUJc7a.png' )
  categories . append (
 { 'title' : base64 . urlsafe_b64decode ( Ii11i1iIiII11 ) , oOOO0O0 : 'saga_detail&saga=%s' % Ii11i1iIiII11 ,
 'ico' : 'https://i.imgur.com/2tUJc7a.png' , 'fan' : 'fanart_palantir' , 'isSaga' : 'true' } )
  if 91 - 91: ooOooO0OOO * OOoOoO0o0o0OO % ii1I1ii1IiIi1
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "select especial from version" )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if Ii111I [ 0 ] is not None and Ii111I [ 0 ] [ 0 ] is not None :
  I11i1II1iI = Ii111I [ 0 ] [ 0 ] . split ( '#' )
  I1iII1II1iII = 0
  for iii1IiI in xrange ( 0 , len ( I11i1II1iI ) / 2 ) :
   if 25 - 25: I1IiI1III11i / Ii1I - Ii
   if 18 - 18: IiII1IiI . Ii . IiII1i1I * oOO
   categories . append ( { 'title' : I11i1II1iI [ iii1IiI * 2 ] , oOOO0O0 : 'saga_detail&saga=%s' % base64 . urlsafe_b64encode ( I11i1II1iI [ iii1IiI * 2 ] ) , 'ico' : I11i1II1iI [ ( iii1IiI * 2 ) + 1 ] , 'fan' : 'fanart_palantir' } )
   if 1 - 1: oo0o
def O0OO000000oO0 ( params ) :
 if 20 - 20: ooOooO0OOO / I1IiI1III11i / I1 . o00oO0oo0O0O0 + oooOoO
 i1iiI = xbmc . getCondVisibility ( 'System.HasAddon(%s)' % params [ 'options' ] )
 if i1iiI :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'El addon ya estaba instalado' , xbmcgui . NOTIFICATION_INFO , 5000 )
 else :
  if 22 - 22: I1IiI1III11i * ooOooO0OOO + ii1I1ii1IiIi1 - IIoooO0ooO0oo . I1IiI1III11i . i1iI1
  if 87 - 87: I1 / oo * iiIIi1i1Iii
  if 75 - 75: OOoOoO0o0o0OO * I1 / oooOoO / oooOoO - OOO
  xbmc . executebuiltin ( 'xbmc.installaddon(%s)' % params [ 'options' ] , True )
  if 94 - 94: Ii1I % IiII1i1I % ooOooO0OOO . IIII / IIII % oo
  if 90 - 90: IiII1IiI / I1IiI1III11i . IIoooO0ooO0oo
  if 24 - 24: II + oOO % o00oO0oo0O0O0
def II1IiiII ( params ) :
 params [ 'sql_cond' ] = 'active > 0  and group_id = ' + params [ 'groupId' ]
 Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb"
 ] , [ ] , [ ] , [ 'tags asc' ] , params )
 xbmcplugin . setContent ( iiIIiiII1 , "movies" )
 OOo000Oo ( OO0O0 )
 if len ( Ii111I ) > 0 :
  i1Ii11i = [ ]
  for III1I1iI1I1iI in Ii111I :
   Oo00o0O0oOo0 = [ ]
   O00o = III1I1iI1I1iI [ 8 ]
   if isinstance ( O00o , unicode ) :
    O00o = O00o . encode ( 'utf-8' )
   I1IiI1111111 = III1I1iI1I1iI [ 11 ]
   Ii11I11Ii11I = III1I1iI1I1iI [ 12 ]
   iiiI11I1I1111 = ithil . I1i1 ( III1I1iI1I1iI [ 6 ] )
   if iiiI11I1I1111 == 'drive' or iiiI11I1I1111 == 'Drive' :
    iiiI11I1I1111 = 'Team'
   if iiiI11I1I1111 == 'kustod' or iiiI11I1I1111 == 'Kustod' :
    iiiI11I1I1111 = 'Arwen'
   if iiiI11I1I1111 == 'upw' or iiiI11I1I1111 == 'Upw' :
    iiiI11I1I1111 = 'Samwise'
   if iiiI11I1I1111 == 'onuploads' or iiiI11I1I1111 == 'Onuploads' :
    iiiI11I1I1111 = '[COLOR lightblue][B]2 Years[/B][/COLOR]'
   if iiiI11I1I1111 == 'sandup' or iiiI11I1I1111 == 'Sandup' :
    iiiI11I1I1111 = 'Artic'
   if iiiI11I1I1111 == 'cutedrive' or iiiI11I1I1111 == 'Cutedrive' :
    iiiI11I1I1111 = 'Koto'
   if iiiI11I1I1111 == 'File' or iiiI11I1I1111 == 'file' or iiiI11I1I1111 == 'uptocloud' or iiiI11I1I1111 == 'Uptocloud' :
    iiiI11I1I1111 = 'Vike'
   if iiiI11I1I1111 == '7-up' or iiiI11I1I1111 == '7-Up' :
    iiiI11I1I1111 = 'Omsk'
   if iiiI11I1I1111 == 'dfile' or iiiI11I1I1111 == 'Dfile' or iiiI11I1I1111 == 'saruch' or iiiI11I1I1111 == 'Saruch' or iiiI11I1I1111 == 'jetload' or iiiI11I1I1111 == 'Jetload' or iiiI11I1I1111 == 'poybox' or iiiI11I1I1111 == 'Poybox' :
    iiiI11I1I1111 = '[COLOR lightblue][B]Ocean[/B][/COLOR]'
   if iiiI11I1I1111 == 'gofile' or iiiI11I1I1111 == 'Gofile' or iiiI11I1I1111 == 'nofile' or iiiI11I1I1111 == 'Nofile' or iiiI11I1I1111 == 'pixeldrain' or iiiI11I1I1111 == 'Pixeldrain' or iiiI11I1I1111 == 'filescdn' or iiiI11I1I1111 == 'Filescdn' or iiiI11I1I1111 == 'userscloud' or iiiI11I1I1111 == 'Userscloud' or iiiI11I1I1111 == 'desiupload' or iiiI11I1I1111 == 'Desiupload' or iiiI11I1I1111 == 'upfile' or iiiI11I1I1111 == 'Upfile' or iiiI11I1I1111 == 'gtfile' or iiiI11I1I1111 == 'Gtfile' or iiiI11I1I1111 == '9files' or iiiI11I1I1111 == '9Files' or iiiI11I1I1111 == 'megaup' or iiiI11I1I1111 == 'Megaup' or iiiI11I1I1111 == 'dbupload' or iiiI11I1I1111 == 'Dbupload' or iiiI11I1I1111 == 'thefileslocker' or iiiI11I1I1111 == 'Thefileslocker' :
    iiiI11I1I1111 = '[COLOR orangered][B]H265[/B][/COLOR]'
   if iiiI11I1I1111 == 'uptostream' or iiiI11I1I1111 == 'Uptostream' or iiiI11I1I1111 == 'archive' or iiiI11I1I1111 == 'Archive' or iiiI11I1I1111 == 'uptobox' or iiiI11I1I1111 == 'Uptobox' :
    iiiI11I1I1111 = '[COLOR gold][B]Top[/B][/COLOR]'
   O0Oo = '[COLOR %s]Servidor: %s [/COLOR]' % ( I111i11I1I , iiiI11I1I1111 )
   if III1I1iI1I1iI [ 3 ] :
    O0Oo = O0Oo + '[COLOR %s] (%s) [/COLOR]' % ( iii1II , str ( III1I1iI1I1iI [ 3 ] . replace ( '#' , ' ' ) ) )
   if not I1IiI1111111 :
    I1IiI1111111 = None
   if not Ii11I11Ii11I :
    Ii11I11Ii11I = None
   if III1I1iI1I1iI [ 1 ] != 'ES' :
    O0Oo = O0Oo + ' [COLOR %s](%s)[/COLOR] ' % ( o0O0oO0 , str ( III1I1iI1I1iI [ 1 ] . replace ( '#' , ' ' ) ) )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = O0Oo , caratula = I1IiI1111111 ,
 poster = Ii11I11Ii11I , video = { 'title' : O00o , 'year' : III1I1iI1I1iI [ 9 ] , 'plot' : III1I1iI1I1iI [ 10 ] } , isPlayable = True )
   if 15 - 15: OOO / Ii1I * IiII1IiI
   I1Iiii = '{0}?action={1}&id={2}&lin={3}&tit={4}&type={5}' . format ( I1iI11I , 'play' , III1I1iI1I1iI [ 0 ] , III1I1iI1I1iI [ 6 ] ,
 base64 . urlsafe_b64encode (
 unicode ( O00o , oooOOO ) . encode (
 oooOOO ) ) , 'pelis' )
   if len ( III1I1iI1I1iI ) > 16 and III1I1iI1I1iI [ 16 ] == 2 and __settings__ . getSetting ( 'activeDownload' ) :
    Oo00o0O0oOo0 . append (
 IiIIiI ( id = '%s-%s-%s' % ( str ( III1I1iI1I1iI [ 0 ] ) , str ( III1I1iI1I1iI [ 1 ] ) , III1I1iI1I1iI [ 2 ] ) , type = 'pelis' ,
 nombre = O00o ,
 url = III1I1iI1I1iI [ 6 ] ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , remove = False ) )
   OoOO0OO0o0O . addContextMenuItems ( Oo00o0O0oOo0 )
   if 26 - 26: ii1I1ii1IiIi1 + OOO
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , False ) )
  xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
  xbmcplugin . endOfDirectory ( iiIIiiII1 )
  if 39 - 39: oOO % I1IiI1III11i + ii1I1ii1IiIi1
def i1iiiiI11i111 ( actionValue , row , url , path ) :
 I1i1iiII1i11 = None
 i11I1 = { }
 if 43 - 43: OOoOoO0o0o0OO - OOoOoO0o0o0OO
 try :
  O00o000Oo0 , oOo0Oo = anor . I1i1I1iI11I (
 'select files.idFile, idPath, strFilename, playCount, iVideoWidth||"x"||iVideoHeight,iStreamType from files left join streamdetails on streamdetails.idFile = files.idFile where idPath=(Select idPath from path where strPath="plugin://plugin.video.palantir/") and strFilename like "plugin://plugin.video.palantir/?action=%s&%s"' % (
 actionValue , path ) )
  for II11 in oOo0Oo :
   if 32 - 32: oOO
   i11I1 [ II11 [ 2 ] ] = II11
 except :
  pass
  if 16 - 16: IiII1i1I % oooOoO * oOO + ooOooO0OOO
 if actionValue == IiIIi1I1Ii or actionValue == 'list_temp' or actionValue == 'view_temp' :
  if url in i11I1 :
   if i11I1 [ url ] [ 3 ] > 0 :
    I1i1iiII1i11 = Iiooo ( i11I1 [ url ] [ 0 ] , i11I1 [ url ] [ 1 ] , i11I1 [ url ] [ 2 ] , False )
   else :
    I1i1iiII1i11 = Iiooo ( i11I1 [ url ] [ 0 ] , i11I1 [ url ] [ 1 ] , i11I1 [ url ] [ 2 ] , True )
    if 32 - 32: oo . oOO * o00oO0oo0O0O0 + IiII1IiI / oooOoO . Ii
    if 82 - 82: IIII + Ii / oo0o
    if 98 - 98: o00oO0oo0O0O0 . ooOooO0OOO % OOoOoO0o0o0OO % Ii1I + Ii % oOO
    if 92 - 92: Ii / oo0o
  else :
   if 38 - 38: Ii1I * oo + oOO
   I1i1iiII1i11 = Iiooo ( 0 , OOo0oo , url , True )
 return I1i1iiII1i11
 if 72 - 72: o00oO0oo0O0O0 + oooOoO
 if 18 - 18: I1IiI1III11i / OOO
def OooO00OOo0OOO ( rows = [ ] , type = Iii1 , carat = None , poste = None , info = { } ) :
 try :
  if type == Iii1 :
   xbmcplugin . setContent ( iiIIiiII1 , "episodes" )
   OOo000Oo ( ii1i1ii1I )
  else :
   xbmcplugin . setContent ( iiIIiiII1 , "movies" )
   OOo000Oo ( OO0O0 )
 except :
  pass
  if 32 - 32: I1 % oo % o00oO0oo0O0O0
 i11I1 = { }
 if 4 - 4: i1iI1 - i1iI1
 if 1 - 1: I1IiI1III11i - II * oOO + II % OOoOoO0o0o0OO
 if 43 - 43: OOoOoO0o0o0OO . o00oO0oo0O0O0 % Ii / Ii1I / o00oO0oo0O0O0
 if 66 - 66: oooOoO
 if 66 - 66: i1iI1 . OOO - I1IiI1III11i
 if 42 - 42: IiII1i1I + oo / Ii1I * IIoooO0ooO0oo - oooOoO . i1iI1
 if 83 - 83: IIoooO0ooO0oo . i1iI1 - II / Ii1I . OOoOoO0o0o0OO - oOO
 if 18 - 18: IIoooO0ooO0oo % oOO . oo . iiIIi1i1Iii / OOoOoO0o0o0OO
 if 26 - 26: oooOoO
 I1iIiIii = { }
 i1Ii11i = [ ]
 i1IIiii1IiI = ''
 if len ( rows ) > 0 :
  for III1I1iI1I1iI in rows :
   if 95 - 95: o00oO0oo0O0O0 % oo0o * IIII + Ii1I - iiIIi1i1Iii
   Oo00o0O0oOo0 = [ ]
   O00O00o0ooo = len ( III1I1iI1I1iI )
   iiI11I1iIIi = III1I1iI1I1iI [ 0 ]
   I1IiiII1I1ii = III1I1iI1I1iI [ 1 ]
   OOO0oOOOOOO = III1I1iI1I1iI [ 2 ]
   IiOo = III1I1iI1I1iI [ 6 ]
   if 5 - 5: I1IiI1III11i . i1iI1 + OOO % I1 . I1IiI1III11i - ii1I1ii1IiIi1
   if 13 - 13: II + oo0o - oo0o
   if 46 - 46: I1IiI1III11i
   if 67 - 67: I1IiI1III11i
   O0Oo = III1I1iI1I1iI [ 8 ]
   oo0O0O0 = III1I1iI1I1iI [ 9 ]
   Oo0o00OOoOo = III1I1iI1I1iI [ 10 ]
   I1IiI1111111 = III1I1iI1I1iI [ 11 ]
   Ii11I11Ii11I = III1I1iI1I1iI [ 12 ]
   if O0Oo :
    O00o = O0Oo
    if type == 'series' :
     O0Oo = '[COLOR %s] %s[/COLOR]' % ( O00O000 , O0Oo )
    else :
     O0Oo = '[COLOR %s] %s[/COLOR]' % ( O0OOO , O0Oo )
   else :
    O00o = str ( I1IiiII1I1ii ) + 'x' + OOO0oOOOOOO
    O0Oo = str ( I1IiiII1I1ii ) + 'x' + OOO0oOOOOOO
   i1IIiii1IiI = O00o
   if 6 - 6: Ii - OOoOoO0o0o0OO
   if O00O00o0ooo >= 21 :
    III1i = III1I1iI1I1iI [ 20 ]
    if 4 - 4: I1IiI1III11i . o00oO0oo0O0O0 . Ii1I / oo0o - I1IiI1III11i * IIoooO0ooO0oo
   else :
    III1i = III1I1iI1I1iI [ 3 ]
    if 60 - 60: oOO * oooOoO . Ii1I + oo0o % IIII % ii1I1ii1IiIi1
   if III1i and III1i != 'None' :
    O0Oo = O0Oo + '[COLOR %s] (%s) [/COLOR]' % ( iii1II , str ( " " . join ( set ( III1i . split ( '#' ) ) ) ) )
   if info and 'puntos' in info and III1I1iI1I1iI [ 14 ] :
    O0Oo = O0Oo + '[COLOR lightblue] (%s) [/COLOR]' % str ( III1I1iI1I1iI [ 14 ] )
   if info and 'anno' in info and oo0O0O0 :
    O0Oo = O0Oo + '[COLOR lightyellow] (%s) [/COLOR]' % str ( oo0O0O0 )
    if 10 - 10: OOoOoO0o0o0OO * o00oO0oo0O0O0 . ii1I1ii1IiIi1
   if O00O00o0ooo >= 22 and type == 'pelis' :
    if 86 - 86: IiII1IiI + IIoooO0ooO0oo % ii1I1ii1IiIi1
    Iiii11iIi1I1 = set ( III1I1iI1I1iI [ 21 ] . split ( '#' ) )
    if 81 - 81: I1 / IIII
    if ( 'ES' not in Iiii11iIi1I1 and len ( Iiii11iIi1I1 ) == 1 ) or len ( Iiii11iIi1I1 ) >= 2 :
     O0Oo = O0Oo + ' [COLOR %s](%s)[/COLOR] ' % ( o0O0oO0 , str ( " " . join ( Iiii11iIi1I1 ) ) )
   if info and 'date' in info :
    O0Oo = O0Oo + ' (%s) ' % str ( III1I1iI1I1iI [ 13 ] )
   if not I1IiI1111111 :
    I1IiI1111111 = carat
   if not Ii11I11Ii11I :
    Ii11I11Ii11I = poste
   OoOO0OO0o0O = O000000O0OoOo ( nombre = O0Oo , caratula = I1IiI1111111 ,
 poster = Ii11I11Ii11I , video = { 'title' : O0Oo , 'year' : oo0O0O0 , 'plot' : Oo0o00OOoOo } , isPlayable = True )
   if 66 - 66: II / i1iI1 / OOO * oooOoO * IIII . o00oO0oo0O0O0
   if isinstance ( O00o , unicode ) :
    O00o = O00o . encode ( 'utf-8' )
    if 54 - 54: IiII1i1I . i1iI1 / IIoooO0ooO0oo + Ii1I
   OoooOo0 = type
   if 73 - 73: oo0o * o00oO0oo0O0O0 * Ii1I * oo0o . i1iI1 - oooOoO
   Ooooo0O0Oo = 'play'
   if 21 - 21: IIII + o00oO0oo0O0O0 . i1iI1 . ooOooO0OOO % OOoOoO0o0o0OO
   if O00O00o0ooo > 20 and III1I1iI1I1iI [ 19 ] > 1 :
    Ooooo0O0Oo = IiIIi1I1Ii
    if 68 - 68: oOO * oo / OOoOoO0o0o0OO / oo0o
    if III1I1iI1I1iI [ 18 ] :
     OoooOo0 = OoooOo0 + '&groupId=' + str ( III1I1iI1I1iI [ 18 ] )
     if 94 - 94: ooOooO0OOO + o00oO0oo0O0O0 - I1IiI1III11i + iiIIi1i1Iii
   I1Iiii = '{0}?action={1}&id={2}&lin={3}&tit={4}&type={5}' . format ( I1iI11I , Ooooo0O0Oo , iiI11I1iIIi , IiOo ,
 base64 . urlsafe_b64encode (
 unicode ( O00o , oooOOO ) . encode (
 oooOOO ) ) , OoooOo0 )
   if 83 - 83: ooOooO0OOO * II . ii1I1ii1IiIi1 - ii1I1ii1IiIi1 + oo0o % ooOooO0OOO
   if type == 'pelis' and xbmc . getCondVisibility ( 'System.HasAddon(script.extendedinfo)' ) and III1I1iI1I1iI [ 17 ] and III1I1iI1I1iI [ 17 ] . startswith ( 'https://www.themoviedb.org' ) :
    Oo00o0O0oOo0 . append ( ( "ExtendedInfo" , "XBMC.RunScript(script.extendedinfo,info=extendedinfo,id=%s,name=%s)" % ( str ( III1I1iI1I1iI [ 17 ] . split ( '/' ) [ - 1 ] . split ( '-' ) [ 0 ] ) , O00o ) ) )
    if 15 - 15: OOO * IiII1IiI % Ii + oo + II % I1
   o0OOO = i1iiiiI11i111 ( Ooooo0O0Oo , III1I1iI1I1iI , I1Iiii , 'id=' + str ( III1I1iI1I1iI [ 0 ] ) + '%' )
   if 38 - 38: II - IiII1IiI * oo
   if o0OOO :
    Oo00o0O0oOo0 . append ( o0OOO )
    if 32 - 32: oooOoO % IIII
   Oo00o0O0oOo0 . append (
 OO0o0O0 ( id = '%s-%s-%s' % ( str ( iiI11I1iIIi ) , str ( I1IiiII1I1ii ) , OOO0oOOOOOO ) , type = type , nombre = O0Oo ,
 url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , fav = i11iii , favLiteral = '' ) )
   if type == 'series' :
    Oo00o0O0oOo0 . append (
 OO0o0O0 ( id = '%s-%s-%s' % ( str ( iiI11I1iIIi ) , str ( I1IiiII1I1ii ) , OOO0oOOOOOO ) , type = type , nombre = O0Oo , url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , fav = i11 , text = 'Series' , favLiteral = 's' ) )
    if 50 - 50: oooOoO / OOoOoO0o0o0OO
    if 25 - 25: iiIIi1i1Iii / i1iI1 % oo0o % iiIIi1i1Iii / OOO - Ii
    if 38 - 38: IiII1i1I
    if 19 - 19: I1 / II . oo + oOO . II
    if 59 - 59: IiII1i1I % o00oO0oo0O0O0 - IIoooO0ooO0oo - o00oO0oo0O0O0
    if 84 - 84: iiIIi1i1Iii + ii1I1ii1IiIi1 / oooOoO
   if len ( III1I1iI1I1iI ) > 15 and 'Dibujos' in III1I1iI1I1iI [ 15 ] :
    if 7 - 7: IiII1IiI - oooOoO % ii1I1ii1IiIi1 . oo % IIII * oo0o
    Oo00o0O0oOo0 . append (
 OO0o0O0 ( id = '%s-%s-%s' % ( str ( iiI11I1iIIi ) , str ( I1IiiII1I1ii ) , OOO0oOOOOOO ) , type = type , nombre = O0Oo ,
 url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , fav = ooIIII , text = 'Dibujos' , favLiteral = 'd' ) )
   else :
    Oo00o0O0oOo0 . append (
 OO0o0O0 ( id = '%s-%s-%s' % ( str ( iiI11I1iIIi ) , str ( I1IiiII1I1ii ) , OOO0oOOOOOO ) , type = type , nombre = O0Oo ,
 url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , fav = IiiIi11iIII1 , text = 'Pelis' , favLiteral = 'p' ) )
    if 59 - 59: o00oO0oo0O0O0 + OOO
    if 22 - 22: ii1I1ii1IiIi1 % oooOoO . I1 - oooOoO / o00oO0oo0O0O0
   if III1I1iI1I1iI [ 16 ] == 2 and __settings__ . getSetting ( 'activeDownload' ) and Ooooo0O0Oo != IiIIi1I1Ii :
    Oo00o0O0oOo0 . append (
 IiIIiI ( id = '%s-%s-%s' % ( str ( iiI11I1iIIi ) , str ( I1IiiII1I1ii ) , OOO0oOOOOOO ) , type = type , nombre = O00o ,
 url = IiOo ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , remove = False ) )
   OoOO0OO0o0O . addContextMenuItems ( Oo00o0O0oOo0 )
   if 70 - 70: IiII1IiI
   if 76 - 76: Ii1I % I1 % OOO . o00oO0oo0O0O0 . oo0o - I1IiI1III11i
   if 59 - 59: OOoOoO0o0o0OO % IiII1i1I * oo0o * I1IiI1III11i - IiII1IiI
   if 98 - 98: iiIIi1i1Iii + I1IiI1III11i / oooOoO
   if 43 - 43: IIII
   if Ooooo0O0Oo == IiIIi1I1Ii :
    iIi1Ii = True
   else :
    iIi1Ii = False
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
   if 60 - 60: OOoOoO0o0o0OO * ii1I1ii1IiIi1 . IiII1IiI
   if 62 - 62: I1IiI1III11i
   if 98 - 98: IiII1IiI + IiII1i1I / iiIIi1i1Iii
   if 57 - 57: OOoOoO0o0o0OO / ii1I1ii1IiIi1 % o00oO0oo0O0O0
   if 23 - 23: IIII % II
   if 41 - 41: ii1I1ii1IiIi1 / OOO
   if 55 - 55: IIoooO0ooO0oo % IIII * IIoooO0ooO0oo
   if 66 - 66: I1IiI1III11i
   if 21 - 21: I1
  if len ( rows ) >= ooo0ooOoO0Oo :
   if 'c_page' in info and 'action' in info and 'actionParams' in info :
    i1IiI1iII1iii = int ( info [ 'c_page' ] )
    i1IiI1iII1iii = i1IiI1iII1iii + 1
    try :
     i1IIiii1IiI = i1IIiii1IiI . encode ( 'utf-8' , 'ignore' )
    except ( UnicodeEncodeError , UnicodeDecodeError ) :
     pass
    OoOO0OO0o0O = O000000O0OoOo ( nombre = 'Página Siguiente (%s) >' % str ( i1IiI1iII1iii ) )
    I1Iiii = '{0}?{1}={2}&c_page={3}&page={4}&{5}' . format ( I1iI11I , oOOO0O0 , info [ 'action' ] , str ( i1IiI1iII1iii ) ,
 base64 . urlsafe_b64encode (
 "nombre > '" + i1IIiii1IiI + "'" ) , info [ 'actionParams' ] )
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
    if 3 - 3: I1IiI1III11i % I1 % oOO / oo - oooOoO
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 17 - 17: oo - I1 + oo0o + IIoooO0ooO0oo
 if 23 - 23: oo0o % OOO % oooOoO / oo / I1IiI1III11i
 if 89 - 89: II - o00oO0oo0O0O0 . II + IIII * OOoOoO0o0o0OO
def I1IiIiI ( rows , category = None , lang = None , date = None , params = { } ) :
 i1Ii11i = [ ]
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "tvshows" )
  OOo000Oo ( oO0O0o0ooO )
 except :
  pass
  if 50 - 50: Ii1I * oo0o % i1iI1 * oo0o
  if 53 - 53: II * IiII1i1I
 for III1I1iI1I1iI in rows :
  i1IOoO0Oo0Oo = [ ]
  OoOoOoo0000o = III1I1iI1I1iI [ 0 ]
  i1IIiii1IiI = III1I1iI1I1iI [ 1 ]
  OOoo00OOo = III1I1iI1I1iI [ 2 ]
  oo0O0oO0Oo0OO = ''
  I1iiI11II1 = ''
  o0OoooOOo0O0 = ''
  if 38 - 38: OOoOoO0o0o0OO + OOO + IiII1i1I - oOO % oo - oooOoO
  if category and III1I1iI1I1iI [ 10 ] != 'General' and III1I1iI1I1iI [ 10 ] != 'Pelicula' :
   I1iiI11II1 = '[COLOR %s](%s) [/COLOR]' % ( IIIi1111iI , III1I1iI1I1iI [ 10 ] . replace ( '#' , ', ' ) )
  if lang :
   Iiii11iIi1I1 = set ( III1I1iI1I1iI [ 9 ] . split ( '#' ) )
   if ( 'ES' not in Iiii11iIi1I1 and len ( Iiii11iIi1I1 ) == 1 ) or len ( Iiii11iIi1I1 ) >= 2 :
    oo0O0oO0Oo0OO = '[COLOR %s](%s) [/COLOR]' % ( o0O0oO0 , III1I1iI1I1iI [ 9 ] . replace ( '#' , ' ' ) )
    if 22 - 22: IiII1IiI
    if 88 - 88: oo % Ii1I
  if OOoo00OOo and III1I1iI1I1iI [ 8 ] == 'N' :
   iiI1 = ithil . Ii1IIiI11iI1 ( OOoo00OOo )
   if iiI1 == 'yt' :
    o0iiiI11 = ithil . oO0Oo00 ( OOoo00OOo )
    for iii1IiI in xrange ( 0 , len ( o0iiiI11 ) ) :
     if len ( o0iiiI11 ) <= 1 :
      II11iII111111 = ''
     else :
      II11iII111111 = " (" + str ( iii1IiI + 1 ) + ")"
     iI11iiIi1I1iI = '[COLOR %s]%s [/COLOR] %s %s %s' % ( i1IiI1iii , i1IIiii1IiI + II11iII111111 , oo0O0oO0Oo0OO , I1iiI11II1 , o0OoooOOo0O0 )
     OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : III1I1iI1I1iI [ 5 ] } )
     if 32 - 32: OOoOoO0o0o0OO
     if xbmc . getCondVisibility ( 'System.HasAddon(script.extendedinfo)' ) and III1I1iI1I1iI [ 12 ] and III1I1iI1I1iI [ 12 ] . startswith ( 'https://www.themoviedb.org' ) :
      if 25 - 25: o00oO0oo0O0O0 % o00oO0oo0O0O0 + I1 / IIII * II * i1iI1
      i1IOoO0Oo0Oo . append ( ( "ExtendedInfo" ,
 "XBMC.RunScript(script.extendedinfo,info=extendedtvinfo,id=%s,name=%s)" % (
 str ( III1I1iI1I1iI [ 12 ] . split ( '/' ) [ - 1 ] . split ( '-' ) [ 0 ] ) , i1IIiii1IiI ) ) )
      if 60 - 60: Ii1I - IIII * II + i1iI1 / oo0o
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = o0iiiI11 [ iii1IiI ] ,
 caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ) )
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI ,
 url = o0iiiI11 [ iii1IiI ] ,
 caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] , fav = i11 ,
 text = 'Series' , favLiteral = 's' ) )
     if 'Dibujos' in III1I1iI1I1iI [ 10 ] :
      i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI ,
 url = o0iiiI11 [ iii1IiI ] ,
 caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] , fav = ooIIII ,
 text = 'Dibujos' , favLiteral = 'd' ) )
     OoOO0OO0o0O . addContextMenuItems ( i1IOoO0Oo0Oo )
     i1Ii11i . append ( ( o0iiiI11 [ iii1IiI ] , OoOO0OO0o0O , True ) )
   else :
    iI11iiIi1I1iI = '[COLOR %s]%s [/COLOR] %s %s %s' % ( i1IiI1iii , i1IIiii1IiI , oo0O0oO0Oo0OO , I1iiI11II1 , o0OoooOOo0O0 )
    OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : III1I1iI1I1iI [ 5 ] } )
    I1Iiii = '{0}?{1}=view_serie&serie_id={2}' . format ( I1iI11I , oOOO0O0 , OoOoOoo0000o )
    if 8 - 8: oo / iiIIi1i1Iii % IiII1i1I
    if xbmc . getCondVisibility ( 'System.HasAddon(script.extendedinfo)' ) and III1I1iI1I1iI [ 12 ] and III1I1iI1I1iI [ 12 ] . startswith ( 'https://www.themoviedb.org' ) :
     if 84 - 84: I1
     i1IOoO0Oo0Oo . append ( ( "ExtendedInfo" ,
 "XBMC.RunScript(script.extendedinfo,info=extendedtvinfo,id=%s,name=%s)" % (
 str ( III1I1iI1I1iI [ 12 ] . split ( '/' ) [ - 1 ] . split ( '-' ) [ 0 ] ) , i1IIiii1IiI ) ) )
     if 2 - 2: oo - IiII1IiI % IiII1i1I
    i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ) )
    if 37 - 37: Ii1I + I1 - IIoooO0ooO0oo
    if 'Dibujos' in III1I1iI1I1iI [ 10 ] :
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , fav = ooIIII , text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     i1IOoO0Oo0Oo . append (
 OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , fav = i11 , text = 'Series' , favLiteral = 's' ) )
    OoOO0OO0o0O . addContextMenuItems ( i1IOoO0Oo0Oo )
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
  else :
   iI11iiIi1I1iI = '[COLOR %s]%s [/COLOR] %s %s %s' % ( i1IiI1iii , i1IIiii1IiI , oo0O0oO0Oo0OO , I1iiI11II1 , o0OoooOOo0O0 )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : III1I1iI1I1iI [ 5 ] } )
   I1Iiii = '{0}?{1}=serie&serie_id={2}' . format ( I1iI11I , oOOO0O0 , OoOoOoo0000o )
   if 15 - 15: Ii * OOO + oo0o % IIoooO0ooO0oo - iiIIi1i1Iii / oo0o
   if xbmc . getCondVisibility ( 'System.HasAddon(script.extendedinfo)' ) and III1I1iI1I1iI [ 12 ] and III1I1iI1I1iI [ 12 ] . startswith ( 'https://www.themoviedb.org' ) :
    if 86 - 86: IiII1i1I . IiII1IiI + OOO . oooOoO % II
    i1IOoO0Oo0Oo . append ( ( "ExtendedInfo" ,
 "XBMC.RunScript(script.extendedinfo,info=extendedtvinfo,id=%s,name=%s)" % (
 str ( III1I1iI1I1iI [ 12 ] . split ( '/' ) [ - 1 ] . split ( '-' ) [ 0 ] ) , i1IIiii1IiI ) ) )
    if 47 - 47: oo + IiII1i1I * ii1I1ii1IiIi1 / IiII1i1I
    if 38 - 38: o00oO0oo0O0O0 / IIII + I1IiI1III11i * OOO
   i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ) )
   if 'Dibujos' in III1I1iI1I1iI [ 10 ] :
    i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ,
 fav = ooIIII , text = 'Dibujos' , favLiteral = 'd' ) )
   else :
    i1IOoO0Oo0Oo . append (
 OO0o0O0 ( id = str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ,
 fav = i11 , text = 'Series' , favLiteral = 's' ) )
   OoOO0OO0o0O . addContextMenuItems ( i1IOoO0Oo0Oo )
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
   if 72 - 72: oOO * I1 - oOO % I1 % OOoOoO0o0o0OO % OOoOoO0o0o0OO
 if len ( rows ) >= ooo0ooOoO0Oo :
  if 'c_page' in params and 'action' in params :
   if 51 - 51: o00oO0oo0O0O0 + oo % Ii + ooOooO0OOO - I1
   try :
    i1IIiii1IiI = i1IIiii1IiI . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   i1IiI1iII1iii = int ( params [ 'c_page' ] )
   i1IiI1iII1iii = i1IiI1iII1iii + 1
   OoOO0OO0o0O = O000000O0OoOo ( nombre = 'Página Siguiente (%s) >' % str ( i1IiI1iII1iii ) )
   I1Iiii = '{0}?{1}={2}&c_page={3}&page={4}&{5}' . format ( I1iI11I , oOOO0O0 , params [ 'action' ] , str ( i1IiI1iII1iii ) ,

   # oo0o % iiIIi1i1Iii % oo
   base64 . urlsafe_b64encode (
 "nombre > '" + i1IIiii1IiI + "'" ) , params [ 'actionParams' ] )
   if 80 - 80: I1
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 66 - 66: I1IiI1III11i
 if 38 - 38: I1 . IiII1i1I + i1iI1 * iiIIi1i1Iii / ooOooO0OOO
 if 32 - 32: IIoooO0ooO0oo - i1iI1 . OOO
def iiIiiI ( serie_id ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute (
 "SELECT series.serie_id, series_temp.temp_id, series_temp.link, series.nombre, series.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series_temp.has_episodes, series_temp.nombre, series.link, 'quality', 'quality', series.category , series_temp.active FROM series LEFT JOIN series_temp ON series.serie_id = series_temp.serie_id where series.serie_id=? ORDER BY series_temp.temp_id" ,
 ( serie_id , ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 i1Ii11i = [ ]
 i1IOoO0Oo0Oo = [ ]
 IIIi1i1i = False
 if len ( Ii111I ) > 0 :
  O0OoOOoOoO = Ii111I [ 0 ] [ 16 ]
  if 1 - 1: II
  if Ii111I [ 0 ] [ 13 ] :
   iiI1 = ithil . Ii1IIiI11iI1 ( Ii111I [ 0 ] [ 13 ] )
   if iiI1 == 'yt' :
    o0iiiI11 = ithil . oO0Oo00 ( Ii111I [ 0 ] [ 13 ] )
    for iii1IiI in xrange ( 0 , len ( o0iiiI11 ) ) :
     if len ( o0iiiI11 ) <= 1 :
      II11iII111111 = ''
     else :
      II11iII111111 = " (" + str ( iii1IiI + 1 ) + ")"
     iI11iiIi1I1iI = '[COLOR %s]Lista de Capítulos %s [/COLOR]' % ( i1IiI1iii , II11iII111111 )
     OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = Ii111I [ 0 ] [ 6 ] ,
 poster = Ii111I [ 0 ] [ 7 ] ,
 video = { 'title' : Ii111I [ 0 ] [ 3 ] , 'year' : Ii111I [ 0 ] [ 4 ] , 'plot' : Ii111I [ 0 ] [ 5 ] } )
     if 32 - 32: oo
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = o0iiiI11 [ iii1IiI ] , caratula = Ii111I [ 0 ] [ 6 ] ,
 poster = Ii111I [ 0 ] [ 7 ] ) )
     if O0OoOOoOoO == 'Dibujos' :
      i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = o0iiiI11 [ iii1IiI ] , caratula = Ii111I [ 0 ] [ 6 ] , fav = ooIIII ,
 text = 'Dibujos' , favLiteral = 'd' ,
 poster = Ii111I [ 0 ] [ 7 ] ) )
     else :
      i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = o0iiiI11 [ iii1IiI ] , caratula = Ii111I [ 0 ] [ 6 ] , fav = i11 ,
 text = 'Series' , favLiteral = 's' ,
 poster = Ii111I [ 0 ] [ 7 ] ) )
     OoOO0OO0o0O . addContextMenuItems ( i1IOoO0Oo0Oo )
     i1Ii11i . append ( ( o0iiiI11 [ iii1IiI ] , OoOO0OO0o0O , True ) )
   else :
    iI11iiIi1I1iI = '[COLOR %s]Lista de Capítulos [/COLOR]' % i1IiI1iii
    OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = Ii111I [ 0 ] [ 6 ] ,
 poster = Ii111I [ 0 ] [ 7 ] ,
 video = { 'title' : Ii111I [ 0 ] [ 3 ] , 'year' : Ii111I [ 0 ] [ 4 ] ,
 'plot' : 'Todos los episodios de la serie' } )
    I1Iiii = '{0}?{1}=view_serie&serie_id={2}' . format ( I1iI11I , oOOO0O0 , serie_id )
    i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 , nombre = iI11iiIi1I1iI , url = I1Iiii ,
 caratula = Ii111I [ 0 ] [ 6 ] , poster = Ii111I [ 0 ] [ 7 ] ) )
    if O0OoOOoOoO == 'Dibujos' :
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii ,
 caratula = Ii111I [ 0 ] [ 6 ] , poster = Ii111I [ 0 ] [ 7 ] , fav = ooIIII ,
 text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii ,
 caratula = Ii111I [ 0 ] [ 6 ] , poster = Ii111I [ 0 ] [ 7 ] , fav = i11 ,
 text = 'Series' , favLiteral = 's' ) )
    OoOO0OO0o0O . addContextMenuItems ( i1IOoO0Oo0Oo )
    if 26 - 26: Ii + OOoOoO0o0o0OO . II * oo
    if 33 - 33: OOO / IiII1i1I + OOO - OOoOoO0o0o0OO
    if 74 - 74: oo * OOoOoO0o0o0OO / Ii1I * I1
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
 for III1I1iI1I1iI in Ii111I :
  O0OoOOoOoO = III1I1iI1I1iI [ 16 ]
  i1IOoO0Oo0Oo = [ ]
  IIIi1i1i = False
  OoOoOoo0000o = III1I1iI1I1iI [ 0 ]
  oOoO0oOoO0oo = III1I1iI1I1iI [ 1 ]
  if 8 - 8: oOO
  if III1I1iI1I1iI [ 12 ] :
   IiiII11Ii1I = III1I1iI1I1iI [ 12 ]
  else :
   IiiII11Ii1I = '%s %s' % ( 'Temporada' , oOoO0oOoO0oo )
  iiIIII1iii = OoOO00oo ( III1I1iI1I1iI [ 5 ] , III1I1iI1I1iI [ 6 ] , III1I1iI1I1iI [ 7 ] , III1I1iI1I1iI [ 8 ] , III1I1iI1I1iI [ 9 ] , III1I1iI1I1iI [ 10 ] )
  if III1I1iI1I1iI [ 2 ] and III1I1iI1I1iI [ 17 ] > 0 :
   iIi1Ii = True
   IIIi1i1i = True
   iiI1 = ithil . Ii1IIiI11iI1 ( III1I1iI1I1iI [ 2 ] )
   if iiI1 == 'yt' :
    o0iiiI11 = ithil . oO0Oo00 ( III1I1iI1I1iI [ 2 ] )
    for iii1IiI in xrange ( 0 , len ( o0iiiI11 ) ) :
     if len ( o0iiiI11 ) <= 1 :
      II11iII111111 = ''
     else :
      II11iII111111 = " (" + str ( iii1IiI + 1 ) + ")"
     iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , IiiII11Ii1I + II11iII111111 )
     OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = iiIIII1iii [ 1 ] ,
 poster = iiIIII1iii [ 2 ] ,
 video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : iiIIII1iii [ 0 ] } )
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = o0iiiI11 [ iii1IiI ] , caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] ) )
     if O0OoOOoOoO == 'Dibujos' :
      i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = o0iiiI11 [ iii1IiI ] , caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] ,
 fav = ooIIII , text = 'Dibujos' , favLiteral = 'd' ) )
     else :
      i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = o0iiiI11 [ iii1IiI ] , caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] ,
 fav = i11 , text = 'Series' , favLiteral = 's' ) )
     OoOO0OO0o0O . addContextMenuItems ( i1IOoO0Oo0Oo )
     i1Ii11i . append ( ( o0iiiI11 [ iii1IiI ] , OoOO0OO0o0O , True ) )
   else :
    iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , IiiII11Ii1I )
    OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = iiIIII1iii [ 1 ] ,
 poster = iiIIII1iii [ 2 ] ,
 video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : iiIIII1iii [ 0 ] } )
    I1Iiii = '{0}?{1}=view_temp&serie_id={2}&temp_id={3}' . format ( I1iI11I , oOOO0O0 , OoOoOoo0000o , oOoO0oOoO0oo )
    if 100 - 100: Ii1I % IiII1i1I
    i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii , caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] ) )
    if O0OoOOoOoO == 'Dibujos' :
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = I1Iiii , caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] , fav = ooIIII ,
 text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = I1Iiii , caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] , fav = i11 ,
 text = 'Series' , favLiteral = 's' ) )
     if 77 - 77: ii1I1ii1IiIi1
     if 76 - 76: o00oO0oo0O0O0 % i1iI1 - oo0o
     if 51 - 51: OOO / i1iI1
     if 40 - 40: oo * IIII * IiII1IiI
    OoOO0OO0o0O . addContextMenuItems ( i1IOoO0Oo0Oo )
    if 11 - 11: oOO + oOO * IIII . i1iI1
    if 92 - 92: Ii1I * IiII1i1I - IiII1IiI
    if 34 - 34: oo0o - IIoooO0ooO0oo - oOO / IIII
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
  if III1I1iI1I1iI [ 11 ] == 'Y' :
   i1IOoO0Oo0Oo = [ ]
   iI11iiIi1I1iI = '[COLOR %s]%s [/COLOR]' % ( i1IiI1iii , IiiII11Ii1I )
   if III1I1iI1I1iI [ 2 ] :
    iI11iiIi1I1iI = '%s [COLOR %s](Alternativo)[/COLOR]' % ( iI11iiIi1I1iI , i11ii )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = iiIIII1iii [ 1 ] ,
 poster = iiIIII1iii [ 2 ] ,
 video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : iiIIII1iii [ 0 ] } )
   I1Iiii = '{0}?{1}=list_temp&serie_id={2}&temp_id={3}&caratula={4}&poster={5}' . format ( I1iI11I , oOOO0O0 , OoOoOoo0000o , oOoO0oOoO0oo ,
 iiIIII1iii [ 1 ] , iiIIII1iii [ 2 ] )
   if 18 - 18: I1 * IIII - ooOooO0OOO * IiII1i1I
   i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 , nombre = iI11iiIi1I1iI , url = I1Iiii ,
 caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] ) )
   if O0OoOOoOoO == 'Dibujos' :
    i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii ,
 caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] , fav = ooIIII , text = 'Dibujos' ,
 favLiteral = 'd' ) )
   else :
    i1IOoO0Oo0Oo . append ( OO0o0O0 ( id = '%s%s' % ( str ( OoOoOoo0000o ) , str ( oOoO0oOoO0oo ) ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii ,
 caratula = iiIIII1iii [ 1 ] , poster = iiIIII1iii [ 2 ] , fav = i11 , text = 'Series' ,
 favLiteral = 's' ) )
    if 97 - 97: IiII1i1I
    if 60 - 60: Ii / oooOoO
    if 85 - 85: oooOoO
    if 2 - 2: IiII1i1I * II * I1
    if 83 - 83: oooOoO % I1IiI1III11i * I1IiI1III11i / IiII1i1I - ooOooO0OOO + ooOooO0OOO
   OoOO0OO0o0O . addContextMenuItems ( i1IOoO0Oo0Oo )
   if 69 - 69: I1 * I1
   if 99 - 99: IIII / oOO * iiIIi1i1Iii / IiII1i1I
   if 73 - 73: II . IiII1i1I + Ii . OOO
   if 97 - 97: Ii1I . I1 % i1iI1 + IIoooO0ooO0oo / IIII
   iIi1Ii = True
   IIIi1i1i = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "tvshows" )
  OOo000Oo ( oO0O0o0ooO )
 except :
  pass
 if IIIi1i1i :
  xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
  xbmcplugin . endOfDirectory ( iiIIiiII1 )
 else :
  xbmc . log ( "[addon.Palantir-%s]: No info found for serie %s " % ( IiIi , serie_id ) )
  if 84 - 84: II + Ii1I * I1IiI1III11i
  if 96 - 96: Ii1I / Ii1I % oo
  if 82 - 82: OOO
def iIO0Ooo ( serie_id , temp_id , caratula , poster ) :
 Ii111I = O000o000o0Oo ( "capitulos" , [ "serie_id" , "temp_id" , "capitulo_id" , "''" , "''" , "''" , "link" , "'quality'" ,
 "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "updated" , "'Test'" , "'Test'" , "active" ] , [ "serie_id" , "temp_id" ] ,
 [ serie_id , temp_id ] , [ 'capitulos.nombre' , 'capitulos.capitulo_id' ] , params = { 'sql_cond' : ' active > 0' } )
 OooO00OOo0OOO ( Ii111I , Iii1 , caratula , poster )
 if 61 - 61: IiII1i1I + I1IiI1III11i
 if 54 - 54: oOO + oo * Ii1I
 if 64 - 64: iiIIi1i1Iii / oo + OOoOoO0o0o0OO % IiII1i1I / OOoOoO0o0o0OO . Ii1I
def ii11I11I ( serie_id , temp_id ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute (
 "SELECT series.serie_id, series_temp.temp_id, '', '', '', '', series_temp.link, 'quality', series.nombre, series_temp.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series.category, series.active FROM series INNER JOIN series_temp ON series.serie_id=series_temp.serie_id where series_temp.serie_id=? AND series_temp.temp_id=?" ,
 ( serie_id , temp_id , ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 8 - 8: IiII1IiI
 iiIIII1iii = OoOO00oo ( Ii111I [ 0 ] [ 10 ] , Ii111I [ 0 ] [ 11 ] , Ii111I [ 0 ] [ 12 ] , Ii111I [ 0 ] [ 13 ] , Ii111I [ 0 ] [ 14 ] , Ii111I [ 0 ] [ 15 ] )
 II11iII11i1ii = ithil . ooO0O0O ( Ii111I [ 0 ] [ 6 ] , i11i , serie_id , temp_id )
 iIIi1II1Ii1I = [ None ] * len ( II11iII11i1ii )
 if 51 - 51: oo0o - OOO
 for iii1IiI in xrange ( 0 , len ( II11iII11i1ii ) ) :
  if 12 - 12: IIII - oo0o + IiII1IiI + OOO % II + IIoooO0ooO0oo
  iIIi1II1Ii1I [ iii1IiI ] = list ( Ii111I [ 0 ] [ : len ( Ii111I [ 0 ] ) ] )
  iIIi1II1Ii1I [ iii1IiI ] [ 10 ] = iiIIII1iii [ 0 ]
  iIIi1II1Ii1I [ iii1IiI ] [ 11 ] = iiIIII1iii [ 1 ]
  iIIi1II1Ii1I [ iii1IiI ] [ 12 ] = iiIIII1iii [ 2 ]
  iIIi1II1Ii1I [ iii1IiI ] [ 6 ] = II11iII11i1ii [ iii1IiI ] [ 1 ]
  iIIi1II1Ii1I [ iii1IiI ] [ 8 ] = II11iII11i1ii [ iii1IiI ] [ 0 ]
  iIIi1II1Ii1I [ iii1IiI ] [ 10 ] = ''
  if 11 - 11: Ii . IiII1IiI * oooOoO - iiIIi1i1Iii % oOO
  if 5 - 5: I1IiI1III11i - I1 . i1iI1 % OOO / o00oO0oo0O0O0 / IiII1IiI
  if 83 - 83: oo / i1iI1 / I1 % Ii1I . iiIIi1i1Iii
  iIIi1II1Ii1I [ iii1IiI ] [ 15 ] = Ii111I [ 0 ] [ 16 ]
  iIIi1II1Ii1I [ iii1IiI ] [ 16 ] = Ii111I [ 0 ] [ 17 ]
  if 85 - 85: i1iI1 % oOO * iiIIi1i1Iii
  if 61 - 61: OOO . oo + I1IiI1III11i % oo / iiIIi1i1Iii % Ii
 OooO00OOo0OOO ( iIIi1II1Ii1I , Iii1 )
 if 43 - 43: Ii1I % IIII / OOoOoO0o0o0OO - IiII1i1I
 if 66 - 66: oOO
 if 50 - 50: IiII1IiI
def IIi1IiIi1I1 ( serie_id ) :
 Ii111I = O000o000o0Oo ( "series" ,
 [ "serie_id" , "''" , "''" , "''" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "updated" , "''" , "category" , "active" , "tmdb"
 ] , [ "serie_id" ] , [ serie_id ] , [ 'serie_id' ] )
 if 13 - 13: i1iI1
 if 7 - 7: Ii
 II11iII11i1ii = ithil . ooO0O0O ( Ii111I [ 0 ] [ 6 ] , i11i , serie_id )
 iIIi1II1Ii1I = [ None ] * len ( II11iII11i1ii )
 for iii1IiI in xrange ( 0 , len ( II11iII11i1ii ) ) :
  iIIi1II1Ii1I [ iii1IiI ] = list ( Ii111I [ 0 ] [ : ] )
  iIIi1II1Ii1I [ iii1IiI ] [ 6 ] = II11iII11i1ii [ iii1IiI ] [ 1 ]
  iIIi1II1Ii1I [ iii1IiI ] [ 8 ] = II11iII11i1ii [ iii1IiI ] [ 0 ]
  iIIi1II1Ii1I [ iii1IiI ] [ 10 ] = ''
 OooO00OOo0OOO ( iIIi1II1Ii1I , Iii1 )
 if 52 - 52: i1iI1 - oo / Ii . oooOoO
 if 27 - 27: IiII1i1I / OOoOoO0o0o0OO + I1 - oo0o / o00oO0oo0O0O0 * iiIIi1i1Iii
 if 27 - 27: oOO - IIII
def Ii1I1I ( ) :
 i1Ii11i = [ ]
 for iii1IiI in range ( 0 , 99 ) :
  IIIii = datetime . datetime . now ( ) . year - iii1IiI
  iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , IIIii )
  OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
  I1Iiii = '{0}?action={1}&anno={2}' . format ( I1iI11I , "ultimas_pelis_anyo_detail" , IIIii )
  iIi1Ii = True
  i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 91 - 91: oo0o . Ii + oOO + ii1I1ii1IiIi1 . OOO
def i1IIII ( action , params ) :
 if 'sql_limit' in params :
  II1i11 = params [ 'sql_limit' ]
 else :
  II1i11 = ''
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "Select anno,count(peli_id) from pelis %s group by anno order by anno desc %s" % ( params [ 'sql_cond' ] , II1i11 ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 i1Ii11i = [ ]
 for III1I1iI1I1iI in Ii111I :
  IIIii = III1I1iI1I1iI [ 0 ]
  iiiO000Oo = III1I1iI1I1iI [ 1 ]
  iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR] (%s)' % ( i1IiI1iii , IIIii , iiiO000Oo )
  OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
  I1Iiii = '{0}?action={1}&anno={2}' . format ( I1iI11I , action , IIIii )
  iIi1Ii = True
  i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 53 - 53: IIII + ooOooO0OOO
 if 27 - 27: oo0o - I1IiI1III11i + Ii % II + oo0o - oooOoO
def O0oOOo00o ( ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 if 35 - 35: Ii * i1iI1 / ii1I1ii1IiIi1
 IIiIii1IiI1i . execute ( base64 . urlsafe_b64decode ( "c2VsZWN0IGdyb3VwX2NvbmNhdChzYWdhLCAnIycpIGZyb20gcGVsaXMgb3JkZXIgYnkgc2FnYSBhc2M=" ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 83 - 83: I1
 Ii111I = sorted ( set ( Ii111I [ 0 ] [ 0 ] . split ( '#' ) ) )
 i1Ii11i = [ ]
 for III1I1iI1I1iI in Ii111I :
  if 28 - 28: II * oooOoO . IIII % I1
  if ( III1I1iI1I1iI != '' and III1I1iI1I1iI != ' ' ) :
   IIiii1I = III1I1iI1I1iI
   try :
    IIiii1I = IIiii1I . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , IIiii1I )
   OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
   I1Iiii = '{0}?action=saga_detail&saga={1}' . format ( I1iI11I , base64 . urlsafe_b64encode ( IIiii1I ) )
   iIi1Ii = True
   O0O00oOO00 = II1Ii11i1Ii1I ( base64 . urlsafe_b64encode ( IIiii1I ) )
   if len ( O0O00oOO00 ) > 0 :
    OoOO0OO0o0O . addContextMenuItems ( O0O00oOO00 )
    if 19 - 19: I1 * IiII1i1I . i1iI1 % IiII1i1I + OOO
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 37 - 37: oooOoO
 if 55 - 55: IIII % IiII1i1I + ooOooO0OOO - OOoOoO0o0o0OO + I1 * ii1I1ii1IiIi1
def O0O0OOOOo0oOo ( ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "select group_concat(lower(tags), '#') from pelis order by peli_id asc" )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 50 - 50: I1IiI1III11i
 Ii111I = sorted ( set ( Ii111I [ 0 ] [ 0 ] . split ( '#' ) ) )
 if 96 - 96: I1IiI1III11i % OOoOoO0o0o0OO + ooOooO0OOO + oOO / iiIIi1i1Iii * OOoOoO0o0o0OO
 i1Ii11i = [ ]
 for III1I1iI1I1iI in Ii111I :
  OOOO00OO00OoO = III1I1iI1I1iI
  if OOOO00OO00OoO != '' :
   if 37 - 37: II - IIoooO0ooO0oo . i1iI1 * oo * Ii
   try :
    OOOO00OO00OoO = OOOO00OO00OoO . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , OOOO00OO00OoO . capitalize ( ) )
   OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
   I1Iiii = '{0}?action=genero_detail&genero={1}' . format ( I1iI11I , base64 . urlsafe_b64encode ( OOOO00OO00OoO ) )
   iIi1Ii = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 99 - 99: iiIIi1i1Iii / Ii1I / IiII1i1I / ii1I1ii1IiIi1 % OOO
 if 73 - 73: oo - I1 + I1IiI1III11i
def iiII1i1 ( ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "select group_concat(lower(genero), '#') from pelis order by peli_id asc" )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 8 - 8: o00oO0oo0O0O0 . IIII . IIoooO0ooO0oo . o00oO0oo0O0O0 * oooOoO
 Ii111I = sorted ( set ( Ii111I [ 0 ] [ 0 ] . split ( '#' ) ) )
 if 9 - 9: I1IiI1III11i - IIII % Ii
 i1Ii11i = [ ]
 for III1I1iI1I1iI in Ii111I :
  OOOO00OO00OoO = III1I1iI1I1iI
  if OOOO00OO00OoO != '' :
   if 9 - 9: o00oO0oo0O0O0 - o00oO0oo0O0O0 / II
   try :
    OOOO00OO00OoO = OOOO00OO00OoO . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , OOOO00OO00OoO . capitalize ( ) )
   OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
   I1Iiii = '{0}?action=genero_detail&genero={1}' . format ( I1iI11I , base64 . urlsafe_b64encode ( OOOO00OO00OoO ) )
   iIi1Ii = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 52 - 52: oooOoO % IiII1i1I + IIoooO0ooO0oo
 if 41 - 41: oOO
def OOO0Oo ( saga , params ) :
 params [ 'sql_group' ] = ' group_id'
 params [ 'anno' ] = 'true'
 params [ 'puntos' ] = 'true'
 params [ 'action' ] = 'saga_detail'
 params [ 'actionParams' ] = 'saga=' + saga
 params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
 if 'page' in params and 'c_page' in params :
  params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
 else :
  oo0 = 1
  params [ 'c_page' ] = oo0
 Ii111I = I1i11IIii1i1I ( "pelis" , "saga" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ "saga" ] , base64 . urlsafe_b64decode ( saga ) . decode ( 'utf-8' ) , [ 'nombre' ] , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
 if 66 - 66: I1IiI1III11i % Ii * IIoooO0ooO0oo . OOO
def i11IiIii111i ( gen , params ) :
 params [ 'sql_group' ] = ' group_id'
 params [ 'anno' ] = 'true'
 params [ 'puntos' ] = 'true'
 params [ 'action' ] = 'genero_detail'
 params [ 'actionParams' ] = 'genero=' + gen
 params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
 if 'page' in params and 'c_page' in params :
  params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
 else :
  oo0 = 1
  params [ 'c_page' ] = oo0
 Ii111I = I1i11IIii1i1I ( "pelis" , "genero" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" ,
 "anno" , "sinopsis" ,
 "caratula" , "poster" ,
 "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ "genero" ] , base64 . urlsafe_b64decode ( gen ) . decode ( 'utf-8' ) , [ 'nombre' ] , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
 if 82 - 82: Ii * II % ii1I1ii1IiIi1 % OOO - II
def Ii1iiI ( anno , order , params ) :
 params [ 'actionParams' ] = 'anno=' + anno
 params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
 if 'page' in params and 'c_page' in params :
  params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
 else :
  oo0 = 1
  params [ 'c_page' ] = oo0
 Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ "anno" ] , [ anno ] , order , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
 if 53 - 53: oo / oooOoO / I1IiI1III11i / I1IiI1III11i
def oo00Oo0 ( category , order , params = { } ) :
 params [ 'actionParams' ] = 'category=' + category [ 0 ]
 params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
 if 'page' in params and 'c_page' in params :
  params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
 else :
  oo0 = 1
  params [ 'c_page' ] = oo0
 Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ "category" ] , category , order , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
 if 72 - 72: i1iI1
def I1i11IIii1i1I ( table , column_cond , values , id , id_value , order , params = { } ) :
 OO0ooOoO = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = OO0ooOoO . cursor ( )
 if params and 'sql_limit' in params :
  II1i11 = params [ 'sql_limit' ]
 else :
  II1i11 = ''
 if params and 'sql_group' in params :
  I111Iii11i = ' group by ' + params [ 'sql_group' ]
 else :
  I111Iii11i = ''
 if params and 'sql_cond' in params :
  iioo = ' and ' + params [ 'sql_cond' ]
 else :
  iioo = ''
  if 50 - 50: IiII1IiI % oo
 IIiIii1IiI1i . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( id ) + " FROM " + table + " WHERE active > 0 " + iioo + " and ( " + column_cond + " like '" + id_value + "' or " + column_cond + " like '" + id_value + "#%' or " + column_cond + " like '%#" + id_value + "' or " + column_cond + " like '%#" + id_value + "#%') " + I111Iii11i + " order by " + "," . join ( order ) + II1i11 )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 OO0ooOoO . close ( )
 return Ii111I
 if 5 - 5: IiII1i1I + OOO . IiII1i1I + IIII % OOoOoO0o0o0OO
def O000o000o0Oo ( table , values , ids , ids_value , order , params = '' ) :
 if 34 - 34: IiII1IiI * OOoOoO0o0o0OO . I1IiI1III11i . IIII / ooOooO0OOO
 iioo = ''
 II1i11 = ''
 I111Iii11i = ''
 if 4 - 4: i1iI1
 if params and 'sql_limit' in params :
  II1i11 = params [ 'sql_limit' ]
 if params and 'sql_cond' in params :
  if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
   iioo = ' where ' + params [ 'sql_cond' ]
  else :
   iioo = params [ 'sql_cond' ] + ' and '
 if params and 'sql_group' in params :
  I111Iii11i = ' group by ' + params [ 'sql_group' ]
 OO0ooOoO = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = OO0ooOoO . cursor ( )
 if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
  if 54 - 54: ii1I1ii1IiIi1
  IIiIii1IiI1i . execute ( "SELECT " + "," . join ( values ) + " FROM " + table + iioo + I111Iii11i + " order by " + "," . join ( order ) + II1i11 )
 else :
  if 41 - 41: i1iI1 * OOoOoO0o0o0OO . o00oO0oo0O0O0 / oo
  IIiIii1IiI1i . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( ids ) + " FROM " + table + " WHERE " + iioo + (
 " = ? and " . join ( ids ) + "=?" ) + I111Iii11i + " order by " + "," . join ( order ) + II1i11 , ids_value )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 OO0ooOoO . close ( )
 return Ii111I
 if 100 - 100: oo0o / IIoooO0ooO0oo + oOO . oooOoO . OOoOoO0o0o0OO + Ii
def iIii1 ( lin , tit , id , type , params ) :
 ithil . IIi ( lin , tit , i11i , id , type , 'play' , params )
 if 24 - 24: ii1I1ii1IiIi1 - iiIIi1i1Iii * Ii - i1iI1 / OOoOoO0o0o0OO / oooOoO
 if 63 - 63: ii1I1ii1IiIi1 . I1 . IiII1IiI * IiII1i1I / ooOooO0OOO
def ooO00o00oOO ( paramstring ) :
 Ii111 = dict ( parse_qsl ( paramstring ) )
 if Ii111 :
  if Ii111 [ oOOO0O0 ] == Iii1 :
   Ooo00o0oo0o ( '==' , 'general' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'series_dibujos' :
   Ooo00o0oo0o ( 'like' , '%dibujos%' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'series_retro' :
   Ooo00o0oo0o ( 'like' , '%retro%' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'series_4k' :
   Ooo00o0oo0o ( 'like' , '%4k%' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'series_3d' :
   Ooo00o0oo0o ( 'like' , '%3d%' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'series_documentales' :
   Ooo00o0oo0o ( 'like' , '%documental%' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'series_musica' :
   Ooo00o0oo0o ( 'like' , '%musica%' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'telenovelas' :
   Ooo00o0oo0o ( 'like' , '%telenovela%' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'series_anime' :
   Ooo00o0oo0o ( 'like' , '%anime%' , Ii111 )
   if 33 - 33: OOoOoO0o0o0OO % oo0o - ooOooO0OOO . Ii
   if 81 - 81: IiII1IiI . ooOooO0OOO + oo0o + oo0o % oo + I1
  elif Ii111 [ oOOO0O0 ] == 'searchSerie' :
   IIII1I ( IIi11Ii1 , 'series' )
  elif Ii111 [ oOOO0O0 ] == 'searchPeli' :
   IIII1I ( iiI1111IIiiI , 'pelis' )
  elif Ii111 [ oOOO0O0 ] == 'seriesByLang' :
   if 'lang' in Ii111 :
    O0O00OooO00O ( Ii111 [ 'lang' ] , 'series' , Ii111 )
   else :
    O0O00OooO00O ( None , 'series' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'pelisByLang' :
   if 'lang' in Ii111 :
    O0O00OooO00O ( Ii111 [ 'lang' ] , 'pelis' , Ii111 )
   else :
    O0O00OooO00O ( None , 'pelis' , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'seriesByAZ' :
   oOOO0o ( Ii111 , 'serie' )
  elif Ii111 [ oOOO0O0 ] == 'series_mas_vistas' :
   i11iIIi ( "views" )
  elif Ii111 [ oOOO0O0 ] == 'series_mas_vistas_mes' :
   i11iIIi ( "last_month_views" )
  elif Ii111 [ oOOO0O0 ] == 'pelis_mas_vistas' :
   OooOoOooo ( [ 'sum(views) desc' ] , { "sql_cond" : "  active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Ii111 [ oOOO0O0 ] == 'pelis_mas_vistas_mes' :
   OooOoOooo ( [ 'sum(last_month_views) desc' ] , { "sql_cond" : "  active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Ii111 [ oOOO0O0 ] == 'pelis_dibujos_mas_vistas' :
   OooOoOooo ( [ 'sum(views) desc' ] , { "sql_cond" : "  category = 'Dibujos' and active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Ii111 [ oOOO0O0 ] == 'pelis_dibujos_mas_vistas_mes' :
   OooOoOooo ( [ 'sum(last_month_views) desc' ] , { "sql_cond" : " category = 'Dibujos' and active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Ii111 [ oOOO0O0 ] == 'ultimas_series' :
   iI1IiiII1iI ( IIi11Ii1 , 'series' , "and category not in ('Documental', 'Musica', 'Anime')" )
  elif Ii111 [ oOOO0O0 ] == 'ultimas_series_anime' :
   iI1IiiII1iI ( IIi11Ii1 , 'series' , "and category = ('Anime')" )
  elif Ii111 [ oOOO0O0 ] == 'ultimos_documentales' :
   iI1IiiII1iI ( IIi11Ii1 , 'series' , "and category = ('Documental')" )
  elif Ii111 [ oOOO0O0 ] == 'ultimas_musicas' :
   iI1IiiII1iI ( IIi11Ii1 , 'series' , "and category = ('Musica')" )
  elif Ii111 [ oOOO0O0 ] == 'ultimas_pelis' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = ' group_id'
   Ii111 [ 'puntos' ] = 'true'
   Ii111 [ 'anno' ] = 'true'
   oo00Oo0 ( [ 'Pelicula' ] , [ 'updated desc' , 'anno desc' ] , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'serie' :
   iiIiiI ( Ii111 [ 'serie_id' ] )
  elif Ii111 [ oOOO0O0 ] == 'addDownload' :
   OoO0ooOOO ( Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'addfav' :
   iioO0oo00O0O ( Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'addfavs' :
   iioO0oo00O0O ( Ii111 , favoritos = iiIii1IIi1I )
  elif Ii111 [ oOOO0O0 ] == 'addfavp' :
   iioO0oo00O0O ( Ii111 , favoritos = iIIiIiI1I1I )
  elif Ii111 [ oOOO0O0 ] == 'addfavd' :
   iioO0oo00O0O ( Ii111 , favoritos = iiI1IiI1iiII1 )
  elif Ii111 [ oOOO0O0 ] == 'rmfav' :
   OoOOoOO0 ( Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'rmfavp' :
   OoOOoOO0 ( Ii111 , favoritos = iIIiIiI1I1I )
  elif Ii111 [ oOOO0O0 ] == 'rmfavd' :
   OoOOoOO0 ( Ii111 , favoritos = iiI1IiI1iiII1 )
  elif Ii111 [ oOOO0O0 ] == 'rmfavs' :
   OoOOoOO0 ( Ii111 , favoritos = iiIii1IIi1I )
  elif Ii111 [ oOOO0O0 ] == 'listfav' :
   O00000 ( iIiIiiiIi1I1I , fav = i11iii , favLiteral = '' , text = '' )
  elif Ii111 [ oOOO0O0 ] == 'listfavs' :
   O00000 ( iiIii1IIi1I , fav = i11 , favLiteral = 's' , text = 'Series' )
  elif Ii111 [ oOOO0O0 ] == 'listfavp' :
   O00000 ( iIIiIiI1I1I , fav = IiiIi11iIII1 , favLiteral = 'p' , text = 'Pelis' )
  elif Ii111 [ oOOO0O0 ] == 'listfavd' :
   O00000 ( iiI1IiI1iiII1 , fav = ooIIII , favLiteral = 'd' , text = 'Dibujos' )
  elif Ii111 [ oOOO0O0 ] == 'to_unwatch' :
   i1II1 ( Ii111 [ 'idFile' ] , Ii111 [ 'idPath' ] , Ii111 [ 'fileName' ] , False )
  elif Ii111 [ oOOO0O0 ] == 'to_watch' :
   i1II1 ( Ii111 [ 'idFile' ] , Ii111 [ 'idPath' ] , Ii111 [ 'fileName' ] , True )
  elif Ii111 [ oOOO0O0 ] == 'to_saga' :
   O0oo00 ( Ii111 [ 'saga' ] )
  elif Ii111 [ oOOO0O0 ] == 'view_serie' :
   IIi1IiIi1I1 ( Ii111 [ 'serie_id' ] )
  elif Ii111 [ oOOO0O0 ] == 'view_temp' :
   ii11I11I ( Ii111 [ 'serie_id' ] , Ii111 [ 'temp_id' ] )
  elif Ii111 [ oOOO0O0 ] == 'list_temp' :
   iIO0Ooo ( Ii111 [ 'serie_id' ] , Ii111 [ 'temp_id' ] , Ii111 [ 'caratula' ] , Ii111 [ 'poster' ] )
  elif Ii111 [ oOOO0O0 ] == 'play' :
   iIii1 ( Ii111 [ 'lin' ] , Ii111 [ 'tit' ] , Ii111 [ 'id' ] , Ii111 [ 'type' ] , Ii111 )
  elif Ii111 [ 'action' ] == 'anyo' :
   Ii111 [ 'sql_cond' ] = "where active > 0"
   i1IIII ( 'anyo_detail' , Ii111 )
  elif Ii111 [ 'action' ] == 'anyo_detail' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = " group_id"
   Ii111 [ 'puntos' ] = "true"
   Ii1iiI ( Ii111 [ 'anno' ] , [ 'nombre asc' ] , Ii111 )
  elif Ii111 [ 'action' ] == 'ultimas_pelis_anyo' :
   Ii1I1I ( )
  elif Ii111 [ 'action' ] == 'ultimas_pelis_anyo_detail' :
   Ii1iiI ( Ii111 [ 'anno' ] , [ 'updated desc' ] , { "sql_cond" : "  active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Ii111 [ 'action' ] == 'anyo_top' :
   Ii111 [ 'sql_cond' ] = "where active > 0 and puntos > 0"
   i1IIII ( 'anyo_top_detail' , Ii111 )
  elif Ii111 [ 'action' ] == 'anyo_top_detail' :
   Ii111 [ 'sql_cond' ] = "  active > 0 and puntos > 0 "
   Ii111 [ 'sql_group' ] = " group_id"
   Ii111 [ 'puntos' ] = "true"
   Ii111 [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
   Ii1iiI ( Ii111 [ 'anno' ] , [ 'puntos desc' , 'nombre asc' ] , Ii111 )
  elif Ii111 [ 'action' ] == 'sagas' :
   O0oOOo00o ( )
  elif Ii111 [ 'action' ] == 'saga_detail' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = ' group_id'
   Ii111 [ 'anno' ] = 'true'
   Ii111 [ 'puntos' ] = 'true'
   OOO0Oo ( Ii111 [ 'saga' ] , Ii111 )
  elif Ii111 [ 'action' ] == 'list_generos' :
   iiII1i1 ( )
  elif Ii111 [ 'action' ] == 'genero_detail' :
   i11IiIii111i ( Ii111 [ 'genero' ] , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'cine_4k' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = ' group_id'
   Ii111 [ 'puntos' ] = 'true'
   Ii111 [ 'anno' ] = 'true'
   oo00Oo0 ( [ '4K' ] , [ 'updated desc' , 'anno desc' ] , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'cine_3d' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = ' group_id'
   Ii111 [ 'puntos' ] = 'true'
   Ii111 [ 'anno' ] = 'true'
   oo00Oo0 ( [ '3D' ] , [ 'updated desc' , 'anno desc' ] , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'peli_inf' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = ' group_id'
   Ii111 [ 'puntos' ] = 'true'
   Ii111 [ 'anno' ] = 'true'
   oo00Oo0 ( [ 'Dibujos' ] , [ 'updated desc' , 'anno desc' ] , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'peli_anime' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = ' group_id'
   Ii111 [ 'puntos' ] = 'true'
   Ii111 [ 'anno' ] = 'true'
   oo00Oo0 ( [ 'Anime' ] , [ 'updated desc' , 'anno desc' ] , Ii111 )
   if 48 - 48: ii1I1ii1IiIi1 * Ii1I % oo0o . ooOooO0OOO % oo
   if 74 - 74: ii1I1ii1IiIi1 + IiII1IiI - ii1I1ii1IiIi1 - ii1I1ii1IiIi1 / II
   if 74 - 74: OOO + ii1I1ii1IiIi1 * I1 % I1IiI1III11i
   if 19 - 19: o00oO0oo0O0O0
   if 65 - 65: ii1I1ii1IiIi1 - i1iI1 / IiII1i1I % oOO + i1iI1
   if 39 - 39: oooOoO % OOO
  elif Ii111 [ oOOO0O0 ] == 'top_peli_inf' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = ' group_id'
   Ii111 [ 'puntos' ] = 'true'
   Ii111 [ 'anno' ] = 'true'
   oo00Oo0 ( [ 'Dibujos' ] , [ 'puntos desc' , 'nombre asc' ] , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'pelisByAZ' :
   oOOO0o ( Ii111 , 'peli' )
  elif Ii111 [ oOOO0O0 ] == 'last_peli_inf' :
   Ii111 [ 'sql_cond' ] = "  active > 0 "
   Ii111 [ 'sql_group' ] = ' group_id'
   Ii111 [ 'puntos' ] = 'true'
   if 100 - 100: oooOoO
   Ii111 [ 'anno' ] = 'true'
   oo00Oo0 ( [ 'Dibujos' ] , [ 'updated desc' , 'anno desc' ] , Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'series_menu' :
   ii1Iii ( I1I1i1i11I1i ( 'Series' ) )
  elif Ii111 [ oOOO0O0 ] == 'pelis_menu' :
   ii1Iii ( I1I1i1i11I1i ( 'Pelis' ) )
  elif Ii111 [ oOOO0O0 ] == 'dibujos_menu' :
   ii1Iii ( I1I1i1i11I1i ( 'Dibujos' ) )
  elif Ii111 [ oOOO0O0 ] == 'anime_menu' :
   ii1Iii ( I1I1i1i11I1i ( 'Anime' ) )
  elif Ii111 [ oOOO0O0 ] == 'documentales_menu' :
   ii1Iii ( I1I1i1i11I1i ( 'Documental' ) )
  elif Ii111 [ oOOO0O0 ] == 'musica_menu' :
   ii1Iii ( I1I1i1i11I1i ( 'Musica' ) )
  elif Ii111 [ oOOO0O0 ] == 'herramientas_menu' :
   ii1Iii ( I1I1i1i11I1i ( 'Herramientas' ) )
  elif Ii111 [ oOOO0O0 ] == 'validateFolderConfig' :
   oOo ( )
  elif Ii111 [ oOOO0O0 ] == 'clean' :
   oO0oO ( )
  elif Ii111 [ oOOO0O0 ] == 'downloads' :
   Iii1oO00o0000OO0O ( )
  elif Ii111 [ oOOO0O0 ] == 'playLocal' :
   iiIIiiII1 = int ( sys . argv [ 1 ] )
   Oo0Oo0i1I1iiII1111 = xbmcgui . ListItem ( path = base64 . urlsafe_b64decode ( Ii111 [ 'path' ] ) )
   if 69 - 69: OOoOoO0o0o0OO
   xbmcplugin . setResolvedUrl ( iiIIiiII1 , True , Oo0Oo0i1I1iiII1111 )
  elif Ii111 [ oOOO0O0 ] == 'rmDownload' :
   oooo0o ( Ii111 )
  elif Ii111 [ oOOO0O0 ] == 'validateCredentials' :
   i1I ( Ii111 [ 'url' ] )
  elif Ii111 [ oOOO0O0 ] == 'createCopy' :
   O0O000o ( )
  elif Ii111 [ oOOO0O0 ] == 'restoreCopy' :
   oOOoOO ( )
  elif Ii111 [ oOOO0O0 ] == 'openSettings' :
   __settings__ . openSettings ( )
  elif Ii111 [ oOOO0O0 ] == 'install' :
   O0OO000000oO0 ( Ii111 )
  elif Ii111 [ oOOO0O0 ] == IiIIi1I1Ii :
   II1IiiII ( Ii111 )
 else :
  if 49 - 49: II
  I1iII1i1i ( i11i )
  ii1Iii ( I1I1i1i11I1i ( "default" ) )
  if 24 - 24: IiII1IiI % Ii1I % oooOoO + IIoooO0ooO0oo - I1IiI1III11i
  if 36 - 36: iiIIi1i1Iii
if __name__ == '__main__' :
 ooO00o00oOO ( sys . argv [ 2 ] [ 1 : ] )
 if 78 - 78: IIoooO0ooO0oo * I1 * II / iiIIi1i1Iii / I1
 if 84 - 84: Ii1I / Ii1I * IiII1IiI + OOO . Ii1I
 if 65 - 65: i1iI1 * iiIIi1i1Iii
 if 9 - 9: Ii1I
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')