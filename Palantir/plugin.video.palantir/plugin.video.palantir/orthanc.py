import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaW1wb3J0IGJhc2U2NAppbXBvcnQgb3MKaW1wb3J0IHJlCmltcG9ydCBnbG9iCmltcG9ydCBzcWxpdGUzCmltcG9ydCBzeXMKaW1wb3J0IHVuaWNvZGVkYXRhCmltcG9ydCB1cmxwYXJzZQpmcm9tIHVybHBhcnNlIGltcG9ydCBwYXJzZV9xc2wKaWYgOTcgLSA5NzogT09vT29PMG8wbzBPTyArIElJSUkgLiBJaSAlIG9PTwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHhibWMKaW1wb3J0IHhibWNhZGRvbgppbXBvcnQgeGJtY2d1aQppbXBvcnQgeGJtY3BsdWdpbgppbXBvcnQgYW5vcgppbXBvcnQgdHJhY2ViYWNrCmlmIDEgLSAxOiBJSSAtIGlpSUlpMWkxSWlpIC0gSTEgLSBJSW9vb08wb29PMG9vICogT09PCmltcG9ydCBpdGhpbAppZiA1IC0gNTogaTFpSTEgKyBvMDBvTzBvbzBPME8wIC0gaWkxSTFpaTFJaUlpMSAlIG9vb09vTyAtIElpSUkxSWlJCl9fc2V0dGluZ3NfXyA9IHhibWNhZGRvbiAuIEFkZG9uICggaWQgPSAicGx1Z2luLnZpZGVvLnBhbGFudGlyIiApCmlmIDg1IC0gODU6IG9vCmRlZiBPb09vT28gKCB2YWx1ZSApIDoKIGlmIG5vdCB2YWx1ZSBvciB2YWx1ZSA9PSAnbm9uZScgOgogIGlmIDczIC0gNzM6IElpMUkgLyBJMUlpSTFJSUkxMWkgKyBvb09vb08wT09PICUgSWlJSTFpMUkgLyBvbzBvICUgSWlJSTFpMUkKICByZXR1cm4gJ2dvbGQnCiBlbHNlIDoKICBpZiA2NyAtIDY3OiBpMWlJMSArIGkxaUkxICUgb28wbyAqIGlpMUkxaWkxSWlJaTEKICB0cnkgOgogICByZXR1cm4gdmFsdWUgLiBzcGxpdCAoICddJyApIFsgMSBdIC4gc3BsaXQgKCAnWycgKSBbIDAgXQogIGV4Y2VwdCA6CiAgIGlmIDg1IC0gODU6IElJb29vTzBvb08wb28gLiBJaUlJMWkxSQogICByZXR1cm4gdmFsdWUKICAgaWYgOCAtIDg6IG9PTyAqIElpCiAgIGlmIDI2IC0gMjY6IG8wMG9PMG9vME8wTzAgLSBJSW9vb08wb29PMG9vCnRyeSA6CiBPME8wMDAwMDBPbyA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdNYWluVmlldycgKSApCiBJMUlJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ0Rvd25WaWV3JyApICkKIEkxaUkxaWlpSWlJMSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdGYXZWaWV3JyApICkKIE9PME8wID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ1BlbGlzVmlldycgKSApCiBpaTFpMWlpMUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnRXBpc29kZXNWaWV3JyApICkKIG8wbzAwMDBPMCA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdMaXN0VmlldycgKSApCiBvTzBPMG8wb29PID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ1Nlcmllc1ZpZXcnICkgKQogaTFJaUkxaWlpID0gT29Pb09vICggeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ01lbnVDb2xvcicgKSApICkKIGlpaTFJSSA9IE9vT29PbyAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdUYWdDb2xvcicgKSApICkKIEkxMTFpMTFJMUkgPSBPb09vT28gKCB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnU2VydmVyQ29sb3InICkgKSApCiBpMTFpaSA9IE9vT29PbyAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdBbHRDb2xvcicgKSApICkKIG8wTzBvTzAgPSBPb09vT28gKCB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnQXVkaW9Db2xvcicgKSApICkKIElJSWkxMTExaUkgPSBPb09vT28gKCB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnQ2F0ZWdvcnlDb2xvcicgKSApICkKIGlpSUlpaWlJMTEgPSBPb09vT28gKCB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnRGF0ZUNvbG9yJyApICkgKQogTzAwTzAwMCA9IE9vT29PbyAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdDYXBpQ29sb3InICkgKSApCiBPME9PTyA9IE9vT29PbyAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdQZWxpQ29sb3InICkgKSApCiBpZiA0IC0gNDogb29Pb29PME9PTwogaWYgbm90IG8wbzAwMDBPMCBvciBvMG8wMDAwTzAgPT0gJ25vbmUnIDoKICBvMG8wMDAwTzAgPSAnNTAyJwogaWYgbm90IG9PME8wbzBvb08gb3Igb08wTzBvMG9vTyA9PSAnbm9uZScgOgogIG9PME8wbzBvb08gPSAnNTE1JwogaWYgbm90IE8wTzAwMDAwME9vIG9yIE8wTzAwMDAwME9vID09ICdub25lJyA6CiAgTzBPMDAwMDAwT28gPSAnNTAwJwogaWYgbm90IEkxSUkgb3IgSTFJSSA9PSAnbm9uZScgOgogIEkxSUkgPSAnNTAwJwogaWYgbm90IEkxaUkxaWlpSWlJMSBvciBJMWlJMWlpaUlpSTEgPT0gJ25vbmUnIDoKICBJMWlJMWlpaUlpSTEgPSAnNTAwJwogaWYgbm90IE9PME8wIG9yIE9PME8wID09ICdub25lJyA6CiAgT08wTzAgPSAnNTAyJwogaWYgbm90IGlpMWkxaWkxSSBvciBpaTFpMWlpMUkgPT0gJ25vbmUnIDoKICBpaTFpMWlpMUkgPSAnNTAyJwpleGNlcHQgOgogeGJtYyAuIGxvZyAoICdFUlJPUiBQcm9jZXNpbmcgaW5pdGlhbCBjb25maWd1cmF0aW9uJyApCiB0cmFjZWJhY2sgLiBwcmludF9leGMgKCBmaWxlID0gc3lzIC4gc3Rkb3V0ICkKIGlmIDUzIC0gNTM6IG9vT29vTzBPT08KIGlmIDg1IC0gODU6IG9vT29vTzBPT08gKyBJSUlJCiBpZiAzMiAtIDMyOiBJaUlJMWkxSSAtIGlpSUlpMWkxSWlpICogSUkgKyBPT08gLSBpaUlJaTFpMUlpaQp0cnkgOgogaW1wb3J0IGpzb24KZXhjZXB0IDoKIGltcG9ydCBzaW1wbGVqc29uIGFzIGpzb24KIGlmIDI4IC0gMjg6IElJSUkKZGVmIE9vb29PME8gKCBzICkgOgogaWYgOTUgLSA5NTogSWlJSTFJaUkgJSBJMUlpSTFJSUkxMWkKIHJldHVybiAnJyAuIGpvaW4gKCAoIGMgZm9yIGMgaW4gdW5pY29kZWRhdGEgLiBub3JtYWxpemUgKCAnTkZEJyAsIHMgKSBpZiB1bmljb2RlZGF0YSAuIGNhdGVnb3J5ICggYyApICE9ICdNbicgKSApCiBpZiAzOSAtIDM5OiBJSW9vb08wb29PMG9vCiBpZiA0MCAtIDQwOiBpaTFJMWlpMUlpSWkxICogb28gLyBJMQpkZWYgSTFpSUkxaTFpICggYmFzICkgOgogaXRoaWwgLiBvbzAwb09vbyAoIGJhcyApCiBpZiA0MSAtIDQxOiBpMWlJMSAtIE9PTyAlIG9vT29vTzBPT08gLSBJSW9vb08wb29PMG9vICsgb29Pb29PME9PTwogaWYgMzMgLSAzMzogb28gKyBvT08gLyBvb09vb08wT09PICsgSWkgKyBpaTFJMWlpMUlpSWkxIC4gaWkxSTFpaTFJaUlpMQpkZWYgSUlJMTFJaSAoICkgOgogaW1wb3J0IHhibWMKIG9PMCA9IHhibWMgLiBLZXlib2FyZCAoICIiICkKIG9PMCAuIGRvTW9kYWwgKCApCiBpMUlpSTExaTFJaWkgPSAnJwogaWYgKCBvTzAgLiBpc0NvbmZpcm1lZCAoICkgKSA6CiAgaTFJaUkxMWkxSWlpID0gb08wIC4gZ2V0VGV4dCAoICkKIHJldHVybiBpMUlpSTExaTFJaWkKIGlmIDcxIC0gNzE6IE9Pb09vTzBvMG8wT08gKiBvT08gKiBJaQogaWYgOTIgLSA5MjogbzAwb08wb28wTzBPMCAuIG9vMG8gKiBPT08gKiBJaSAvIG9vCiBpZiAxMDAgLSAxMDA6IEkxICogT09vT29PMG8wbzBPTwpvb29PT08gPSAndXRmLTgnCmlpID0gJy50bXAnCm9PT08wTzAgPSAnYWN0aW9uJwpPT08wME9vbzAgPSB4Ym1jYWRkb24gLiBBZGRvbiAoICkKSWlJaSA9IE9PTzAwT29vMCAuIGdldEFkZG9uSW5mbyAoICd2ZXJzaW9uJyApCkkxaTExaUlpMTFJaTFJMSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggT09PMDBPb28wIC4gZ2V0QWRkb25JbmZvICggJ3BhdGgnICkgLiBkZWNvZGUgKCBvb29PT08gKSApCm9Pb08gPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIE9PTzAwT29vMCAuIGdldEFkZG9uSW5mbyAoICdwcm9maWxlJyApIC4gZGVjb2RlICggb29vT09PICkgKQppaWkxMWkxSUlpID0gb3MgLiBwYXRoIC4gam9pbiAoIEkxaTExaUlpMTFJaTFJMSAsICJyZXNvdXJjZXMvbWVkaWEvIiApCmlmIDQgLSA0OiBvbzBvICUgSWlJSTFJaUkKaTExaSA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ0pYTXZiVzl5YVdFbGN3PT0nICkgJSAoIG9Pb08gLCBpaSApCmlJaUlpaWlJaTFJMUkgPSAnJXMvYnJlZS5mYXYnICUgeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ2ZhdlBhdGgnICkgKQppaUkxSWlJMWlpSUkxID0gJyVzL2JyZWUuZmF2ZCcgJSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnZmF2UGF0aCcgKSApCmlJSWlJaUkxSTFJID0gJyVzL2JyZWUuZmF2cCcgJSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnZmF2UGF0aCcgKSApCmlpSWlpMUlJaTFJID0gJyVzL2JyZWUuZmF2cycgJSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnZmF2UGF0aCcgKSApCmlJaWlJaTFpMWkxaTEgPSAnJXMvYnJlZS5kd24nICUgeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ2ZhdlBhdGgnICkgKQpJSWkxMUlpMSA9IFsgInNlcmllX2lkIiAsICJub21icmUiICwgImxpbmsiICwgIm5vbWJyZSIgLCAiYW5ubyIgLCAic2lub3BzaXMiICwgImNhcmF0dWxhIiAsICJwb3N0ZXIiICwgImhhc19jb250ZW50IiAsICJhdWRpbyIgLAogImNhdGVnb3J5IiAsICJkYXRlKHVwZGF0ZWQpIiAsICJ0bWRiIiBdCk8wT28wb09PID0gWyAicGVsaV9pZCIgLCAibm9tYnJlIiAsICJsaW5rIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsICJjYXJhdHVsYSIgLCAicG9zdGVyIiAsICInTiciICwgImF1ZGlvIiAsICJjYXRlZ29yeSIgLAogImRhdGUodXBkYXRlZCkiICwgImFjdGl2ZSIgXQppaUkxMTExSUlpaUkgPSBbICJwZWxpX2lkIiAsICJhdWRpbyIgLCAiJyciICwgInRhZ3MiICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwKICJzaW5vcHNpcyIgLAogImNhcmF0dWxhIiAsICJwb3N0ZXIiICwgInVwZGF0ZWQiICwgInB1bnRvcyIgLCAiY2F0ZWdvcnkiICwgImFjdGl2ZSIgLCAidG1kYiIgLAogImdyb3VwX2lkIiAsICJjb3VudCgqKSIgLCAiZ3JvdXBfY29uY2F0KHRhZ3MsJyMnKSIgLCAiZ3JvdXBfY29uY2F0KGF1ZGlvLCcjJykiCiBdCm9vbzBvb09vTzBPbyA9IDIwMApJSUlpMTEgPSAiLCBDQVNFIFdoZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDE5MiBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDE5OCBUaGVuICdBJ1doZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIwNCBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIwNyBUaGVuICdJJ1doZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIwMCBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIwMyBUaGVuICdFJ1doZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIxNyBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIyMCBUaGVuICdVJ1doZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIxMCBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIxNCBUaGVuICdPJyBXSEVOIHVuaWNvZGUodXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpKSA+PSA2NSBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDkwIFRIRU4gdXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpIEVMU0UgJyEwLTkuLicgIEVORCBhbGZhICIKSWlpMSA9ICdzZXJpZXMnCklpSUlpMUkxSWkgPSAncGVsaXNHcm91cCcKaWYgOTcgLSA5NzogSUlJSSAuIElpMUkgKiBvbwppZiBub3Qgb3MgLiBwYXRoIC4gZXhpc3RzICggb09vTyApIDoKIHRyeSA6CiAgb3MgLiBtYWtlZGlycyAoIG9Pb08gKQogZXhjZXB0IDoKICBwYXNzCkkxaUkxMUkgPSBzeXMgLiBhcmd2IFsgMCBdCmlpSUlpaUlJMSA9IGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKQp0cnkgOgogaWYgNjYgLSA2NjogaTFpSTEgJSBJMSAqIEkxCiBPT28wb28gPSBhbm9yIC4gSTFpMUkxaUkxMUkgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoCiAnYzJWc1pXTjBJR2xrVUdGMGFDQm1jbTl0SUhCaGRHZ2dkMmhsY21VZ2MzUnlVR0YwYUQwaWNHeDFaMmx1T2k4dmNHeDFaMmx1TG5acFpHVnZMbkJoYkdGdWRHbHlMeUk9JyApICkgWyAxIF0gWyAwIF0gWyAwIF0KZXhjZXB0IDoKIE9PbzBvbyA9IDAKIGlmIDYgLSA2OiBJaUlJMWkxSSAvIG9PTyAvIElpMUkKIGlmIDEwIC0gMTA6IG9vb09vTyArIG9vICogb28KZGVmIG9vbzAgKCBwYXRoICwgdHlwZSA9ICdyJyApIDoKIG9PT29PMDBvTzAgPSBvcGVuICggc3RyICggcGF0aCApICwgdHlwZSApCiBPME9PbzBvbzAwTzBPID0gb09Pb08wMG9PMCAuIHJlYWQgKCApCiBvT09vTzAwb08wIC4gY2xvc2UgKCApCiByZXR1cm4gTzBPT28wb28wME8wTwogaWYgNzkgLSA3OTogSWkxSSArIE9PTyArIElpSUkxSWlJIC0gSUkgLiBpaTFJMWlpMUlpSWkxIC8gSUkKIGlmIDIzIC0gMjM6IG8wMG9PMG9vME8wTzAgLSBpaTFJMWlpMUlpSWkxIC4gSWkxSSArIG9vb09vTwppZiBvcyAuIHBhdGggLiBleGlzdHMgKCBpSWlJaWlpSWkxSTFJICkgPT0gVHJ1ZSA6CiBpMTFpaWkgPSBqc29uIC4gbG9hZHMgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIG9vbzAgKCBpSWlJaWlpSWkxSTFJICkgKSApCmVsc2UgOgogaTExaWlpID0geyB9CiBpZiA3OCAtIDc4OiBJMUlpSTFJSUkxMWkgKyBPT08gLSBvT08KaWYgb3MgLiBwYXRoIC4gZXhpc3RzICggaUlJaUlpSTFJMUkgKSA9PSBUcnVlIDoKIElpaUlpMTFpSUlJMSA9IGpzb24gLiBsb2FkcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb29vMCAoIGlJSWlJaUkxSTFJICkgKSApCmVsc2UgOgogSWlpSWkxMWlJSUkxID0geyB9CiBpZiA0MiAtIDQyOiBJaTFJICogb29vT29PIC4gSWlJSTFJaUkgKyBJSUlJICogT09vT29PMG8wbzBPTwppZiBvcyAuIHBhdGggLiBleGlzdHMgKCBpaUkxSWlJMWlpSUkxICkgPT0gVHJ1ZSA6CiBvb0lJSUkgPSBqc29uIC4gbG9hZHMgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIG9vbzAgKCBpaUkxSWlJMWlpSUkxICkgKSApCmVsc2UgOgogb29JSUlJID0geyB9CiBpZiA1NiAtIDU2OiBJaUlJMWkxSSAlIElpSUkxSWlJIC4gSUkgLyBPT08KaWYgb3MgLiBwYXRoIC4gZXhpc3RzICggaWlJaWkxSUlpMUkgKSA9PSBUcnVlIDoKIGkxMSA9IGpzb24gLiBsb2FkcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb29vMCAoIGlpSWlpMUlJaTFJICkgKSApCmVsc2UgOgogaTExID0geyB9CiBpZiA4IC0gODogSWlJSTFJaUkgKyBJaTFJICogb09PIC0gSWlJSTFpMUkgLSBpaUlJaTFpMUlpaQogaWYgMTQgLSAxNDogb28gLyBJaTFJIC8gSWlJSTFpMUkgLyBJSSAvIG9PTyAvIG8wMG9PMG9vME8wTzAKZGVmIE8wMDAwMDBPME9vT28gKCBub21icmUgLCBjYXJhdHVsYSA9IE5vbmUgLCBwb3N0ZXIgPSBOb25lICwgdmlkZW8gPSB7IH0gLCBpc1BsYXlhYmxlID0gRmFsc2UgKSA6CiBPb09PME9PMG8wTyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gbm9tYnJlICwgaWNvbkltYWdlID0gY2FyYXR1bGEgKQogaWYgY2FyYXR1bGEgYW5kIHBvc3RlciA6CiAgT29PTzBPTzBvME8gLiBzZXRBcnQgKCBJSWlpSUkxMTFpICggY2FyYXR1bGEgLCBwb3N0ZXIgKSApCiBpZiBsZW4gKCB2aWRlbyApID4gMCA6CiAgT29PTzBPTzBvME8gLiBzZXRJbmZvICggJ3ZpZGVvJyAsIHZpZGVvICkKIGlmIGlzUGxheWFibGUgOgogIE9vT08wT08wbzBPIC4gc2V0UHJvcGVydHkgKCAnSXNQbGF5YWJsZScgLCAndHJ1ZScgKQogcmV0dXJuIE9vT08wT08wbzBPCiBpZiAxMSAtIDExOiBJaUlJMWkxSQpkZWYgSUkxSWkxMWkxSWkxSSAoIHNhZ2FOYW1lICkgOgogSWkxMWkxaUlpSUkxMSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdmYXZTYWdhJyApICkKIGlmIDYyIC0gNjI6IGlpSUlpMWkxSWlpIC8gaTFpSTEgJSBJSUlJCiBPbzAwbzBPMG9PbzAgPSBbIF0KIGlmIElpMTFpMWlJaUlJMTEgPT0gJycgb3IgSWkxMWkxaUlpSUkxMSA9PSAnZmFsc2UnIDoKICBPbzAwbzBPMG9PbzAgPSBbICggJ0HDsWFkaXIgYWwgTWVudScgLCAnWEJNQy5SdW5QbHVnaW4oJXM/YWN0aW9uPXRvX3NhZ2Emc2FnYT0lcyknICUgKAogSTFpSTExSSAsIHNhZ2FOYW1lICkgKSBdCiBlbGlmIHNhZ2FOYW1lID09IElpMTFpMWlJaUlJMTEgOgogIE9vMDBvME8wb09vMCA9IFsgKCAnRWxpbWluYXIgZGVsIE1lbnUnICwgJ1hCTUMuUnVuUGx1Z2luKCVzP2FjdGlvbj10b19zYWdhJnNhZ2E9ZmFsc2UpJyAlICgKIEkxaUkxMUkgKSApIF0KIHJldHVybiBPbzAwbzBPMG9PbzAKIGlmIDEwMCAtIDEwMDogSUkgKiBPT29Pb08wbzBvME9PICsgT09PICogaWkxSTFpaTFJaUlpMSAqIE9PTwpkZWYgTzBvbzAwICggc2FnYU5hbWUgKSA6CiBpZiA4MCAtIDgwOiBJaUlJMUlpSSAqIGlpSUlpMWkxSWlpIC8gb09PIC8gSTFJaUkxSUlJMTFpIC8gT09PICsgbzAwb08wb28wTzBPMAogaWYgc2FnYU5hbWUgOgogIF9fc2V0dGluZ3NfXyAuIHNldFNldHRpbmcgKCAnZmF2U2FnYScgLCBzYWdhTmFtZSApCiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIlhCTUMuQ29udGFpbmVyLlJlZnJlc2giICkKICBpZiA4MSAtIDgxOiBJSSAtIGlpMUkxaWkxSWlJaTEgLyBJaTFJICsgb29vT29PCiAgaWYgNTEgLSA1MTogSWlJSTFJaUkgKyBJSSArIG9vMG8gLiBJSQogIGlmIDg2IC0gODY6IE9PTyAvIElpSUkxSWlJICogSWlJSTFJaUkgKiBvMDBvTzBvbzBPME8wCiAgaWYgOTAgLSA5MDogSTEgLSBvbzBvICUgT09vT29PMG8wbzBPTyAtIE9PTyAuIGkxaUkxIC8gSUlJSQpkZWYgSWlvb28gKCBpZEZpbGUgLCBpZFBhdGggLCBmaWxlTmFtZSAsIHRvX3dhdGNoICkgOgogaWYgdG9fd2F0Y2ggOgogIE9vMDBvME8wb09vMCA9ICggJ01hcmNhciBjb21vIHZpc3RvJyAsICdYQk1DLlJ1blBsdWdpbiglcz9hY3Rpb249dG9fd2F0Y2gmaWRGaWxlPSVzJmlkUGF0aD0lcyZmaWxlTmFtZT0lcyknICUgKAogSTFpSTExSSAsIGlkRmlsZSAsIGlkUGF0aCAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggZmlsZU5hbWUgKSApICkKIGVsc2UgOgogIGlmIDEwIC0gMTA6IElJSUkKICBPbzAwbzBPMG9PbzAgPSAoICdNYXJjYXIgY29tbyBubyB2aXN0bycgLAogJ1hCTUMuUnVuUGx1Z2luKCVzP2FjdGlvbj10b191bndhdGNoJmlkRmlsZT0lcyZpZFBhdGg9JXMmZmlsZU5hbWU9JXMpJyAlICgKIEkxaUkxMUkgLCBpZEZpbGUgLCBpZFBhdGggLCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGZpbGVOYW1lICkgKSApCiByZXR1cm4gT28wMG8wTzBvT28wCiBpZiA3MiAtIDcyOiBvT08gLSBPT08gLiBvb29Pb08KIGlmIDYwIC0gNjA6IG9vb09vTyAvIGlpMUkxaWkxSWlJaTEgKiBvb29Pb08KZGVmIGkxSUkxICggaWRGaWxlICwgaWRQYXRoICwgZmlsZU5hbWUgLCB0b193YXRjaCApIDoKIGZpbGVOYW1lID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBmaWxlTmFtZSApCiBpZiB0b193YXRjaCA6CiAgaWlJaUlpaWlJID0gMQogZWxzZSA6CiAgaWlJaUlpaWlJID0gMAogaWYgaW50ICggaWRGaWxlICkgPiAwIDoKICBJMUkgPSAidXBkYXRlIGZpbGVzIHNldCBwbGF5Q291bnQ9JXMgd2hlcmUgaWRGaWxlPSVzIEFORCBpZFBhdGg9JXMgQU5EIHN0ckZpbGVuYW1lPSclcyciICUgKAogaWlJaUlpaWlJICwgaWRGaWxlICwgaWRQYXRoICwgZmlsZU5hbWUgKQogZWxzZSA6CiAgSTFJID0gImluc2VydCBpbnRvIGZpbGVzIChpZEZpbGUsIGlkUGF0aCwgc3RyRmlsZW5hbWUsIHBsYXlDb3VudCwgbGFzdFBsYXllZCkgVkFMVUVTICglcywgJXMsICclcycsICVzLCAlcykiICUgKAogJyhzZWxlY3QgbWF4IChpZEZpbGUpICsxIGZyb20gZmlsZXMpJyAsIGlkUGF0aCAsIGZpbGVOYW1lICwgaWlJaUlpaWlJICwgImRhdGV0aW1lKCdub3cnKSIgKQogYW5vciAuIEkxaTFJMWlJMTFJICggSTFJICkKIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICJYQk1DLkNvbnRhaW5lci5SZWZyZXNoIiApCiBpZiA3OSAtIDc5OiBJSQogaWYgMTggLSAxODogSUkgKyBJMSAlIGlpSUlpMWkxSWlpIC0gSWkgKiBJSUlJIC4gSWlJSTFpMUkKZGVmIE8wTzAwMG8gKCApIDoKIGlJSWlJSUkxaSA9IFsgJyVzL2JyZWUuZmF2JyAlIG9Pb08gLCAnJXMvYnJlZS5mYXZkJyAlIG9Pb08gLCAnJXMvYnJlZS5mYXZwJyAlIG9Pb08gLCAnJXMvYnJlZS5mYXZzJyAlIG9Pb08gLCAnJXMvYnJlZS5kd24nICUgb09vTyAsICclcy9zZXR0aW5ncy54bWwnICUgb09vTyBdCiBpZiA5IC0gOTogaTFpSTEgLiBpMWlJMQogaWYgMSAtIDE6IGlpSUlpMWkxSWlpIC4gb29Pb29PME9PTyAvIG9vT29vTzBPT08KIGlmIDgyIC0gODI6IElpSUkxSWlJIC4gSUkgLiBJaUlJMWkxSSAtIEkxSWlJMUlJSTExaQogSUlJSUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnY29weVBhdGgnICkgKQogaW1wb3J0IHppcGZpbGUKIGltcG9ydCB0aW1lCiBpZiBJSUlJSSA6CiAgSUlJSUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIElJSUlJICkKICBpZiAzOSAtIDM5OiBvT08gKiBJSUlJICUgSWkxSSAtIG9vMG8gLyBPT29Pb08wbzBvME9PCiAgT09vMG8gPSAiJXMvUGFsYW50aXJfQmFja3VwXyVzLnppcCIgJSAoIElJSUlJICwgdGltZSAuIHN0cmZ0aW1lICggIiVkLSVtLSVZXyVIJU0lUyIgKSApCiAgT29PME8gPSB6aXBmaWxlIC4gWmlwRmlsZSAoIE9PbzBvICwgInciICkKICBmb3IgT29Pb09PbzBPTzAgaW4gaUlJaUlJSTFpIDoKICAgaWYgb3MgLiBwYXRoIC4gZXhpc3RzICggT29Pb09PbzBPTzAgKSA6CiAgICBvb28wMG8wTzBvMG8gPSBPb09vT09vME9PMCAuIHNwbGl0ICggJy8nICkKICAgIE9vTzBPIC4gd3JpdGUgKCBPb09vT09vME9PMCAsIG9vbzAwbzBPMG8wbyBbIGxlbiAoIG9vbzAwbzBPMG8wbyApIC0gMSBdICwgY29tcHJlc3NfdHlwZSA9IHppcGZpbGUgLiBaSVBfREVGTEFURUQgKQogIE9vTzBPIC4gY2xvc2UgKCApCiAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgJ0NvcGlhIFJlYWxpemFkYSBlbiA6ICVzJyAlIE9PbzBvICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgMTAwMDAgKQogZWxzZSA6CiAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgJ0VzdGFibGV6Y2EgbGEgcnV0YSBwYXJhIGxhIGNvcGlhJyAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDcwMDAgKQogIGlmIDQyIC0gNDI6IGkxaUkxIC8gaTFpSTEgKyBvb29Pb08gLyBvMDBvTzBvbzBPME8wCiAgaWYgOTAgLSA5MDogb28wbyAqIG9vMG8gJSBpaTFJMWlpMUlpSWkxCiAgaWYgODYgLSA4NjogT09vT29PMG8wbzBPTyAuIElpSUkxSWlJIC0gT09PIC0gSUlJSQpkZWYgb09Pb09PICggKSA6CiBpSUkxaUlJaUlpMTFJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ2NvcHlQYXRoJyApICkKIElpSTFpSSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiB0cnkgOgogIElJSUlJID0gSWlJMWlJIC4gYnJvd3NlICggdHlwZSA9IDEgLCBoZWFkaW5nID0gX19zZXR0aW5nc19fIC4gZ2V0TG9jYWxpemVkU3RyaW5nICggMzQwMDMgKSAsCiBzaGFyZXMgPSAnZmlsZXMnICwgbWFzayA9ICcuemlwJyAsIHVzZVRodW1icyA9IEZhbHNlICwgdHJlYXRBc0ZvbGRlciA9IEZhbHNlICwgZGVmYXVsdHQgPSBpSUkxaUlJaUlpMTFJICwKIGVuYWJsZU11bHRpcGxlID0gRmFsc2UgKQogZXhjZXB0IFR5cGVFcnJvciA6CiAgSUlJSUkgPSBJaUkxaUkgLiBicm93c2UgKCB0eXBlID0gMSAsIGhlYWRpbmcgPSBfX3NldHRpbmdzX18gLiBnZXRMb2NhbGl6ZWRTdHJpbmcgKCAzNDAwMyApICwKIHNfc2hhcmVzID0gJ2ZpbGVzJyAsIG1hc2sgPSAnLnppcCcgLCB1c2VUaHVtYnMgPSBGYWxzZSAsIHRyZWF0QXNGb2xkZXIgPSBGYWxzZSAsCiBkZWZhdWx0dCA9IGlJSTFpSUlpSWkxMUkgLAogZW5hYmxlTXVsdGlwbGUgPSBGYWxzZSApCiBpZiAnUGFsYW50aXJfQmFja3VwXycgaW4gSUlJSUkgOgogIGltcG9ydCB6aXBmaWxlCiAgaUkgPSB6aXBmaWxlIC4gWmlwRmlsZSAoIElJSUlJICwgJ3InICkKICBpSSAuIGV4dHJhY3RhbGwgKCBvT29PICkKICBpSSAuIGNsb3NlICggKQogIHhibWNndWkgLiBEaWFsb2cgKCApIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsICdDb3BpYSBSZXN0YXVyYWRhIDogJXMnICUgSUlJSUkgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA3MDAwICkKIGVsaWYgSUlJSUkgLiBlbmRzd2l0aCAoICcuemlwJyApIDoKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCAnRWwgZmljaGVybyBkZWJlIHNlciBQYWxhbnRpcl9CYWNrdXBfLi4uIEludmFsaWRvICVzJyAlIElJSUlJICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9XQVJOSU5HICwgNzAwMCApCiAgaWYgNCAtIDQ6IElpSUkxaTFJIC8gT09vT29PMG8wbzBPTyAtIElpMUkgLSBJMUlpSTFJSUkxMWkKICBpZiAyMiAtIDIyOiBvbzBvICogb09PIC4gSWkxSSAtIGkxaUkxIC0gSWkgLSBvMDBvTzBvbzBPME8wCiAgaWYgMjMgLSAyMzogaWkxSTFpaTFJaUlpMSArIG9vT29vTzBPT08gKyBPT29Pb08wbzBvME9PCiAgaWYgNjMgLSA2MzogSWkxSSAtIElpMUkgKiBpMWlJMSAuIElpIC0gbzAwb08wb28wTzBPMAogIGlmIDIgLSAyOiBvb29Pb08gKyBpaTFJMWlpMUlpSWkxIC4gSWlJSTFJaUkgJSBpMWlJMQpkZWYgSWlJSWlJICggaWQgLCB0eXBlICwgbm9tYnJlICwgdXJsICwgY2FyYXR1bGEgLCBwb3N0ZXIgLCByZW1vdmUgKSA6CiB0cnkgOgogIG5vbWJyZSA9IG5vbWJyZSAuIGVuY29kZSAoICd1dGYtOCcgLCAnaWdub3JlJyApCiBleGNlcHQgKCBVbmljb2RlRW5jb2RlRXJyb3IgLCBVbmljb2RlRGVjb2RlRXJyb3IgKSA6CiAgcGFzcwogIGlmIDcyIC0gNzI6IElJb29vTzBvb08wb28KIGlmIG5vdCBjYXJhdHVsYSA6CiAgY2FyYXR1bGEgPSAnTm9uZScKIGlmIG5vdCBwb3N0ZXIgOgogIHBvc3RlciA9ICdOb25lJwogaWYgbm90IHJlbW92ZSA6CiAgT28wMG8wTzBvT28wID0gKCAnRGVzY2FyZ2EgZW4gUGFsYW50aXInICwKICdYQk1DLlJ1blBsdWdpbiglcz9hY3Rpb249YWRkRG93bmxvYWQmaWQ9JXMmbm9tYnJlPSVzJnVybD0lcyZjYXJhdHVsYT0lcyZwb3N0ZXI9JXMmdHlwZT0lcyknICUgKAogSTFpSTExSSAsIGlkICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBub21icmUgKSAsIHVybCAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggY2FyYXR1bGEgKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggcG9zdGVyICkgLCB0eXBlICkgKQogZWxzZSA6CiAgT28wMG8wTzBvT28wID0gKCAnQm9ycmFyIGRlc2NhcmdhJyAsCiAnWEJNQy5SdW5QbHVnaW4oJXM/YWN0aW9uPXJtRG93bmxvYWQmaWQ9JXMmbm9tYnJlPSVzJmNhcmF0dWxhPSVzJnBvc3Rlcj0lcyZ0eXBlPSVzKScgJSAoCiBJMWlJMTFJICwgaWQgLCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIG5vbWJyZSApICwKIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggY2FyYXR1bGEgKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggcG9zdGVyICkgLCB0eXBlICkgKQogIGlmIDY0IC0gNjQ6IE9Pb09vTzBvMG8wT08gLiBJSSAlIElJSUkKIHJldHVybiBPbzAwbzBPMG9PbzAKIGlmIDE2IC0gMTY6IElpSUkxSWlJICogSTEgKiBJMQpkZWYgb29vbzBvICggb3B0aW9ucyApIDoKIGlmIDY2IC0gNjY6IEkxIC8gb29vT29PCiB0cnkgOgogIGkxSUkxMUlJMTFJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ0Rvd25sb2FkUGF0aCcgKSApCiAgT09PMDBvTzAwT29PMCA9IGpzb24gLiBsb2FkcyAoIG9vbzAgKCBpSWlpSWkxaTFpMWkxICkgKQogIGlmIDIzIC0gMjM6IElpMUkgJSBJSSAvIG9vb09vTwogIGlmIDgyIC0gODI6IGlpMUkxaWkxSWlJaTEgJSBJSW9vb08wb29PMG9vCiAgaWYgMTEgLSAxMTogT09PIC8gaTFpSTEgLSBvb09vb08wT09PIC8gb29vT29PCiAgaWYgOTAgLSA5MDogb28gKiBJSUlJICsgT09PICUgSUlJSSAtIG9PTwogIGlmIDcwIC0gNzA6IElJSUkgKyBpaTFJMWlpMUlpSWkxICogSWlJSTFpMUkgJSBvb09vb08wT09PICsgT09vT29PMG8wbzBPTyAtIEkxCiAgb3MgLiByZW1vdmUgKCAnJXMlcycgJSAoIGkxSUkxMUlJMTFJICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBvcHRpb25zIFsgJ25vbWJyZScgXSApICkgKQogIE9PTzAwb08wME9vTzAgLiBwb3AgKCBvcHRpb25zIFsgJ25vbWJyZScgXSAsIE5vbmUgKQogIE9vMCA9IG9wZW4gKCBpSWlpSWkxaTFpMWkxICwgInciICkKICBPbzAgLiB3cml0ZSAoIGpzb24gLiBkdW1wcyAoIE9PTzAwb08wME9vTzAgKSApCiAgaWYgNjIgLSA2Mjogb28wbyAlIG9vT29vTzBPT08gLSBpMWlJMSAvIGkxaUkxIC4gaWlJSWkxaTFJaWkKICBPbzAgLiBjbG9zZSAoICkKICB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAiWEJNQy5Db250YWluZXIuUmVmcmVzaCIgKQogZXhjZXB0IDoKICB0cmFjZWJhY2sgLiBwcmludF9leGMgKCBmaWxlID0gc3lzIC4gc3Rkb3V0ICkKICB4Ym1jIC4gbG9nICggJ1thZGRvbi5QYWxhbnRpcl0gRXJyb3IgT3BzICVzJyAlIG9wdGlvbnMgKQogIHJldHVybgogIGlmIDgwIC0gODA6IE9Pb09vTzBvMG8wT08gLyBJSUlJICogSWkxSSAlIG9vb09vTyAuIG8wMG9PMG9vME8wTzAKZGVmIE9Pb08wb28wb28wMCAoIGRvd25sb2FkX2ZpbGUgKSA6CiBvMDBPMG8wMG8gPSBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ01heE51bURvd25sb2FkcycgKQogaTEgPSBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ01heFNpemVEb3dubG9hZHMnICkKIGlmIDI5IC0gMjk6IElJICogSWkgKyBJSSAuIG9vICogSWlJSTFpMUkKIGlmIDk4IC0gOTg6IG9vT29vTzBPT08gJSBJSSAvIG9vIC8gSWlJSTFpMUkKIGlmIDU3IC0gNTc6IElJSUkgLiBJSQogaWYgNTMgLSA1MzogSUlJSSArIG9vICogaTFpSTEgLiBvT08gLSBJaUlJMUlpSSAuIElJSUkKIE9vMDBvMDAwTyA9IHNldCAoICkKIGkxSUkxMUlJMTFJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ0Rvd25sb2FkUGF0aCcgKSApCiBmb3IgT28wT28wIGluIGRvd25sb2FkX2ZpbGUgLiBrZXlzICggKSA6CiAgT28wMG8wMDBPIC4gYWRkICggT28wT28wICkKICBpZiA0MiAtIDQyOiBpaUlJaTFpMUlpaSAlIG8wMG9PMG9vME8wTzAgLSBPT29Pb08wbzBvME9PCiBpaWkgPSBzZXQgKCApCiBpZiAzNiAtIDM2OiBvb29Pb08KIE9PT28wMG9vbzBPbyA9IG9PbyAoIGNvbmZpcm1hdGlvbk1lc3NhZ2UgPSBGYWxzZSApCiBpZiAxNiAtIDE2OiBJSSAuIEkxSWlJMUlJSTExaQogT08gPSAwCiBpZiBPT09vMDBvb28wT28gOgogIGZvciBpaWlJaUlpMUkgaW4gb3MgLiBsaXN0ZGlyICggaTFJSTExSUkxMUkgKSA6CiAgIGlpaSAuIGFkZCAoIG9zIC4gcGF0aCAuIHNwbGl0ZXh0ICggaWlpSWlJaTFJICkgWyAwIF0gKQogICBpZiA1MCAtIDUwOiBJSSAtIEkxSWlJMUlJSTExaSAqIG9vT29vTzBPT08gLyBJSUlJIC4gb29Pb29PME9PTyAuIElpSUkxaTFJCiAgaWYgaW50ICggbzAwTzBvMDBvICkgPD0gbGVuICggT28wMG8wMDBPICYgc2V0ICggaWlpICkgKSBhbmQgaW50ICggbzAwTzBvMDBvICkgPCAxMSA6CiAgIG8wID0gJ01heGltbyBudW1lcm8gZGUgZGVzY2FyZ2FzIHN1cGVyYWRvJwogICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogICByZXR1cm4gRmFsc2UKICAgaWYgNDYgLSA0Njogb28wbyAqIGlpMUkxaWkxSWlJaTEgLiBvb29Pb08gKiBvT08gJSBPT08KICBPTyA9IHN1bSAoIG9zIC4gcGF0aCAuIGdldHNpemUgKCAnJXMlcycgJSAoIGkxSUkxMUlJMTFJICwgZiApICkgZm9yIGYgaW4gb3MgLiBsaXN0ZGlyICggaTFJSTExSUkxMUkgKSBpZiBvcyAuIHBhdGggLiBpc2ZpbGUgKCAnJXMlcycgJSAoIGkxSUkxMUlJMTFJICwgZiApICkgYW5kIG9zIC4gcGF0aCAuIHNwbGl0ZXh0ICggZiApIFsgMCBdIGluIE9vMDBvMDAwTyApCiAgaWYgNTcgLSA1NzogaTFpSTEgLSBJSUlJIC0gSUkgKiBpaUlJaTFpMUlpaSAqIElJSUkKICBpZiA0OSAtIDQ5OiBJMUlpSTFJSUkxMWkgKyBpaUlJaTFpMUlpaQogIGlmIGkxICE9ICc2JyBhbmQgaTEgIT0gJ0lsaW1pdGFkbycgYW5kIGkxICE9ICdVbmxpbWl0ZWQnIDoKICAgaWYgaTEgPT0gJzAnIDoKICAgIGkxID0gMTAyNAogICBlbGlmIGkxID09ICcxJyA6CiAgICBpMSA9IDEwMjQgKiAyCiAgIGVsaWYgaTEgPT0gJzInIDoKICAgIGkxID0gMTAyNCAqIDMKICAgZWxpZiBpMSA9PSAnMycgOgogICAgaTEgPSAxMDI0ICogNQogICBlbGlmIGkxID09ICc0JyA6CiAgICBpMSA9IDEwMjQgKiAxMAogICBlbGlmIGkxID09ICc1JyA6CiAgICBpMSA9IDEwMjQgKiAyMAogICBlbHNlIDoKICAgIGkxID0gaTEgLiByZXBsYWNlICggJ0dCJyAsICcnICkKICAgaWYgaW50ICggT08gKSAvIDEwNDg1NzYgPiBpbnQgKCBpMSApIDoKICAgIG8wID0gJ1RhbWHDsW8gbWF4aW1vIHBhcmEgZGVzY2FyZ2FzIHN1cGVyYWRvJwogICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgbzAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA1MDAwICkKICAgIE9PT28wMG9vbzBPbyA9IEZhbHNlCiAgICBpZiAxOSAtIDE5OiBvb09vb08wT09PIC4gT09vT29PMG8wbzBPTyAvIElpICsgSUlJSQogIHJldHVybiBPT09vMDBvb28wT28KIGVsc2UgOgogIHJldHVybiBGYWxzZQogIGlmIDg3IC0gODc6IGlpMUkxaWkxSWlJaTEKICBpZiA2NSAtIDY1OiBPT08gLyBvbyAvIG9vICUgaWlJSWkxaTFJaWkKZGVmIElpSWlJSTFJMUlpICggb3B0aW9ucyApIDoKIE9PTzAwb08wME9vTzAgPSB7IH0KIGlmIDQ4IC0gNDg6IG9vb09vTyAqIElJb29vTzBvb08wb28gKiBJaSArIElJb29vTzBvb08wb28KIGlmIG9zIC4gcGF0aCAuIGV4aXN0cyAoIGlJaWlJaTFpMWkxaTEgKSA6CiAgT09PMDBvTzAwT29PMCA9IGpzb24gLiBsb2FkcyAoIG9vbzAgKCBpSWlpSWkxaTFpMWkxICkgKQogaWYgT09vTzBvbzBvbzAwICggT09PMDBvTzAwT29PMCApIDoKICBPbzBvMG9PID0gT29vb08wTyAoIHVuaWNvZGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIG9wdGlvbnMgWyAnbm9tYnJlJyBdICkgLiBkZWNvZGUgKCAndXRmLTgnICkgKSApCiAgSTExID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBPbzBvMG9PICkKICBpZiA3NCAtIDc0OiBJSUlJICogSWkgKiBpaUlJaTFpMUlpaSAtIElJb29vTzBvb08wb28KICBpMWlJSUlpaWkxICwgSWlJaUlpMWlJMSA9IG9zIC4gcGF0aCAuIHNwbGl0ZXh0ICggT28wbzBvTyApCiAgaWYgNTMgLSA1MzogSWlJSTFpMUkgLyBpaTFJMWlpMUlpSWkxIC8gbzAwb08wb28wTzBPMCAtIE9PTyAqIG9vT29vTzBPT08gKyBvbzBvCiAgaWYgT28wbzBvTyAuIGVuZHN3aXRoICggSWlJaUlpMWlJMSApIDoKICAgT28wbzBvTyA9IGkxaUlJSWlpaTEKICAgaWYgOTAgLSA5MDogSWlJSTFpMUkgKyBJSW9vb08wb29PMG9vIC8gb29vT29PICsgT09PICogSWkxSSAlIGlpSUlpMWkxSWlpCiAgT09PMDBvTzAwT29PMCBbIE9vMG8wb08gXSA9ICgKIG9wdGlvbnMgWyAnaWQnIF0gLCBPbzBvMG9PICwgb3B0aW9ucyBbICdjYXJhdHVsYScgXSAsIG9wdGlvbnMgWyAncG9zdGVyJyBdICwgb3B0aW9ucyBbICd0eXBlJyBdICkKICBPb09vT09vME9PMCA9IG9wZW4gKCBpSWlpSWkxaTFpMWkxICwgInciICkKICBpZiA5NyAtIDk3OiBPT29Pb08wbzBvME9PICogSUkgLiBJMSArIEkxSWlJMUlJSTExaQogIE9vT29PT28wT08wIC4gd3JpdGUgKCBqc29uIC4gZHVtcHMgKCBPT08wMG9PMDBPb08wICkgKQogIE9vT29PT28wT08wIC4gY2xvc2UgKCApCiAgcmV0dXJuIFRydWUKIGVsc2UgOgogIHJldHVybiBGYWxzZQogeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIlhCTUMuQ29udGFpbmVyLlJlZnJlc2giICkKIGlmIDgyIC0gODI6IElJICsgaWkxSTFpaTFJaUlpMSAlIGlpSUlpMWkxSWlpIC4gSUkKIGlmIDU5IC0gNTk6IG9vb09vTyAqIElpSUkxSWlJIC8gSWlJSTFJaUkgKyBJSSAlIGlpMUkxaWkxSWlJaTEgJSBJSUlJCmRlZiBJaWkxb08wMG8wMDAwT08wTyAoICkgOgogaTFJaTExaSA9IFsgXQogaTFJSTExSUkxMUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnRG93bmxvYWRQYXRoJyApICkKIGlmIG9zIC4gcGF0aCAuIGV4aXN0cyAoIGlJaWlJaTFpMWkxaTEgKSA9PSBGYWxzZSA6CiAgT29Pb09PbzBPTzAgPSBvcGVuICggaUlpaUlpMWkxaTFpMSAsICJ3IiApCiAgT29Pb09PbzBPTzAgLiB3cml0ZSAoIGpzb24gLiBkdW1wcyAoIHsgfSApICkKICBpZiA4NiAtIDg2OiBJaUlJMUlpSQogIE9vT29PT28wT08wIC4gY2xvc2UgKCApCiBlbHNlIDoKICBpZiA4IC0gODogb28wbyAtIElJICsgb28wbwogIGl0ZW1zID0ganNvbiAuIGxvYWRzICggb29vMCAoIGlJaWlJaTFpMWkxaTEgKSApCiAgaWYgMjUgLSAyNTogaWkxSTFpaTFJaUlpMSArIEkxIC8gb29vT29PCiAgZm9yIGlJaSAsIEkxaUlJMUlJMWlJSSBpbiBpdGVtcyAuIGNvcHkgKCApIC4gaXRlcml0ZW1zICggKSA6CiAgIE9vT29Pb28wMDAwbyA9IEkxaUlJMUlJMWlJSSBbIDAgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICBJSUlpaTFJMWlpID0gSTFpSUkxSUkxaUlJIFsgMSBdIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgaWYgNDIgLSA0Mjogb09PIC4gT09PIC8gSWlJSTFJaUkgJSBJSW9vb08wb29PMG9vCiAgIGlmIDcgLSA3OiBvbyAvIElpIC0gT09PCiAgIGlmIDI1IC0gMjU6IElJb29vTzBvb08wb28gLiBvT08gLyBJaUlJMWkxSSAvIElJSUkKICAgaWYgOTUgLSA5NTogb09PIC8gSUkgKiBpaTFJMWlpMUlpSWkxIC0gb28gKyBJaUlJMUlpSQogICBpMWlJMW9Pb09vME8wID0gb3MgLiBwYXRoIC4gc3BsaXRleHQgKCBpMUlJMTFJSTExSSApIFsgMCBdICsgcmUgLiBzdWIgKCByJyg/PCFcWylcXScgLCAnW11dJyAsIHJlIC4gc3ViICggcidcWycgLCAnW1tdJyAsIElJSWlpMUkxaWkgKSApICsgJy4qJwogICBPME9PTzBvbyA9IGdsb2IgLiBnbG9iICggaTFpSTFvT29PbzBPMCApCiAgIGlmIDkyIC0gOTI6IG9vT29vTzBPT08gLiBJMQogICBpZiBsZW4gKCBPME9PTzBvbyApID4gMCA6CiAgICBPME9PTzBvbyA9IE8wT09PMG9vIFsgMCBdCiAgICBJSUlpaTFJMWlpID0gSUlJaWkxSTFpaSArICggb3MgLiBwYXRoIC4gc3BsaXRleHQgKCBPME9PTzBvbyApIFsgMSBdICkgLiBlbmNvZGUgKCAndXRmLTgnICwgJ2lnbm9yZScgKQogICAgaWYgOTggLSA5ODogSWlJSTFJaUkKICAgZWxzZSA6CiAgICBPME9PTzBvbyA9ICcnCiAgICBpZiA5MiAtIDkyOiBvMDBvTzBvbzBPME8wIC0gT09PICogSWkKICAgaWYgbm90IG9zIC4gcGF0aCAuIGV4aXN0cyAoIE8wT09PMG9vICkgOgogICAgaWYgOTcgLSA5NzogSUlvb29PMG9vTzBvbyAlIElJIC0gb28gLyBpMWlJMSAqIG9PTyAlIG9vCiAgICBpdGVtcyAuIHBvcCAoIElJSWlpMUkxaWkgLCBOb25lICkKICAgZWxzZSA6CiAgICBJMUlpSTExMTExMTEgPSBJMWlJSTFJSTFpSUkgWyAyIF0gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgIElpMTFJMTFJaTExSSA9IEkxaUlJMUlJMWlJSSBbIDMgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICAgb29vT08wT08wID0gSTFpSUkxSUkxaUlJIFsgNCBdIC4gZW5jb2RlICggJ3V0Zi04JyApCiAgICBJSTFJSTFJMTEgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIElpMTFJMTFJaTExSSApCiAgICBJMUlpaWlJSUlJSTEgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIEkxSWlJMTExMTExMSApCiAgICBpZiA2IC0gNjogb09PICUgb29Pb29PME9PTyAqIG9vMG8gLiBPT08KICAgIG8wT09vME9vT29PbyA9IEZhbHNlCiAgICBpZiBsZW4gKCBPb09vT29vMDAwMG8gLiBzcGxpdCAoICctJyApICkgPT0gMyA6CiAgICAgbzBPT28wT29Pb09vID0gVHJ1ZQogICAgIGlmIDcxIC0gNzE6IG9vb09vTyAqIElpIC8gaWkxSTFpaTFJaUlpMSAtIG9vT29vTzBPT08KICAgICBpZiA3MiAtIDcyOiBvbzBvIC4gSWlJSTFJaUkgKiBJMUlpSTFJSUkxMWkgKiBvb09vb08wT09PICsgSWkgJSBJSUlJCiAgICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBJSUlpaTFJMWlpICwgY2FyYXR1bGEgPSBJMUlpaWlJSUlJSTEgLCBwb3N0ZXIgPSBJSTFJSTFJMTEgLCBpc1BsYXlhYmxlID0gbzBPT28wT29Pb09vICkKICAgIE9vT08wT08wbzBPIC4gYWRkQ29udGV4dE1lbnVJdGVtcyAoIFsgSWlJSWlJICggaWQgPSBzdHIgKCBJMWlJSTFJSTFpSUkgWyAwIF0gKSAsIG5vbWJyZSA9IElJSWlpMUkxaWkgLCB1cmwgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoICclcyVzJyAlICggaTFJSTExSUkxMUkgLCBJSUlpaTFJMWlpICkgKSAsCiBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsIHBvc3RlciA9IElpMTFJMTFJaTExSSAsIHJlbW92ZSA9IFRydWUgLCB0eXBlID0gb29vT08wT08wICkgXSApCiAgICBJMUlpaWkgPSAnezB9P3sxfT1wbGF5TG9jYWwmcGF0aD17Mn0mdGl0PXszfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgb09PTzBPMCAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggTzBPT08wb28gKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggSUlJaWkxSTFpaSApICkKICAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgbm90IG8wT09vME9vT29PbyApICkKICAgIGlmIDI1IC0gMjU6IG8wMG9PMG9vME8wTzAgLiBvbwogIE9vMCA9IG9wZW4gKCBpSWlpSWkxaTFpMWkxICwgInciICkKICBpZiAyOCAtIDI4OiBPT08gLiBJMUlpSTFJSUkxMWkgLyBpaUlJaTFpMUlpaSArIElpMUkgKiBvT08gKyBvb29Pb08KICBPbzAgLiB3cml0ZSAoIGpzb24gLiBkdW1wcyAoIGl0ZW1zICkgKQogIE9vMCAuIGNsb3NlICggKQogdHJ5IDoKICBpZiA0NyAtIDQ3OiBvMDBvTzBvbzBPME8wICsgb28wbyAtIElJb29vTzBvb08wb28gLiBpMWlJMSAvIElpMUkKICBPT28wMDBPbyAoIEkxSUkgKQogZXhjZXB0IDoKICBwYXNzCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiA5NiAtIDk2OiBvb09vb08wT09PIC4gbzAwb08wb28wTzBPMAogaWYgNzcgLSA3NzogaWlJSWkxaTFJaWkgKiBvb29Pb08gLiBJSQpkZWYgT29PMG9vT09PICggb3B0aW9ucyApIDoKIGlmIDIyIC0gMjI6IG8wMG9PMG9vME8wTzAgLiBvb09vb08wT09PIC0gaWkxSTFpaTFJaUlpMSAqIG9vCiBpZiBJaUlpSUkxSTFJaSAoIG9wdGlvbnMgKSA6CiAgaXRoaWwgLiBJSWkgKCBvcHRpb25zIFsgJ3VybCcgXSAsIG9wdGlvbnMgWyAnbm9tYnJlJyBdICwgaTExaSAsIG9wdGlvbnMgWyAnaWQnIF0gLCBvcHRpb25zIFsgJ3R5cGUnIF0gLCAnZG93bmxvYWQnICwgb3B0aW9ucyApCiAgaWYgNjUgLSA2NTogaWlJSWkxaTFJaWkKZGVmIG9PMG9PICggKSA6CiBpZiA0NSAtIDQ1OiBJaSAtIGlpSUlpMWkxSWlpIC4gb09PIC4gSWlJSTFJaUkgLyBvb29Pb08gKiBpaUlJaTFpMUlpaQogaWlpMUlpSTExMTEgPSB4Ym1jYWRkb24gLiBBZGRvbiAoIGlkID0gInNjcmlwdC5tb2R1bGUuc2ltcGxlLmRvd25sb2FkZXIiICkKIE8wTzBPME8wTyA9IGlpaTFJaUkxMTExIC4gZ2V0QWRkb25JbmZvICggJ3Byb2ZpbGUnICkKIGZvciBJMTExMTFJaWlJSUkxIGluIG9zIC4gbGlzdGRpciAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggTzBPME8wTzBPICkgKSA6CiAgdHJ5IDoKICAgaWYgMzggLSAzODogSWkgKyBpaTFJMWlpMUlpSWkxICsgSWkxSSAqIEkxSWlJMUlJSTExaSAuIElJICsgSUkKICAgb3MgLiByZW1vdmUgKCAnJXMlcycgJSAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggTzBPME8wTzBPICkgLCBJMTExMTFJaWlJSUkxICkgKQogIGV4Y2VwdCA6CiAgIGlmIDU3IC0gNTc6IG9vMG8gKyBPT29Pb08wbzBvME9PIC0gb28wbyAuIElpIC0gSUlJSQogICBvMCA9ICdObyBzZSBwdWVkZSBib3JyYXIgZWwgZmljaGVybyAlcyAnICUgSTExMTExSWlpSUlJMQogICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogICBpZiA1IC0gNTogSUlJSSArIGlpMUkxaWkxSWlJaTEgKyBJaUlJMWkxSQogICBpZiAxMSAtIDExOiBPT29Pb08wbzBvME9PICsgb29vT29PIC0gb29Pb29PME9PTyAvIElJSUkgLiBvb09vb08wT09PCiAgIGlmIDk2IC0gOTY6IGlpSUlpMWkxSWlpIC4gb29Pb29PME9PTyAlIElpMUkgLiBpaUlJaTFpMUlpaQogICBpZiAxIC0gMTogSUlvb29PMG9vTzBvbyAlIE9Pb09vTzBvMG8wT08gJSBvb29Pb08gLiBvT08KIGlJMTExaSA9ICclcyVzJyAlICggeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCAnc3BlY2lhbDovL3RlbXAnICkgLCAnY29tbW9uY2FjaGUuZGInICkKIHRyeSA6CiAgb09vTzBPMDAwMDAgPSBzcWxpdGUzIC4gY29ubmVjdCAoIGlJMTExaSApCiAgSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJkZWxldGUgZnJvbSBEb3dubG9hZGVyIiApCiAgb09vTzBPMDAwMDAgLiBjb21taXQgKCApCiAgb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCAnTGltcGllemEgcmVhbGl6YWRhIGNvcnJlY3RhbWVudGUnICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgNTAwMCApCiBleGNlcHQgOgogIHRyYWNlYmFjayAuIHByaW50X2V4YyAoIGZpbGUgPSBzeXMgLiBzdGRvdXQgKQogIG8wID0gJ05vIHNlIHB1ZWRlIGJvcnJhciBiZCBjb21tb25jYWNoZScKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogIGlmIDU0IC0gNTQ6IElJSUkgLiBvb09vb08wT09PICogT09PIC0gSWlJSTFJaUkKZGVmIG9PbyAoIGNvbmZpcm1hdGlvbk1lc3NhZ2UgPSBUcnVlICkgOgogbzAwTzBvMDBvID0gX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdNYXhOdW1Eb3dubG9hZHMnICkKIGkxID0gX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdNYXhTaXplRG93bmxvYWRzJyApCiBpSUkxaUlJaUlpMTFJID0gX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdEb3dubG9hZFBhdGgnICkKIGlmIDc3IC0gNzc6IElJICogSWlJSTFpMUkgJSBJMSArIEkxIC8gb09PCiBpZiBub3QgaUlJMWlJSWlJaTExSSA6CiAgaUlJMWlJSWlJaTExSSA9ICdkb3dubG9hZHMnCiBpMUlJMTFJSTExSSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggaUlJMWlJSWlJaTExSSApCiBpZiAyMSAtIDIxOiBJMSAuIG9vMG8gLyBJSUlJICUgSUkgLSBJMQogaWYgaTFJSTExSUkxMUkgLiBsb3dlciAoICkgLiBzdGFydHN3aXRoICggInNtYjovLyIgKSA6CiAgbzAgPSAnTGEgcnV0YSBTYW1iYSBubyBlc3TDoSBzb3BvcnRhZGEsIHNlbGVjY2lvbmUgb3RyYSBydXRhIHBhcmEgbGFzIGRlc2NhcmdhcycKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogaWYgbm90IG9zIC4gcGF0aCAuIGV4aXN0cyAoIGkxSUkxMUlJMTFJICkgOgogIHRyeSA6CiAgIG9zIC4gbWtkaXIgKCBpMUlJMTFJSTExSSApCiAgZXhjZXB0IDoKICAgbzAgPSAnTm8gZXhpc3RlIGxhIHJ1dGEgJXMgeSBubyBzZSBwdWVkZSBjcmVhci5cblJldmlzYSBsYSBjb25maWd1cmFjaW9uIHkgc2VsZWNjaW9uYSB1bmEgcnV0YSBjb24gcGVybWlzb3MgZGUgZXNjcml0dXJhJyAlIGlJSTFpSUlpSWkxMUkKICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgbzAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA1MDAwICkKICAgaWYgNzggLSA3ODogb09PCiB0cnkgOgogIE9vT29PT28wT08wID0gb3BlbiAoICclcy9ib2xzb24udGVzdCcgJSBpMUlJMTFJSTExSSAsICJ3IiApCiAgT29Pb09PbzBPTzAgLiB3cml0ZSAoICdUZXN0JyApCiAgT29Pb09PbzBPTzAgLiBjbG9zZSAoICkKICB0cnkgOgogICBvcyAuIHJlbW92ZSAoICclcy9ib2xzb24udGVzdCcgJSBpMUlJMTFJSTExSSApCiAgIGlmIGNvbmZpcm1hdGlvbk1lc3NhZ2UgOgogICAgbzAgPSAnUnV0YSBkZSBkZXNjYXJnYXMgY29ycmVjdGEnCiAgICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogICByZXR1cm4gVHJ1ZQogIGV4Y2VwdCA6CiAgIG8wID0gJ05vIHNlIHB1ZWRlIGJvcnJhciBlbiBsYSBjYXJwZXRhIHNlbGVjY2lvbmFkYScKICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgbzAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA1MDAwICkKIGV4Y2VwdCA6CiAgbzAgPSAnTm8gc2UgcHVlZGUgZ3VhcmRhciBlbiBsYSBjYXJwZXRhIHNlbGVjY2lvbmFkYScKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogcmV0dXJuIEZhbHNlCiBpZiA4NyAtIDg3OiBpaUlJaTFpMUlpaSAqIGlpMUkxaWkxSWlJaTEgLyBvT08gJSBPT08gLyBPT29Pb08wbzBvME9PCiBpZiAzOCAtIDM4OiBPT29Pb08wbzBvME9PICogSTEgLyBJaTFJCiBpZiA3MCAtIDcwOiBvb29Pb08gKiBJaUlJMUlpSSAuIElJIC4gSWkxSSAqIEkxICsgb29vT29PCiBpZiA3NyAtIDc3OiBvMDBvTzBvbzBPME8wICUgSTEKZGVmIE9PMG8wTzAgKCBpZCAsIHR5cGUgLCBub21icmUgLCB1cmwgLCBjYXJhdHVsYSAsIHBvc3RlciAsIGZhdiA9IGkxMWlpaSAsIHRleHQgPSAnJyAsIGZhdkxpdGVyYWwgPSAnJyAsIHJlZnJlc2ggPSBOb25lICkgOgogaWYgOTkgLSA5OTogb29Pb29PME9PTyAlIG9PTwogdHJ5IDoKICBub21icmUgPSBub21icmUgLiBlbmNvZGUgKCAndXRmLTgnICwgJ2lnbm9yZScgKQogZXhjZXB0ICggVW5pY29kZUVuY29kZUVycm9yICwgVW5pY29kZURlY29kZUVycm9yICkgOgogIHBhc3MKIGlmIG5vdCBjYXJhdHVsYSA6CiAgY2FyYXR1bGEgPSAnTm9uZScKIGlmIG5vdCBwb3N0ZXIgOgogIHBvc3RlciA9ICdOb25lJwogaWYgaWQgbm90IGluIGZhdiA6CiAgaWYgODkgLSA4OTogT09PCiAgT28wMG8wTzBvT28wID0gKCAnQcOxYWRpciBhIGZhdm9yaXRvcyAlcyBQYWxhbnRpcicgJSB0ZXh0ICwKICdYQk1DLlJ1blBsdWdpbiglcz9hY3Rpb249YWRkZmF2JXMmaWQ9JXMmbm9tYnJlPSVzJnVybD0lcyZjYXJhdHVsYT0lcyZwb3N0ZXI9JXMmdHlwZT0lcyZ0ZXh0PSVzKScgJSAoCiBJMWlJMTFJICwgZmF2TGl0ZXJhbCAsIGlkICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBub21icmUgKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggdXJsICkgLAogYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBjYXJhdHVsYSApICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBwb3N0ZXIgKSAsIHR5cGUgLCB0ZXh0ICkgKQogZWxzZSA6CiAgT28wMG8wTzBvT28wID0gKCAnRWxpbWluYXIgZGUgZmF2b3JpdG9zICVzIFBhbGFudGlyJyAlIHRleHQgLAogJ1hCTUMuUnVuUGx1Z2luKCVzP2FjdGlvbj1ybWZhdiVzJmlkPSVzJm5vbWJyZT0lcyZ1cmw9JXMmY2FyYXR1bGE9JXMmcG9zdGVyPSVzJnJlZnJlc2g9JXMmdHlwZT0lcyZ0ZXh0PSVzKScgJSAoCiBJMWlJMTFJICwgZmF2TGl0ZXJhbCAsIGlkICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBub21icmUgKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggdXJsICkgLAogYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBjYXJhdHVsYSApICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBwb3N0ZXIgKSAsIHJlZnJlc2ggLCB0eXBlICwgdGV4dCApICkKIHJldHVybiBPbzAwbzBPMG9PbzAKIGlmIDEgLSAxOiBvbwogaWYgMzAgLSAzMDogb29Pb29PME9PTyAvIElpSUkxaTFJCmRlZiBPb09Pb09PMCAoIG9wdGlvbnMgLCBmYXZvcml0b3MgPSBpSWlJaWlpSWkxSTFJICkgOgogT09PMDBvTzAwT29PMCA9IGpzb24gLiBsb2FkcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb29vMCAoIGZhdm9yaXRvcyApICkgKQogT09PMDBvTzAwT29PMCAuIHBvcCAoIG9wdGlvbnMgWyAnaWQnIF0gLCBOb25lICkKIE9vMCA9IG9wZW4gKCBmYXZvcml0b3MgLCAidyIgKQogT28wIC4gd3JpdGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGpzb24gLiBkdW1wcyAoIE9PTzAwb08wME9vTzAgKSApICkKIE9vMCAuIGNsb3NlICggKQogaWYgJ3JlZnJlc2gnIGluIG9wdGlvbnMgYW5kIG9wdGlvbnMgWyAncmVmcmVzaCcgXSA6CiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIlhCTUMuQ29udGFpbmVyLlJlZnJlc2giICkKICBpZiAzNSAtIDM1OiBvbzBvICUgaTFpSTEgLyBJaUlJMWkxSQogIGlmIDEzIC0gMTM6IElpSUkxaTFJCmRlZiBPMDAwMDAgKCBmYXZvcml0b3MgLCBmYXYgLCBmYXZMaXRlcmFsICwgdGV4dCApIDoKIGkxSWkxMWkgPSBbIF0KIGlmIG9zIC4gcGF0aCAuIGV4aXN0cyAoIGZhdm9yaXRvcyApID09IEZhbHNlIDoKICBPb09vT09vME9PMCA9IG9wZW4gKCBmYXZvcml0b3MgLCAidyIgKQogIE9vT29PT28wT08wIC4gd3JpdGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGpzb24gLiBkdW1wcyAoIHsgfSApICkgKQogIE9vT29PT28wT08wIC4gY2xvc2UgKCApCiBlbHNlIDoKICBpdGVtcyA9IGpzb24gLiBsb2FkcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb29vMCAoIGZhdm9yaXRvcyApICkgKQogIGZvciBpSWkgaW4gc29ydGVkICggaXRlbXMgLiBpdGVtcyAoICkgLCBrZXkgPSBsYW1iZGEgaWlpMUlpSSA6IGlpaTFJaUkgWyAxIF0gWyAxIF0gKSA6CiAgIEkxaUlJMUlJMWlJSSA9IGlJaSBbIDEgXQogICBPb09vT29vMDAwMG8gPSBJMWlJSTFJSTFpSUkgWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgSUlJaWkxSTFpaSA9IEkxaUlJMUlJMWlJSSBbIDEgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICB0cnkgOgogICAgaWYgNjYgLSA2Njogb09PICogb09PIC0gaWkxSTFpaTFJaUlpMSArIElpIC0gb09PCiAgICBJSUlpaTFJMWlpID0gSTFpSUkxSUkxaUlJIFsgMSBdIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgZXhjZXB0IDoKICAgIHBhc3MKICAgSTFJaWlpID0gSTFpSUkxSUkxaUlJIFsgMiBdIC4gZW5jb2RlICggJ3V0Zi04JyApCiAgIEkxSWlJMTExMTExMSA9IEkxaUlJMUlJMWlJSSBbIDMgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICBJaTExSTExSWkxMUkgPSBJMWlJSTFJSTFpSUkgWyA0IF0gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgb29vT08wT08wID0gSTFpSUkxSUkxaUlJIFsgNSBdIC4gZW5jb2RlICggJ3V0Zi04JyApCiAgIElJMUlJMUkxMSA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggSWkxMUkxMUlpMTFJICkKICAgSTFJaWlpSUlJSUkxID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMUlpSTExMTExMTEgKQogICBJSUlpaTFJMWlpID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJSUlpaTFJMWlpICkKICAgbzBPT28wT29Pb09vID0gRmFsc2UKICAgaWYgbGVuICggT29Pb09vbzAwMDBvIC4gc3BsaXQgKCAnLScgKSApID09IDMgYW5kIG5vdCAnZ3JvdXBJZCcgaW4gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMUlpaWkgKSA6CiAgICBvME9PbzBPb09vT28gPSBUcnVlCiAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9IElJSWlpMUkxaWkgLCBjYXJhdHVsYSA9IEkxSWlpaUlJSUlJMSAsIHBvc3RlciA9IElJMUlJMUkxMSAsIGlzUGxheWFibGUgPSBvME9PbzBPb09vT28gKQogICBPb09PME9PMG8wTyAuIGFkZENvbnRleHRNZW51SXRlbXMgKCBbIE9PMG8wTzAgKCBpZCA9IHN0ciAoIEkxaUlJMUlJMWlJSSBbIDAgXSApICwgbm9tYnJlID0gSUlJaWkxSTFpaSAsIHVybCA9IEkxSWlpaSAsCiBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsIHBvc3RlciA9IElpMTFJMTFJaTExSSAsIHJlZnJlc2ggPSBUcnVlICwgdHlwZSA9IG9vb09PME9PMCAsIGZhdiA9IGZhdiAsIHRleHQgPSB0ZXh0ICwgZmF2TGl0ZXJhbCA9IGZhdkxpdGVyYWwgKSBdICkKICAgaTFJaTExaSAuIGFwcGVuZCAoICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMUlpaWkgKSAsIE9vT08wT08wbzBPICwgbm90IG8wT09vME9vT29PbyApICkKIHRyeSA6CiAgaWYgNDQgLSA0NDogSUkgKyBpaTFJMWlpMUlpSWkxCiAgT09vMDAwT28gKCBJMWlJMWlpaUlpSTEgKQogZXhjZXB0IDoKICBwYXNzCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiAzNSAtIDM1OiBvbzBvICsgSUlJSSAlIG9vMG8gJSBJSSAvIE9PTyAlIElJCiBpZiA4NCAtIDg0OiBvT08KZGVmIGlpb08wb28wME8wTyAoIG9wdGlvbnMgLCBmYXZvcml0b3MgPSBpSWlJaWlpSWkxSTFJICkgOgogaWlJSWlJSUlpID0geyB9CiBpZiBvcyAuIHBhdGggLiBleGlzdHMgKCBmYXZvcml0b3MgKSA9PSBGYWxzZSA6CiAgaWYgODkgLSA4OTogaWlJSWkxaTFJaWkgKiBJSSAuIG9vMG8gLyBJSQogIGlpSUlpSUlJaSBbIG9wdGlvbnMgWyAnaWQnIF0gXSA9ICgKIG9wdGlvbnMgWyAnaWQnIF0gLCBvcHRpb25zIFsgJ25vbWJyZScgXSAsIG9wdGlvbnMgWyAndXJsJyBdICwgb3B0aW9ucyBbICdjYXJhdHVsYScgXSAsIG9wdGlvbnMgWyAncG9zdGVyJyBdICwgb3B0aW9ucyBbICd0eXBlJyBdICkKICBPb09vT09vME9PMCA9IG9wZW4gKCBmYXZvcml0b3MgLCAidyIgKQogIE9vT29PT28wT08wIC4gd3JpdGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGpzb24gLiBkdW1wcyAoIGlpSUlpSUlJaSApICkgKQogIE9vT29PT28wT08wIC4gY2xvc2UgKCApCiBlbHNlIDoKICBPT08wMG9PMDBPb08wID0ganNvbiAuIGxvYWRzICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBvb28wICggZmF2b3JpdG9zICkgKSApCiAgT09PMDBvTzAwT29PMCBbIG9wdGlvbnMgWyAnaWQnIF0gXSA9ICggb3B0aW9ucyBbICdpZCcgXSAsIG9wdGlvbnMgWyAnbm9tYnJlJyBdICwgb3B0aW9ucyBbICd1cmwnIF0gLCBvcHRpb25zIFsgJ2NhcmF0dWxhJyBdICwgb3B0aW9ucyBbICdwb3N0ZXInIF0gLCBvcHRpb25zIFsgJ3R5cGUnIF0gKQogIE9vMCA9IG9wZW4gKCBmYXZvcml0b3MgLCAidyIgKQogIE9vMCAuIHdyaXRlICggYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBqc29uIC4gZHVtcHMgKCBPT08wMG9PMDBPb08wICkgKSApCiAgT28wIC4gY2xvc2UgKCApCiBpZiAndGV4dCcgaW4gb3B0aW9ucyA6CiAgbzBPbyA9IG9wdGlvbnMgWyAndGV4dCcgXQogZWxzZSA6CiAgbzBPbyA9ICcnCiB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAiWEJNQy5Db250YWluZXIuUmVmcmVzaCIgKQogaWlpSWlpMUlpSUkgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogaWlpSWlpMUlpSUkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwKICdGYXZvcml0byBhw7FhZGlkbyBhIFtDT0xPUiBnb2xkXSVzWy9DT0xPUl0gUGFsYW50aXInICUgKCBvME9vICkgLAogeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgMzAwMCApCiBpZiA4MyAtIDgzOiBPT08KZGVmIElJaWlJSTExMWkgKCBjYXJhdHVsYSAsIHBvc3RlciApIDoKIGlmIGNhcmF0dWxhID09IE5vbmUgOgogIGNhcmF0dWxhID0gJycKIGlmIHBvc3RlciA9PSBOb25lIDoKICBwb3N0ZXIgPSAnJwogcmV0dXJuIHsgJ2ljb24nIDogY2FyYXR1bGEgLCAnZmFuYXJ0JyA6IHBvc3RlciAsICd0aHVtYicgOiBjYXJhdHVsYSB9CiBpZiA0OSAtIDQ5OiBvT08gKyBpaUlJaTFpMUlpaSAqIG9vT29vTzBPT08gKyBPT29Pb08wbzBvME9PCiBpZiA4OCAtIDg4OiBvbzBvIC0gSUkgKyBJaUlJMUlpSSAuIElpMUkgJSBJaTFJIC8gaTFpSTEKIGlmIDg4IC0gODg6IE9PTyAvIGlpSUlpMWkxSWlpICogSUkKZGVmIE9PTzBvT08wTzBvTzAgKCBkaW1lbnNpb24gKSA6CiBpZiBkaW1lbnNpb24gOgogIElJaWlJID0gZGltZW5zaW9uIC4gc3BsaXQgKCAieCIgKQogIGlmIGxlbiAoIElJaWlJICkgPT0gMiA6CiAgIGlpMTFpMUkxMWkgPSBpbnQgKCBJSWlpSSBbIDAgXSApCiAgIGlJMUlpSTFJSWlJaSA9IGludCAoIElJaWlJIFsgMSBdICkKICAgaWYgaWkxMWkxSTExaSA9PSAwIG9yIGlJMUlpSTFJSWlJaSA9PSAwIDoKICAgIHJldHVybiAiIgogICBlbGlmIGlpMTFpMUkxMWkgPD0gNzIwIGFuZCBpSTFJaUkxSUlpSWkgPD0gNDgwIDoKICAgIHJldHVybiAiW0NPTE9SIG9sZGxhY2VdKFNEKVsvQ09MT1JdIgogICBlbGlmIGlpMTFpMUkxMWkgPD0gNzY4IGFuZCBpSTFJaUkxSUlpSWkgPD0gNTc2IDoKICAgIHJldHVybiAiW0NPTE9SIG1vY2Nhc2luXShIRClbL0NPTE9SXSIKICAgZWxpZiBpaTExaTFJMTFpIDw9IDk2MCBhbmQgaUkxSWlJMUlJaUlpIDw9IDU0NCA6CiAgICByZXR1cm4gIltDT0xPUiBwZWFjaHB1ZmZdKEhEKVsvQ09MT1JdIgogICBlbGlmIGlpMTFpMUkxMWkgPD0gMTI4MCBhbmQgaUkxSWlJMUlJaUlpIDw9IDcyMCA6CiAgICByZXR1cm4gIltDT0xPUiBzYW5keWJyb3duXSg3MjApWy9DT0xPUl0iCiAgIGVsc2UgOgogICAgcmV0dXJuICJbQ09MT1IgY2hvY29sYXRlXSgxMDgwKVsvQ09MT1JdIgogIGVsc2UgOgogICByZXR1cm4gIiIKIHJldHVybiAiIgogaWYgMTkgLSAxOTogb28wbyAvIG9vb09vTyAlIG8wMG9PMG9vME8wTzAgJSBPT29Pb08wbzBvME9PIC8gSUlJSQogaWYgMTUgLSAxNTogSWkxSSAuIGkxaUkxICsgSWkgLiBPT29Pb08wbzBvME9PICogSUlJSSAuIElJb29vTzBvb08wb28KZGVmIGkxSSAoIHVybCApIDoKIGlmIDM3IC0gMzc6IG9vMG8KIE9PME8wT09PID0gaXRoaWwgLiBpSUkxaUlJaUlpMTFJICggaTExaSAsIHVybCApCiBJMUlJaTEgPSBpdGhpbCAuIG9vMG8wMG9vTyAoIGkxMWkgLCB1cmwgKQogaWYgSTFJSWkxIDoKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCAnVXN1YXJpbyBlbiAlcyAoJXMpIHZhbGlkYWRvJyAlICggdXJsICwgT08wTzBPT08gWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkgKSAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogZWxzZSA6CiAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgJ1VzdWFyaW8gZW4gJXMgKCVzKSB5IGNvbnRyYXNlw7FhIG5vIHbDoWxpZGFzJyAlICggdXJsICwgT08wTzBPT08gWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkgKSAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogIGlmIDc0IC0gNzQ6IElJSUkgLSBJaTFJIC8gSUkKICBpZiA3IC0gNzogT09PCiAgaWYgMzggLSAzODogb29vT29PIC8gSTEgKiBJSW9vb08wb29PMG9vCmRlZiBPb09PMDBvbyAoIHNlcmllX3Npbm9wICwgc2VyaWVfY2FyYXR1bGEgLCBzZXJpZV9wb3N0ZXIgLCB0ZW1wX3Npbm9wICwgdGVtcF9jYXJhdHVsYSAsIHRlbXBfcG9zdGVyICkgOgogT09PMDBvTzAwT29PMCA9IFsgXQogaWYgdGVtcF9zaW5vcCA9PSBOb25lIDoKICBPT08wMG9PMDBPb08wIC4gYXBwZW5kICggc2VyaWVfc2lub3AgKQogZWxzZSA6CiAgT09PMDBvTzAwT29PMCAuIGFwcGVuZCAoIHRlbXBfc2lub3AgKQogaWYgdGVtcF9jYXJhdHVsYSA9PSBOb25lIDoKICBPT08wMG9PMDBPb08wIC4gYXBwZW5kICggc2VyaWVfY2FyYXR1bGEgKQogZWxzZSA6CiAgT09PMDBvTzAwT29PMCAuIGFwcGVuZCAoIHRlbXBfY2FyYXR1bGEgKQogaWYgdGVtcF9wb3N0ZXIgPT0gTm9uZSA6CiAgT09PMDBvTzAwT29PMCAuIGFwcGVuZCAoIHNlcmllX3Bvc3RlciApCiBlbHNlIDoKICBPT08wMG9PMDBPb08wIC4gYXBwZW5kICggdGVtcF9wb3N0ZXIgKQogcmV0dXJuIE9PTzAwb08wME9vTzAKIGlmIDMzIC0gMzM6IG9vMG8gKiBvbyAvIGlpSUlpMWkxSWlpIC8gT09PICogaWlJSWkxaTFJaWkKIGlmIDMgLSAzOiBvMDBvTzBvbzBPME8wICogT09vT29PMG8wbzBPTwogaWYgNSAtIDU6IElpSUkxSWlJICUgT09vT29PMG8wbzBPTwpkZWYgT29vMDBvMG9vMG8gKCBvcGVyYXRvciAsIHZhbHVlICwgcGFyYW1zICkgOgogb09vTzBPMDAwMDAgPSBzcWxpdGUzIC4gY29ubmVjdCAoIGkxMWkgKQogSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiBvbzAgPSAxCiBpZiAncGFnZScgaW4gcGFyYW1zIGFuZCAnY19wYWdlJyBpbiBwYXJhbXMgYW5kICdhbGZhJyBpbiBwYXJhbXMgOgogIG9vMCA9IGludCAoIHBhcmFtcyBbICdjX3BhZ2UnIF0gKQogIGlmIDIyIC0gMjI6IG9vb09vTyAqIG9vMG8gKiBJMSAuIEkxSWlJMUlJSTExaSArIElpSUkxSWlJCiAgaWYgNSAtIDU6IE9PTyAlIElpSUkxSWlJCiAgaWYgODMgLSA4MzogSWlJSTFpMUkKICBpZiA3NSAtIDc1OiBJSW9vb08wb29PMG9vIC4gSUlvb29PMG9vTzBvbyArIE9PTyAvIElpIC0gb29Pb29PME9PTwogIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAiU2VsZWN0ICIgKyAiLCIgLiBqb2luICgKIElJaTExSWkxICkgKyBJSUlpMTEgKyAiIGZyb20gc2VyaWVzIHdoZXJlIGxvd2VyKGNhdGVnb3J5KSAiICsgb3BlcmF0b3IgKyAiID8gQU5EIGFsZmEgPj0nIiArIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICgKIHBhcmFtcyBbICdhbGZhJyBdICkgKyAiJyBBTkQgYWN0aXZlID4gMCBBTkQgIiArIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICgKIHBhcmFtcyBbICdwYWdlJyBdICkgKyAiIG9yZGVyIGJ5IGFsZmEgYXNjLCBub21icmUgYXNjIExJTUlUICIgKyBzdHIgKCBvb28wb29Pb08wT28gKSAsICggdmFsdWUgLCApICkKIGVsc2UgOgogIHBhcmFtcyBbICdjX3BhZ2UnIF0gPSAxCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKAogSUlpMTFJaTEgKSArIElJSWkxMSArICIgZnJvbSBzZXJpZXMgd2hlcmUgYWN0aXZlID4gMCBhbmQgbG93ZXIoY2F0ZWdvcnkpICIgKyBvcGVyYXRvciArICIgPyBvcmRlciBieSBhbGZhIGFzYywgbm9tYnJlIGFzYyBMSU1JVCAiICsgc3RyICgKIG9vbzBvb09vTzBPbyApICwgKCB2YWx1ZSAsICkgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogaWYgNjMgLSA2MzogSUlJSSAtIGkxaUkxICogSTEgJSBJSSAtIG9vCiBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdID0gJ2FsZmE9JyArIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggSWkxMTFJIFsgMCBdIFsgbGVuICggSUlpMTFJaTEgKSBdICkKIHBhcmFtcyBbICdjX3BhZ2UnIF0gPSBvbzAKIEkxSWlJaUkgKCBJaTExMUkgLCBGYWxzZSAsIFRydWUgLCBGYWxzZSAsIHBhcmFtcyApCiBpZiA2NiAtIDY2OiBJMSAuIG9PTyArIG9vb09vTyAqIGlpMUkxaWkxSWlJaTEgLiBPT08KIGlmIDU0IC0gNTQ6IElpSUkxaTFJICsgT09vT29PMG8wbzBPTyArIG9vT29vTzBPT08KZGVmIGlJMUlpaUlJMWlJICggZmllbGRzICwgdGFibGUgLCBjYXRlZ29yeUNvbmRpdGlvbiApIDoKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKCBmaWVsZHMgKSArICIgZnJvbSAiICsgdGFibGUgKyAiIHdoZXJlIGFjdGl2ZSA+IDAgJXMgb3JkZXIgYnkgdXBkYXRlZCBkZXNjIGxpbWl0ICVzIiAlICggY2F0ZWdvcnlDb25kaXRpb24gLCBzdHIgKCBvb28wb29Pb08wT28gKSApICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKIEkxSWlJaUkgKCBJaTExMUkgLCBUcnVlICwgVHJ1ZSAsIFRydWUgKQogaWYgNTYgLSA1NjogSTEgKiBpaTFJMWlpMUlpSWkxCiBpZiAyNSAtIDI1OiBJSW9vb08wb29PMG9vIC8gaTFpSTEgLyBJaSAuIElJSUkKZGVmIGkxMWlJSWkgKCBvcmRlciApIDoKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKCBJSWkxMUlpMSApICsgIiBmcm9tIHNlcmllcyB3aGVyZSBhY3RpdmUgPiAwIG9yZGVyIGJ5ICIgKyBvcmRlciArICIgZGVzYywgbm9tYnJlIGFzYyBsaW1pdCAiICsgc3RyICggb29vMG9vT29PME9vICkgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogSTFJaUlpSSAoIElpMTExSSAsIFRydWUgLCBUcnVlICwgRmFsc2UgKQogaWYgNDggLSA0ODogb29vT29PIC0gb28gLyBvMDBvTzBvbzBPME8wICUgSWkxSSAlIElpCmRlZiBPb29Pb09vb28gKCBvcmRlciAsIHBhcmFtcyApIDoKIGlmIDQ2IC0gNDY6IG9vb09vTyAqIE9PTyAvIElpSUkxaTFJIC4gSTFJaUkxSUlJMTFpIC0gSWkxSSAvIE9PTwogaWYgNDYgLSA0Njogb28wbyAlIG9vIC8gaTFpSTEKIGlmIDUyIC0gNTI6IG9vb09vTyAlIE9Pb09vTzBvMG8wT08gLSBpaUlJaTFpMUlpaSAtIG8wMG9PMG9vME8wTzAKIGlmIDUxIC0gNTE6IG9PTwogaWYgNzcgLSA3Nzogb29vT29PIC0gT09PIC0gSTEgKiBJMQogaWYgMTEgLSAxMTogSWkxSSAqIG9vIC8gT09vT29PMG8wbzBPTyAvIGlpSUlpMWkxSWlpCiBJaTExMUkgPSBPMDAwbzAwMG8wT28gKCAicGVsaXMiICwKIFsgInBlbGlfaWQiICwgImF1ZGlvIiAsICInJyIgLCAidGFncyIgLCAiJyciICwgIicnIiAsICJsaW5rIiAsICIncXVhbGl0eSciICwgIm5vbWJyZSIgLCAiYW5ubyIgLCAic2lub3BzaXMiICwKICJjYXJhdHVsYSIgLCAicG9zdGVyIiAsICJzdHJmdGltZSgnJVktJW0tJWQnLHVwZGF0ZWQpLCBwdW50b3MsIGNhdGVnb3J5LCBhY3RpdmUsIHRtZGIsIgogImdyb3VwX2lkIiAsICJjb3VudCgqKSIgLCAiZ3JvdXBfY29uY2F0KHRhZ3MsJyMnKSIgLCAiZ3JvdXBfY29uY2F0KGF1ZGlvLCcjJykiCiBdICwgWyBdICwgWyBdICwgb3JkZXIgLCBwYXJhbXMgKQogT29vTzAwT09vME9PTyAoIElpMTExSSAsICdwZWxpcycgLCBOb25lICwgTm9uZSAsIGluZm8gPSBwYXJhbXMgKQogaWYgOSAtIDk6IG8wMG9PMG9vME8wTzAgKiBvT08gKyBJaUlJMWkxSSAuIE9Pb09vTzBvMG8wT08gLiBJaTFJIC0gb28wbwpkZWYgSUlJSTFJICggc2VyaWVfYXR0ciAsIHR5cGUgKSA6CiBvT08wb08gPSBJSUkxMUlpICggKQogaWYgb09PMG9PIDoKICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiAgaWYgOTEgLSA5MTogT09PIC0gSWlJSTFpMUkgJSBpaUlJaTFpMUlpaSAqIG9vT29vTzBPT08gLyBpaUlJaTFpMUlpaQogIG9PTzBvTyA9ICclJyArIG9PTzBvTyArICclJwogIE8wbzBvb29vMDAgPSAnJwogIGlmIHR5cGUgIT0gSWlpMSA6CiAgIE8wbzBvb29vMDAgPSAnIGdyb3VwIGJ5IGdyb3VwX2lkJwogIHRyeSA6CiAgIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAiU2VsZWN0ICIgKyAiLCIgLiBqb2luICgKIHNlcmllX2F0dHIgKSArIElJSWkxMSArICIgZnJvbSAiICsgdHlwZSArICIgd2hlcmUgYWN0aXZlID4gMCBhbmQgbm9tYnJlIGxpa2UgPyAiICsgTzBvMG9vb28wMCArICIgb3JkZXIgYnkgYWxmYSBhc2MsIG5vbWJyZSBhc2MiICwKICggdW5pY29kZSAoIG9PTzBvTyAuIGRlY29kZSAoICd1dGYtOCcgKSApICwgKSApCiAgZXhjZXB0IDoKICAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKAogc2VyaWVfYXR0ciApICsgSUlJaTExICsgIiBmcm9tICIgKyB0eXBlICsgIiB3aGVyZSBhY3RpdmUgPiAwIGFuZCBub21icmUgbGlrZSA/ICIgKyBPMG8wb29vbzAwICsgIiBvcmRlciBieSBhbGZhIGFzYywgbm9tYnJlIGFzYyIgLAogKCBPb29vTzBPICggdW5pY29kZSAoIG9PTzBvTyAuIGRlY29kZSAoICd1dGYtOCcgKSApICkgLiB1cHBlciAoICkgLCApICkKICBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKICBpZiBsZW4gKCBJaTExMUkgKSA9PSAwIDoKICAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKCBzZXJpZV9hdHRyICkgKyAiIGZyb20gIiArIHR5cGUgKyAiIHdoZXJlIGFjdGl2ZSA+IDAgYW5kIG5vbWJyZSBsaWtlID8gIiArIE8wbzBvb29vMDAgKyAiIG9yZGVyIGJ5IG5vbWJyZSBhc2MiICwKICggT29vb08wTyAoIHVuaWNvZGUgKCBvT08wb08gLiBkZWNvZGUgKCAndXRmLTgnICkgKSApIC4gdXBwZXIgKCApICwgKSApCiAgIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogIG9Pb08wTzAwMDAwIC4gY2xvc2UgKCApCiAgaWYgdHlwZSA9PSBJaWkxIDoKICAgSTFJaUlpSSAoIElpMTExSSAsIFRydWUgLCBUcnVlICwgRmFsc2UgKQogIGVsc2UgOgogICBPb29PMDBPT28wT09PICggSWkxMTFJICwgJ3BlbGlzJyAsIGluZm8gPSB7ICdwdW50b3MnIDogJ3RydWUnICwgJ2Fubm8nIDogJ3RydWUnIH0gKQogICBpZiAxNyAtIDE3OiBJSSAqIElpCiAgIGlmIDI2IC0gMjY6IG8wMG9PMG9vME8wTzAgKyBPT08gKyBvbzBvIC8gb29vT29PIC0gaWkxSTFpaTFJaUlpMSAvIElJSUkKZGVmIE8wTzAwT29vTzAwTyAoIGF1ZGlvID0gTm9uZSAsIHRhYiA9ICdzZXJpZXMnICwgcGFyYW1zID0geyB9ICkgOgogaWYgbm90IGF1ZGlvIDoKICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgYXVkaW8sY291bnQoYXVkaW8pIGZyb20gIiArIHRhYiArICIgd2hlcmUgYXVkaW8hPSdFUycgYW5kIGFjdGl2ZSA+IDAgZ3JvdXAgYnkgYXVkaW8gb3JkZXIgYnkgYXVkaW8iICkKICBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKICBvT29PME8wMDAwMCAuIGNsb3NlICggKQogIGkxSWkxMWkgPSBbIF0KICBvMDBvME8gPSB7IH0KICBmb3IgSUlJMUkxaUkxSTFpSSBpbiBJaTExMUkgOgogICBpZiAzMiAtIDMyOiBJSW9vb08wb29PMG9vICsgSUlJSQogICBmb3IgSUkxSTFJSUkxMUlpMSBpbiBJSUkxSTFpSTFJMWlJIFsgMCBdIC4gcmVwbGFjZSAoICdFUycgLCAnJyApIC4gc3BsaXQgKCAnIycgKSA6CiAgICBpZiBJSTFJMUlJSTExSWkxIGFuZCBJSTFJMUlJSTExSWkxIG5vdCBpbiBvMDBvME8gOgogICAgIG8wMG8wTyBbIElJMUkxSUlJMTFJaTEgXSA9IElJSTFJMWlJMUkxaUkgWyAxIF0KICAgIGVsaWYgSUkxSTFJSUkxMUlpMSA6CiAgICAgbzAwbzBPIFsgSUkxSTFJSUkxMUlpMSBdID0gbzAwbzBPIFsgSUkxSTFJSUkxMUlpMSBdICsgSUlJMUkxaUkxSTFpSSBbIDEgXQogICAgIGlmIDY4IC0gNjg6IG9vT29vTzBPT08gLSBvbwogICAgIGlmIDg0IC0gODQ6IEkxSWlJMUlJSTExaSArIG9vT29vTzBPT08gKyBJSW9vb08wb29PMG9vICsgSWkgKiBvb29Pb08gLSBJMQogIGZvciBJSTFJMUlJSTExSWkxICwgaWlpTzAwME9vIGluIG8wMG8wTyAuIGl0ZXJpdGVtcyAoICkgOgogICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdICglcyknICUgKCBpMUlpSTFpaWkgLCBJSTFJMUlJSTExSWkxICwgaWlpTzAwME9vICkKICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIGNhcmF0dWxhID0gJycgKQogICBpZiB0YWIgPT0gJ3NlcmllcycgOgogICAgSTFJaWlpID0gJ3swfT9hY3Rpb249c2VyaWVzQnlMYW5nJmxhbmc9ezF9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBJSTFJMUlJSTExSWkxIC4gZW5jb2RlICggJ3V0Zi04JyApICkKICAgZWxzZSA6CiAgICBJMUlpaWkgPSAnezB9P2FjdGlvbj1wZWxpc0J5TGFuZyZsYW5nPXsxfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgSUkxSTFJSUkxMUlpMSAuIGVuY29kZSAoICd1dGYtOCcgKSApCiAgIGlJaTFJaSA9IFRydWUKICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiAgdHJ5IDoKICAgaWYgNzMgLSA3MzogSWkgLyBJMUlpSTFJSUkxMWkgLiBvbyAuIElJSUkgLiBJMUlpSTFJSUkxMWkKICAgT09vMDAwT28gKCBvMG8wMDAwTzAgKQogIGV4Y2VwdCA6CiAgIHBhc3MKICB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKICB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBpaUlJaWlJSTEgKQogZWxzZSA6CiAgcGFyYW1zIFsgJ3NxbF9saW1pdCcgXSA9ICcgbGltaXQgJyArIHN0ciAoIG9vbzBvb09vTzBPbyApCiAgcGFyYW1zIFsgImFjdGlvbiIgXSA9ICdwZWxpc0J5TGFuZycKICBpZiAncGFnZScgaW4gcGFyYW1zIGFuZCAnY19wYWdlJyBpbiBwYXJhbXMgOgogICBpZiA2OCAtIDY4OiBJaSAvIElpSUkxaTFJICUgSWlJSTFpMUkgLyBJMQogICBwYXJhbXMgWyAiYWN0aW9uUGFyYW1zIiBdID0gJ2xhbmc9JyArIGF1ZGlvCiAgZWxzZSA6CiAgIHBhcmFtcyBbICJjX3BhZ2UiIF0gPSAxCiAgIHBhcmFtcyBbICJhY3Rpb25QYXJhbXMiIF0gPSAnbGFuZz0nICsgYXVkaW8KICAgaWYgNDcgLSA0NzogSUlvb29PMG9vTzBvbyAqIE9PTyArIEkxSWlJMUlJSTExaQogICBpZiA0NCAtIDQ0OiBJSUlJICUgSUkgKyBJSUlJIC8gSWlJSTFJaUkgLyBvT08gLyBpMWlJMQogICBpZiA0NyAtIDQ3OiBJaUlJMUlpSSAlIElJIC4gSUlvb29PMG9vTzBvbyAqIGkxaUkxIC4gSUlJSQogIHBhcmFtcyBbICJzcWxfY29uZCIgXSA9ICIgYWN0aXZlID4gMCBhbmQgYXVkaW8gbGlrZSAnJSIgKyBhdWRpbyAuIGRlY29kZSAoICd1dGYtOCcgKSArICIlJyIKICBpZiB0YWIgPT0gJ3NlcmllcycgOgogICBPTzBPb08wME8wbyA9IElJaTExSWkxIFsgOiBdCiAgIGlmIDc5IC0gNzk6IGlpMUkxaWkxSWlJaTEgKiBvbwogICBpZiA4MCAtIDgwOiBJaTFJIC4gb09PICogSUkgLSBPT29Pb08wbzBvME9PCiAgIGlmIDYgLSA2OiBvbzBvIC8gSTEgKiBpaTFJMWlpMUlpSWkxICsgaWkxSTFpaTFJaUlpMSAvIEkxCiAgIElpMTExSSA9IE8wMDBvMDAwbzBPbyAoICJzZXJpZXMiICwgSUlpMTFJaTEgLCBbIF0gLCBbIF0gLCBbICJub21icmUiIF0gLCBwYXJhbXMgKQogICBJMUlpSWlJICggSWkxMTFJICwgVHJ1ZSAsIFRydWUgLCBGYWxzZSAsIHBhcmFtcyApCiAgZWxzZSA6CiAgIHBhcmFtcyBbICJhY3Rpb24iIF0gPSAncGVsaXNCeUxhbmcnCiAgIHBhcmFtcyBbICJzcWxfZ3JvdXAiIF0gPSAnIGdyb3VwX2lkICcKICAgcGFyYW1zIFsgInB1bnRvcyIgXSA9ICd0cnVlJwogICBwYXJhbXMgWyAiYW5ubyIgXSA9ICd0cnVlJwogICBpZiBwYXJhbXMgWyAiY19wYWdlIiBdID4gMSA6CiAgICBwYXJhbXMgWyAic3FsX2NvbmQiIF0gPSBwYXJhbXMgWyAic3FsX2NvbmQiIF0gKyAnIGFuZCAnICsgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBwYXJhbXMgWyAicGFnZSIgXSApCiAgICBpZiAyMiAtIDIyOiBJSUlJIC0gSUkgLSBJMSAtIG9vb09vTyArIEkxICUgSWlJSTFpMUkKICAgSWkxMTFJID0gTzAwMG8wMDBvME9vICggInBlbGlzIiAsCiBbICJwZWxpX2lkIiAsICJhdWRpbyIgLCAiJyciICwgInRhZ3MiICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAic3RyZnRpbWUoJyVZLSVtLSVkJyx1cGRhdGVkKSwgcHVudG9zLCBjYXRlZ29yeSwgYWN0aXZlLCB0bWRiIiAsCiAiZ3JvdXBfaWQiICwgImNvdW50KCopIiAsICJncm91cF9jb25jYXQodGFncywnIycpIiAsICJncm91cF9jb25jYXQoYXVkaW8sJyMnKSIKIF0gLCBbIF0gLCBbIF0gLCBbICJub21icmUiIF0gLCBwYXJhbXMgKQogICBPb29PMDBPT28wT09PICggSWkxMTFJICwgJ3BlbGlzJyAsIGluZm8gPSBwYXJhbXMgKQogICBpZiA4MiAtIDgyOiBJSSAtIG9vT29vTzBPT08gLyBvbyAvIElJIC4gT09vT29PMG8wbzBPTwogICBpZiA3NSAtIDc1OiBvbzBvCmRlZiBvT09PMG8gKCBwYXJhbXMgLCB0eXBlICkgOgogaWYgJ2xldHJhJyBpbiBwYXJhbXMgOgogIGkxaWkgPSBwYXJhbXMgWyAnbGV0cmEnIF0KIGVsc2UgOgogIGkxaWkgPSBOb25lCiBJMWlpMWlpaUkgPSB7ICdBJyA6ICd1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMTkyIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMTk4JyAsCiAnRScgOiAndW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIwMCBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIwMycgLAogJ0knIDogJ3VuaWNvZGUodXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpKSA+PSAyMDQgQU5EIHVuaWNvZGUodXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpKSA8PSAyMDcnICwKICdPJyA6ICd1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjEwIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjE0JyAsCiAnVScgOiAndW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIxNyBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIyMCcgfQogb29PT29vT08wME8gPSAnITAtOS4uJwogSUlpMUlpMWkxMTFpID0gJ3VuaWNvZGUodXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpKSA+PSA2NSBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDkwJwogaWYgdHlwZSA9PSAnc2VyaWUnIDoKICBvT29vID0gSUlpMTFJaTEKICBvT29vIC4gYXBwZW5kICggIkNBU0UgV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMTkyIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMTk4IFRoZW4gJ0EnV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjA0IEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjA3IFRoZW4gJ0knV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjAwIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjAzIFRoZW4gJ0UnV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjE3IEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjIwIFRoZW4gJ1UnV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjEwIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjE0IFRoZW4gJ08nIFdIRU4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDY1IEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gOTAgVEhFTiB1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkgRUxTRSAnITAtOS4uJyAgRU5EIGFsZmEgIiApCiAgSTFJaWlJSTExID0gJycKIGVsc2UgOgogIG9Pb28gPSBPME9vMG9PTwogIEkxSWlpSUkxMSA9ICdncm91cCBieSBncm91cF9pZCcKIGlmIG5vdCBpMWlpIDoKICBJSWkgPSAiIiAuIGpvaW4gKCBbICJXaGVuICIgKyBJMUlpaUlpICsgIiBUaGVuICciICsgaWlpMUlpSSArICInIiBmb3IgaWlpMUlpSSAsIEkxSWlpSWkgaW4gSTFpaTFpaWlJIC4gaXRlcml0ZW1zICggKSBdICkKICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoCiAic2VsZWN0IGFsZmEsIGNvdW50IChhbGZhKSBmcm9tIChzZWxlY3QgQ0FTRSAiICsgSUlpICsgIiBXSEVOICIgKyBJSWkxSWkxaTExMWkgKyAiIFRIRU4gdXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpIEVMU0UgJyEwLTkuLicgIEVORCBhbGZhLCBub21icmUsICIgKyB0eXBlICsgIl9pZCBmcm9tICIgKyB0eXBlICsgInMgd2hlcmUgYWN0aXZlID4gMCApIGdyb3VwIGJ5IGFsZmEgb3JkZXIgYnkgYWxmYSIgKQogIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogIG9Pb08wTzAwMDAwIC4gY2xvc2UgKCApCiAgaTFJaTExaSA9IFsgXQogIGZvciBJSUkxSTFpSTFJMWlJIGluIElpMTExSSA6CiAgIGkxaWkgPSBJSUkxSTFpSTFJMWlJIFsgMCBdCiAgIGlpaU8wMDBPbyA9IElJSTFJMWlJMUkxaUkgWyAxIF0KICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXNbL0NPTE9SXSAoJXMpJyAlICggaTFJaUkxaWlpICwgaTFpaSAsIGlpaU8wMDBPbyApCiAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCBjYXJhdHVsYSA9ICcnICkKICAgSTFJaWlpID0gJ3swfT9hY3Rpb249ezF9c0J5QVombGV0cmE9ezJ9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCB0eXBlICwgaTFpaSApCiAgIGlJaTFJaSA9IFRydWUKICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiAgdHJ5IDoKICAgaWYgNCAtIDQ6IElJICogSWlJSTFJaUkgLiBvb29Pb08gKiBJMQogICBPT28wMDBPbyAoIG8wbzAwMDBPMCApCiAgZXhjZXB0IDoKICAgcGFzcwogIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBlbHNlIDoKICBwYXJhbXMgWyAnc3FsX2dyb3VwJyBdID0gJyBncm91cF9pZCcKICBwYXJhbXMgWyAnYWN0aW9uJyBdID0gdHlwZSArICdzQnlBWicKICBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdID0gJycKICBwYXJhbXMgWyAnc3FsX2xpbWl0JyBdID0gJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkKICBwYXJhbXMgWyAnYW5ubycgXSA9ICd0cnVlJwogIHBhcmFtcyBbICJwdW50b3MiIF0gPSAidHJ1ZSIKICBwYXJhbXMgWyAibGV0cmEiIF0gPSBpMWlpCiAgcGFyYW1zIFsgJ2FjdGlvblBhcmFtcycgXSA9ICdsZXRyYT0nICsgaTFpaQogIGlmICdwYWdlJyBpbiBwYXJhbXMgYW5kICdjX3BhZ2UnIGluIHBhcmFtcyA6CiAgIG9vMCA9IGludCAoIHBhcmFtcyBbICdjX3BhZ2UnIF0gKQogICBwYXJhbXMgWyAnc3FsX2NvbmQnIF0gPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIHBhcmFtcyBbICdwYWdlJyBdICkgLiBkZWNvZGUgKCAndXRmLTgnICkKICAgcGFyYW1zIFsgImNfcGFnZSIgXSA9IG9vMAogICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogICBpZiBpMWlpIGluIEkxaWkxaWlpSSA6CiAgICBJMWlpMWlpaUkgWyBpMWlpIF0gPSBJMWlpMWlpaUkgWyBpMWlpIF0gKyAnIE9SJwogICBlbGlmIGkxaWkgPT0gb29PT29vT08wME8gOgogICAgSTFpaTFpaWlJIFsgaTFpaSBdID0gIkFORCIgLiBqb2luICggWyAiIE5PVCAoICIgKyBJMUlpaUlpICsgIikgIiBmb3IgaWlpMUlpSSAsIEkxSWlpSWkgaW4gSTFpaTFpaWlJIC4gaXRlcml0ZW1zICggKSBdICkgKyAiIEFORCBOT1QgKCIgKyBJSWkxSWkxaTExMWkgKyAiKSBPUiIKICAgZWxzZSA6CiAgICBJMWlpMWlpaUkgWyBpMWlpIF0gPSAnJwogICBPMG8wb29vbzAwID0gJycKICAgaWYgdHlwZSA9PSAncGVsaScgOgogICAgb09vbyA9IGlpSTExMTFJSWlpSQogICAgTzBvMG9vb28wMCA9ICcgZ3JvdXAgYnkgZ3JvdXBfaWQnCiAgICBpZiA4OSAtIDg5OiBJSW9vb08wb29PMG9vICsgaTFpSTEgLiBJaUlJMUlpSQogICAgaWYgNDUgLSA0NTogT09PCiAgIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKAogInNlbGVjdCAiICsgIiwiIC4gam9pbiAoIG9Pb28gKSArICIgZnJvbSAiICsgdHlwZSArICJzIHdoZXJlIGFjdGl2ZSA+IDAgQU5EICggIiArIEkxaWkxaWlpSSBbCiBpMWlpIF0gKyAiIHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSA9PSA/KSBhbmQgY2F0ZWdvcnkgbm90IGluICgnRG9jdW1lbnRhbCcsICdNdXNpY2EnKSBhbmQgIiArIHBhcmFtcyBbICdzcWxfY29uZCcgXSArICIgIiArIE8wbzBvb29vMDAgKyAiIG9yZGVyIGJ5IG5vbWJyZSBsaW1pdCAiICsgc3RyICggb29vMG9vT29PME9vICkgLAogKCBpMWlpICwgKSApCiAgIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogICBvT29PME8wMDAwMCAuIGNsb3NlICggKQogICBpZiB0eXBlID09ICdwZWxpJyA6CiAgICBPb29PMDBPT28wT09PICggSWkxMTFJICwgdHlwZSA9ICdwZWxpcycgLCBpbmZvID0gcGFyYW1zICkKICAgZWxzZSA6CiAgICBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdID0gJ2FsZmEgPicgKyBpMWlpCiAgICBJMUlpSWlJICggSWkxMTFJICwgVHJ1ZSAsIFRydWUgLCBGYWxzZSApCiAgZWxzZSA6CiAgIG9vMCA9IDEKICAgcGFyYW1zIFsgImNfcGFnZSIgXSA9IG9vMAogICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogICBpZiBpMWlpIGluIEkxaWkxaWlpSSA6CiAgICBJMWlpMWlpaUkgWyBpMWlpIF0gPSBJMWlpMWlpaUkgWyBpMWlpIF0gKyAnIE9SJwogICBlbGlmIGkxaWkgPT0gb29PT29vT08wME8gOgogICAgSTFpaTFpaWlJIFsgaTFpaSBdID0gIkFORCIgLiBqb2luICggWyAiIE5PVCAoICIgKyBJMUlpaUlpICsgIikgIiBmb3IgaWlpMUlpSSAsIEkxSWlpSWkgaW4gSTFpaTFpaWlJIC4gaXRlcml0ZW1zICggKSBdICkgKyAiIEFORCBOT1QgKCIgKyBJSWkxSWkxaTExMWkgKyAiKSBPUiIKICAgZWxzZSA6CiAgICBJMWlpMWlpaUkgWyBpMWlpIF0gPSAnJwogICBPMG8wb29vbzAwID0gJycKICAgaWYgdHlwZSA9PSAncGVsaScgOgogICAgb09vbyA9IGlpSTExMTFJSWlpSQogICAgTzBvMG9vb28wMCA9ICcgZ3JvdXAgYnkgZ3JvdXBfaWQnCiAgICBpZiAyOCAtIDI4OiBJaUlJMUlpSSArIEkxICUgaWkxSTFpaTFJaUlpMQogICBJSWlJaWkxSWlJMWkgLiBleGVjdXRlICgKICJzZWxlY3QgIiArICIsIiAuIGpvaW4gKCBvT29vICkgKyAiIGZyb20gIiArIHR5cGUgKyAicyB3aGVyZSBhY3RpdmUgPiAwIGFuZCBjYXRlZ29yeSBub3QgaW4gKCdEb2N1bWVudGFsJywgJ011c2ljYScpIEFORCAoICIgKyBJMWlpMWlpaUkgWwogaTFpaSBdICsgIiB1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkgPT0gPykgIiArIE8wbzBvb29vMDAgKyAiIG9yZGVyIGJ5IG5vbWJyZSBsaW1pdCAiICsgc3RyICggb29vMG9vT29PME9vICkgLAogKCBpMWlpICwgKSApCiAgIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogICBvT29PME8wMDAwMCAuIGNsb3NlICggKQogICBpZiB0eXBlID09ICdwZWxpJyA6CiAgICBPb29PMDBPT28wT09PICggSWkxMTFJICwgdHlwZSA9ICdwZWxpcycgLCBpbmZvID0gcGFyYW1zICkKICAgZWxzZSA6CiAgICBpZiAyNSAtIDI1OiBJSUlJIC4gSWkxSSAlIG8wMG9PMG9vME8wTzAgLyBvMDBvTzBvbzBPME8wIC4gSUlJSQogICAgSTFJaUlpSSAoIElpMTExSSAsIFRydWUgLCBUcnVlICwgRmFsc2UgLCBwYXJhbXMgKQogICAgaWYgODggLSA4ODogT09PIC8gSUkgLyBpaTFJMWlpMUlpSWkxIC0gSWkxSSAvIEkxCiAgICBpZiAxIC0gMTogT09vT29PMG8wbzBPTyAuIElpSUkxaTFJICogaWlJSWkxaTFJaWkgKyBpMWlJMQpkZWYgSTFJMWkxaTExSTFpICggb3B0aW9uICkgOgogSTFJSWlJMTFJSUkgPSBbIF0KIGlmICJTZXJpZXMiID09IG9wdGlvbiA6CiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIEZhdm9yaXRhcycgLCBvT09PME8wIDogJ2xpc3RmYXZzJyAsICdpY28nIDogJ2Zhdm9yaXRvcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1NlcmllcycgLCBvT09PME8wIDogSWlpMSAsICdpY28nIDogSWlpMSAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ1NlcmllcyBBbmltZScgLCBvT09PME8wIDogJ3Nlcmllc19hbmltZScgLCAnaWNvJyA6ICdzZXJpZXNfYW5pbWUnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnU2VyaWVzIERpYnVqb3MnICwgb09PTzBPMCA6ICdzZXJpZXNfZGlidWpvcycgLCAnaWNvJyA6ICdzZXJpZXNfZGlidWpvcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1NlcmllcyBSZXRybycgLCBvT09PME8wIDogJ3Nlcmllc19yZXRybycgLCAnaWNvJyA6ICdzZXJpZXNfcmV0cm8nICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnVGVsZW5vdmVsYXMnICwgb09PTzBPMCA6ICd0ZWxlbm92ZWxhcycgLCAnaWNvJyA6ICd0ZWxlbm92ZWxhcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1NlcmllcyBBLVonICwgb09PTzBPMCA6ICdzZXJpZXNCeUFaJyAsICdpY28nIDogSWlpMSAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIE90cm9zIElkaW9tYXMnICwgb09PTzBPMCA6ICdzZXJpZXNCeUxhbmcnICwgJ2ljbycgOiAnc2VyaWVzX290cm9zX2lkaW9tYXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTZXJpZXMgUmVjaWVudGVzJyAsIG9PT08wTzAgOiAndWx0aW1hc19zZXJpZXMnICwgJ2ljbycgOiAnc2VyaWVzX3JlY2llbnRlcycgLAogJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdNw6FzIFZpc3RhcycgLCBvT09PME8wIDogJ3Nlcmllc19tYXNfdmlzdGFzJyAsICdpY28nIDogJ3Nlcmllc19tYXNfdmlzdGFzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTWFzIFZpc3RhcyDDmmx0aW1vIE1lcycgLCBvT09PME8wIDogJ3Nlcmllc19tYXNfdmlzdGFzX21lcycgLCAnaWNvJyA6ICdzZXJpZXNfbWFzX3Zpc3Rhc19tZXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3NlcmllcycgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnQnVzY2FyIFNlcmllJyAsIG9PT08wTzAgOiAnc2VhcmNoU2VyaWUnICwgJ2ljbycgOiAnYnVzY2FyJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBlbGlmICJQZWxpcyIgPT0gb3B0aW9uIDoKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQZWxpcyBGYXZvcml0YXMnICwgb09PTzBPMCA6ICdsaXN0ZmF2cCcgLCAnaWNvJyA6ICdmYXZvcml0b3MnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQZWxpcyBBLVonICwgb09PTzBPMCA6ICdwZWxpc0J5QVonICwgJ2ljbycgOiAncGVsaXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnUGVsaXMgKEdlbmVybyknICwgb09PTzBPMCA6ICdsaXN0X2dlbmVyb3MnICwgJ2ljbycgOiAncGVsaXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQZWxpcyAoQcOxbyknICwgb09PTzBPMCA6ICdhbnlvJyAsICdpY28nIDogJ3BlbGlzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUGVsaXMgT3Ryb3MgSWRpb21hcycgLCBvT09PME8wIDogJ3BlbGlzQnlMYW5nJyAsICdpY28nIDogJ3BlbGlzX290cm9zX2lkaW9tYXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTYWdhcycgLCBvT09PME8wIDogJ3NhZ2FzJyAsICdpY28nIDogJ3NhZ2FzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ1RvcCBQZWxpcyAoQcOxbyknICwgb09PTzBPMCA6ICdhbnlvX3RvcCcgLCAnaWNvJyA6ICd0b3BfcGVsaXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnUGVsaXMgUmVjaWVudGVzJyAsIG9PT08wTzAgOiAndWx0aW1hc19wZWxpcycgLCAnaWNvJyA6ICdwZWxpc19yZWNpZW50ZXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnUGVsaXMgUmVjaWVudGVzIChBw7FvKScgLCBvT09PME8wIDogJ3VsdGltYXNfcGVsaXNfYW55bycgLCAnaWNvJyA6ICdwZWxpc19yZWNpZW50ZXNfYW55bycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ03DoXMgVmlzdGFzJyAsIG9PT08wTzAgOiAncGVsaXNfbWFzX3Zpc3RhcycgLCAnaWNvJyA6ICdwZWxpc19tYXNfdmlzdGFzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTcOhcyBWaXN0YXMgw5psdGltbyBNZXMnICwgb09PTzBPMCA6ICdwZWxpc19tYXNfdmlzdGFzX21lcycgLCAnaWNvJyA6ICdwZWxpc19tYXNfdmlzdGFzX21lcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0J1c2NhciBQZWxpJyAsIG9PT08wTzAgOiAnc2VhcmNoUGVsaScgLCAnaWNvJyA6ICdidXNjYXInICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIGVsaWYgIkRpYnVqb3MiID09IG9wdGlvbiA6CiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnRGlidWpvcyBGYXZvcml0b3MnICwgb09PTzBPMCA6ICdsaXN0ZmF2ZCcgLCAnaWNvJyA6ICdmYXZvcml0b3MnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnU2VyaWVzIERpYnVqb3MnICwgb09PTzBPMCA6ICdzZXJpZXNfZGlidWpvcycgLCAnaWNvJyA6ICdzZXJpZXNfZGlidWpvcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdQZWxpcyBEaWJ1am9zJyAsIG9PT08wTzAgOiAncGVsaV9pbmYnICwgJ2ljbycgOiAncGVsaXNfZGlidWpvcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdFc3BlY2lhbCBEaXNuZXknICwgb09PTzBPMCA6ICdzYWdhX2RldGFpbCZzYWdhPSVzJyAlIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggJ0VzcGVjaWFsIERpc25leScgKSAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vRDFNY3c0US5wbmcnICwKICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ1RvcCBQZWxpcyBEaWJ1am9zJyAsIG9PT08wTzAgOiAndG9wX3BlbGlfaW5mJyAsICdpY28nIDogJ3RvcF9wZWxpc19kaWJ1am9zJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUGVsaXMgRGlidWpvcyBSZWNpZW50ZXMnICwgb09PTzBPMCA6ICdsYXN0X3BlbGlfaW5mJyAsICdpY28nIDogJ2RpYnVqb3NfcmVjaWVudGVzJyAsCiAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdNw6FzIFZpc3RhcycgLCBvT09PME8wIDogJ3BlbGlzX2RpYnVqb3NfbWFzX3Zpc3RhcycgLCAnaWNvJyA6ICdwZWxpc19kaWJ1c19tYXNfdmlzdGFzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ03DoXMgVmlzdGFzIMOabHRpbW8gTWVzJyAsIG9PT08wTzAgOiAncGVsaXNfZGlidWpvc19tYXNfdmlzdGFzX21lcycgLCAnaWNvJyA6ICdwZWxpc19kaWJ1c19tYXNfdmlzdGFzX3VsdGltb19tZXMnICwKICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBlbGlmICJIZXJyYW1pZW50YXMiID09IG9wdGlvbiA6CiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTGltcGlhciBUZW1wb3JhbGVzJyAsIG9PT08wTzAgOiAnY2xlYW4nICwgJ2ljbycgOiAnbGltcGlhcicgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0NyZWFyIENvcGlhIEZhdm9yaXRvcycgLCBvT09PME8wIDogJ2NyZWF0ZUNvcHknICwgJ2ljbycgOiAnaGVycmFtaWVudGFzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUmVzdGF1cmFyIEZhdm9yaXRvcycgLCBvT09PME8wIDogJ3Jlc3RvcmVDb3B5JyAsICdpY28nIDogJ2hlcnJhbWllbnRhcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0FicmlyIEFqdXN0ZXMnICwgb09PTzBPMCA6ICdvcGVuU2V0dGluZ3MnICwgJ2ljbycgOiAnYWp1c3RlcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0luc3RhbGFyIEV4dGVuZGVkIEluZm8nICwgb09PTzBPMCA6ICdpbnN0YWxsJyAsICdvcHRpb25zJyA6ICcmb3B0aW9ucz1zY3JpcHQuZXh0ZW5kZWRpbmZvJyAsICdpY28nIDogJ2luc3RhbGFyJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSW5zdGFsYXIgcmVzb2x2ZXVybCcgLCBvT09PME8wIDogJ2luc3RhbGwnICwgJ29wdGlvbnMnIDogJyZvcHRpb25zPXNjcmlwdC5tb2R1bGUucmVzb2x2ZXVybCcgLCAnaWNvJyA6ICdpbnN0YWxhcicgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0luc3RhbGFyIFNpbXBsZSBEb3dubG9hZGVyJyAsIG9PT08wTzAgOiAnaW5zdGFsbCcgLCAnb3B0aW9ucycgOiAnJm9wdGlvbnM9c2NyaXB0Lm1vZHVsZS5zaW1wbGUuZG93bmxvYWRlcicgLCAnaWNvJyA6ICdpbnN0YWxhcicgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0luc3RhbGFyIEFkZCBUbyBMaWInICwgb09PTzBPMCA6ICdpbnN0YWxsJyAsICdvcHRpb25zJyA6ICcmb3B0aW9ucz1jb250ZXh0LmFkZHRvbGliJyAsICdpY28nIDogJ2luc3RhbGFyJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSW5zdGFsYXIgQWdyZWdvIENvbnRlbmlkbycgLCBvT09PME8wIDogJ2luc3RhbGwnICwgJ29wdGlvbnMnIDogJyZvcHRpb25zPWNvbnRleHQuYWdyZWdhY29udGVuaWRvJyAsICdpY28nIDogJ2luc3RhbGFyJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSW5zdGFsYXIgQ29tbW9uIFBsdWdpbiBDYWNoZScgLCBvT09PME8wIDogJ2luc3RhbGwnICwgJ29wdGlvbnMnIDogJyZvcHRpb25zPXNjcmlwdC5jb21tb24ucGx1Z2luLmNhY2hlJyAsICdpY28nIDogJ2luc3RhbGFyJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSW5zdGFsYXIgUGx1Z2luIFlvdVR1YmUnICwgb09PTzBPMCA6ICdpbnN0YWxsJyAsICdvcHRpb25zJyA6ICcmb3B0aW9ucz1wbHVnaW4udmlkZW8ueW91dHViZScgLCAnaWNvJyA6ICdpbnN0YWxhcicgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogZWxpZiAiQW5pbWUiID09IG9wdGlvbiA6CiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ1BlbGlzIEFuaW1lJyAsIG9PT08wTzAgOiAncGVsaV9hbmltZScgLCAnaWNvJyA6ICdwZWxpc19hbmltZScgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdTZXJpZXMgQW5pbWUnICwgb09PTzBPMCA6ICdzZXJpZXNfYW5pbWUnICwgJ2ljbycgOiAnc2VyaWVzX2FuaW1lX21lbnUnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTZXJpZXMgUmVjaWVudGVzJyAsIG9PT08wTzAgOiAndWx0aW1hc19zZXJpZXNfYW5pbWUnICwgJ2ljbycgOiAnc2VyaWVzX3JlY2llbnRlc19hbmltZScgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogZWxpZiAiRG9jdW1lbnRhbCIgPT0gb3B0aW9uIDoKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnRG9jdW1lbnRhbGVzIEEvWicgLCBvT09PME8wIDogJ3Nlcmllc19kb2N1bWVudGFsZXMnICwgJ2ljbycgOiAnZG9jdW1lbnRhbGVzYXonICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdEb2N1bWVudGFsZXMgUmVjaWVudGVzJyAsIG9PT08wTzAgOiAndWx0aW1vc19kb2N1bWVudGFsZXMnICwgJ2ljbycgOiAnZG9jdW1lbnRhbGVzX3JlY2llbnRlcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogZWxpZiAiTXVzaWNhIiA9PSBvcHRpb24gOgogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ011c2ljYSBBL1onICwgb09PTzBPMCA6ICdzZXJpZXNfbXVzaWNhJyAsICdpY28nIDogJ211c2ljYWF6JyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTXVzaWNhIFJlY2llbnRlJyAsIG9PT08wTzAgOiAndWx0aW1hc19tdXNpY2FzJyAsICdpY28nIDogJ211c2ljYV9yZWNpZW50ZScgLAogJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBpZiA2NyAtIDY3OiBJMUlpSTFJSUkxMWkKIGVsc2UgOgogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0Zhdm9yaXRvcycgLCBvT09PME8wIDogJ2xpc3RmYXYnICwgJ2ljbycgOiAnZmF2b3JpdG9zJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgTzAwbzAwTzAwME8gKCBJMUlJaUkxMUlJSSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTWVudSBTZXJpZXMnICwgb09PTzBPMCA6ICdzZXJpZXNfbWVudScgLCAnaWNvJyA6ICdtZW51X3NlcmllJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTWVudSBQZWxpcycgLCBvT09PME8wIDogJ3BlbGlzX21lbnUnICwgJ2ljbycgOiAnbWVudV9wZWxpJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ01lbnUgRGlidWpvcycgLCBvT09PME8wIDogJ2RpYnVqb3NfbWVudScgLCAnaWNvJyA6ICdtZW51X2RpYnVqb3MnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnTWVudSBBbmltZScgLCBvT09PME8wIDogJ2FuaW1lX21lbnUnICwgJ2ljbycgOiAnbWVudV9hbmltZScgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ01lbnUgTXVzaWNhJyAsIG9PT08wTzAgOiAnbXVzaWNhX21lbnUnICwgJ2ljbycgOiAnbWVudV9tdXNpY2EnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdNZW51IERvY3VtZW50YWxlcycgLCBvT09PME8wIDogJ2RvY3VtZW50YWxlc19tZW51JyAsICdpY28nIDogJ21lbnVfZG9jdW1lbnRhbGVzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIFJlY2llbnRlcycgLCBvT09PME8wIDogJ3VsdGltYXNfc2VyaWVzJyAsICdpY28nIDogJ3Nlcmllc19yZWNpZW50ZXMnICwKICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ1BlbGlzIFJlY2llbnRlcycgLCBvT09PME8wIDogJ3VsdGltYXNfcGVsaXMnICwgJ2ljbycgOiAncGVsaXNfcmVjaWVudGVzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ1BlbGlzIFJlY2llbnRlcyAoQcOxbyknICwgb09PTzBPMCA6ICd1bHRpbWFzX3BlbGlzX2FueW8nICwgJ2ljbycgOiAncGVsaXNfcmVjaWVudGVzX2FueW8nICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQZWxpcyBEaWJ1am9zIFJlY2llbnRlcycgLCBvT09PME8wIDogJ2xhc3RfcGVsaV9pbmYnICwgJ2ljbycgOiAnZGlidWpvc19yZWNpZW50ZXMnICwKICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnQnVzY2FyIFBlbGknICwgb09PTzBPMCA6ICdzZWFyY2hQZWxpJyAsICdpY28nIDogJ2J1c2NhcicgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0J1c2NhciBTZXJpZScgLCBvT09PME8wIDogJ3NlYXJjaFNlcmllJyAsICdpY28nIDogJ2J1c2NhcicgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIGlmIDk0IC0gOTQ6IG9vT29vTzBPT08KICBpZiA5NyAtIDk3OiBJSW9vb08wb29PMG9vIC0gSWkxSSAlIEkxSWlJMUlJSTExaSArIG9vCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSGVycmFtaWVudGFzJyAsIG9PT08wTzAgOiAnaGVycmFtaWVudGFzX21lbnUnICwgJ2ljbycgOiAnaGVycmFtaWVudGFzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiByZXR1cm4gSTFJSWlJMTFJSUkKIGlmIDU1IC0gNTU6IGlpSUlpMWkxSWlpIC4gSUlJSSAvIG9vMG8gLiBpMWlJMSAqIElJb29vTzBvb08wb28KIGlmIDU2IC0gNTY6IG8wMG9PMG9vME8wTzAgKyBJaUlJMUlpSSAuIG9vT29vTzBPT08KIGlmIDc4IC0gNzg6IGlpSUlpMWkxSWlpIC8gT09PIC0gSUlvb29PMG9vTzBvbyAvIElJSUkgLyBpMWlJMSAvIG9PTwpkZWYgb29pMTFpaUlpaSAoICkgOgogSTFJSWlJMTFJSUkgPSBbIF0KIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1NlcmllcycgLCBvT09PME8wIDogSWlpMSAsICdpY28nIDogSWlpMSAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTZXJpZXMgQS1aJyAsIG9PT08wTzAgOiAnc2VyaWVzQnlBWicgLCAnaWNvJyA6IElpaTEgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIEluZmFudGlsZXMnICwgb09PTzBPMCA6ICdzZXJpZXNfZGlidWpvcycgLCAnaWNvJyA6ICdkaWJ1am9zJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTZXJpZXMgUmV0cm8nICwgb09PTzBPMCA6ICdzZXJpZXNfcmV0cm8nICwgJ2ljbycgOiAncmV0cm8nICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0Zhdm9yaXRvcycgLCBvT09PME8wIDogJ2xpc3RmYXYnICwgJ2ljbycgOiAnZmF2b3JpdG9zJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQZWxpcyBBLVonICwgb09PTzBPMCA6ICdwZWxpc0J5QVonICwgJ2ljbycgOiAncGVsaXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1BlbGlzIChHZW5lcm8pJyAsIG9PT08wTzAgOiAnbGlzdF9nZW5lcm9zJyAsICdpY28nIDogJ3BlbGlzX2dlbmVybycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUGVsaXMgKEHDsW8pJyAsIG9PT08wTzAgOiAnYW55bycgLCAnaWNvJyA6ICdwZWxpc19hbnlvJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQZWxpcyBEaWJ1am9zJyAsIG9PT08wTzAgOiAncGVsaV9pbmYnICwgJ2ljbycgOiAncGVsaXNfZGlidWpvcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnVG9wIFBlbGlzIChBw7FvKScgLCBvT09PME8wIDogJ2FueW9fdG9wJyAsICdpY28nIDogJ3RvcF9wZWxpcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnVG9wIFBlbGlzIERpYnVqb3MnICwgb09PTzBPMCA6ICd0b3BfcGVsaV9pbmYnICwgJ2ljbycgOiAndG9wX2RpYnVqb3MnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1BlbGlzIERpYnVqb3MgUmVjaWVudGVzJyAsIG9PT08wTzAgOiAnbGFzdF9wZWxpX2luZicgLCAnaWNvJyA6ICdkaWJ1am9zX3JlY2llbnRlcycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUGVsaXMgUmVjaWVudGVzJyAsIG9PT08wTzAgOiAndWx0aW1hc19wZWxpcycgLCAnaWNvJyA6ICdwZWxpc19yZWNpZW50ZXMnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1NlcmllcyBSZWNpZW50ZXMnICwgb09PTzBPMCA6ICd1bHRpbWFzX3NlcmllcycgLCAnaWNvJyA6ICdzZXJpZXNfcmVjaWVudGVzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTYWdhcycgLCBvT09PME8wIDogJ3NhZ2FzJyAsICdpY28nIDogJ3NhZ2FzJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdCdXNjYXIgUGVsaScgLCBvT09PME8wIDogJ3NlYXJjaFBlbGknICwgJ2ljbycgOiAnYnVzY2FyJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdCdXNjYXIgU2VyaWUnICwgb09PTzBPMCA6ICdzZWFyY2hTZXJpZScgLCAnaWNvJyA6ICdidXNjYXInICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIGlmIDQgLSA0OiBPT29Pb08wbzBvME9PIC0gb28wbyAtIGkxaUkxIC0gSWkxSSAlIElJb29vTzBvb08wb28KIGlmIDM4IC0gMzg6IG8wMG9PMG9vME8wTzAgJSBJSW9vb08wb29PMG9vIC4gSUkgLiBvb29Pb08gLSBpMWlJMSAvIG8wMG9PMG9vME8wTzAKIHJldHVybiBJMUlJaUkxMUlJSQogaWYgNjggLSA2ODogb29vT29PCiBpZiA1MCAtIDUwOiBvMDBvTzBvbzBPME8wIC0gSUkgLiBPT08gLyBJMQpkZWYgaUlpMWlpSWlJaSAoIGZ1bmN0aW9uX21lbnUgKSA6CiBpZiAyNSAtIDI1OiBpMWlJMSAqIElJSUkgKiBJMSAlIElpSUkxaTFJCiBJMUlJaUkxMUlJSSA9IGZ1bmN0aW9uX21lbnUKIGkxSWkxMWkgPSBbIF0KIGZvciBJSUlJaTExaSBpbiBJMUlJaUkxMUlJSSA6CiAgaWYgSUlJSWkxMWkgWyAnaWNvJyBdIC4gbG93ZXIgKCApIC4gc3RhcnRzd2l0aCAoICdodHRwJyApIDoKICAgSTFJaUkxMTExMTExID0gSUlJSWkxMWkgWyAnaWNvJyBdCiAgZWxzZSA6CiAgIEkxSWlJMTExMTExMSA9ICclcy8lcy5wbmcnICUgKCBpaWkxMWkxSUlpICwgSUlJSWkxMWkgWyAnaWNvJyBdICkKICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSAnW0NPTE9SICVzXVtCXSVzWy9CXVsvQ09MT1JdJyAlICggaTFJaUkxaWlpICwgSUlJSWkxMWkgWyAndGl0bGUnIF0gKSAsIGNhcmF0dWxhID0gSTFJaUkxMTExMTExICwKIHBvc3RlciA9ICclcy8lcy5qcGcnICUgKCBpaWkxMWkxSUlpICwgSUlJSWkxMWkgWyAnZmFuJyBdICkgKQogIGlmICdvcHRpb25zJyBpbiBJSUlJaTExaSA6CiAgIEkxSWlpaSA9ICd7MH0/ezF9PXsyfXszfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgb09PTzBPMCAsIElJSUlpMTFpIFsgb09PTzBPMCBdICwgSUlJSWkxMWkgWyAnb3B0aW9ucycgXSApCiAgZWxzZSA6CiAgIEkxSWlpaSA9ICd7MH0/ezF9PXsyfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgb09PTzBPMCAsIElJSUlpMTFpIFsgb09PTzBPMCBdICkKICBpSWkxSWkgPSBUcnVlCiAgaWYgJ2lzU2FnYScgaW4gSUlJSWkxMWkgYW5kIElJSUlpMTFpIFsgJ2lzU2FnYScgXSA9PSAndHJ1ZScgOgogICBPb09PME9PMG8wTyAuIGFkZENvbnRleHRNZW51SXRlbXMgKCBJSTFJaTExaTFJaTFJICggYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBJSUlJaTExaSBbICd0aXRsZScgXSApICkgKQogIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgaUlpMUlpICkgKQogdHJ5IDoKICBpZiA0OSAtIDQ5OiBJSUlJIC4gb28gJSBJSUlJICUgT09vT29PMG8wbzBPTyAlIE9PTyAuIElJCiAgT09vMDAwT28gKCBPME8wMDAwMDBPbyApCiBleGNlcHQgOgogIHBhc3MKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKIGlmIDk1IC0gOTU6IElJIC8gaTFpSTEgJSBJaTFJCmRlZiBPT28wMDBPbyAoIHZpZXcgKSA6CiBpZiB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnRW5hYmxlVmlldycgKSApID09ICd0cnVlJyBhbmQgdmlldyAhPSAnbm9uZScgOgogIGlmIDQ4IC0gNDg6IG8wMG9PMG9vME8wTzAgJSBpaTFJMWlpMUlpSWkxICogSTFJaUkxSUlJMTFpICUgSTEgKyBvb29Pb08gKyBJSQogIGlmIDM4IC0gMzg6IGlpMUkxaWkxSWlJaTEKICBpZiA4MyAtIDgzOiBJaTFJCiAgaWYgNDggLSA0ODogaWlJSWkxaTFJaWkKICBpZiAzNCAtIDM0OiBpaUlJaTFpMUlpaSAuIG9vICUgb29Pb29PME9PTwogIGlmIDkgLSA5OiBJMUlpSTFJSUkxMWkgJSBJMUlpSTFJSUkxMWkgKyBvT08gKyBvT08KICBpZiAzNiAtIDM2OiBpaUlJaTFpMUlpaSAqIGkxaUkxCiAgaWYgNTIgLSA1MjogSUlvb29PMG9vTzBvbyAvIElJb29vTzBvb08wb28KICBpZiA2NyAtIDY3OiBpaTFJMWlpMUlpSWkxCiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIkNvbnRhaW5lci5TZXRWaWV3TW9kZSglcykiICUgc3RyICggdmlldyApICkKICBpZiAxMDAgLSAxMDA6IElpMUkgKiBpMWlJMSAlIGlpMUkxaWkxSWlJaTEgLyBJSW9vb08wb29PMG9vICogSTFJaUkxSUlJMTFpIC4gT09PCmRlZiBPMDBvMDBPMDAwTyAoIGNhdGVnb3JpZXMgKSA6CiBJaTExaTFpSWlJSTExID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ2ZhdlNhZ2EnICkgKQogaWYgSWkxMWkxaUlpSUkxMSAhPSAnJyBhbmQgSWkxMWkxaUlpSUkxMSAhPSAnZmFsc2UnIDoKICBpZiAzNiAtIDM2OiBvbyAvIG9vIC0gT09vT29PMG8wbzBPTyAtIEkxCiAgb29vID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIElpMTFpMWlJaUlJMTEgKSAsIGljb25JbWFnZSA9ICdodHRwczovL2kuaW1ndXIuY29tL0pOUzZBOE0ucG5nJyApCiAgY2F0ZWdvcmllcyAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIElpMTFpMWlJaUlJMTEgKSAsIG9PT08wTzAgOiAnc2FnYV9kZXRhaWwmc2FnYT0lcycgJSBJaTExaTFpSWlJSTExICwKICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vSk5TNkE4TS5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyAsICdpc1NhZ2EnIDogJ3RydWUnIH0gKQogIGlmIDI5IC0gMjk6IGkxaUkxCiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAic2VsZWN0IGVzcGVjaWFsIGZyb20gdmVyc2lvbiIgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogaWYgSWkxMTFJIFsgMCBdIGlzIG5vdCBOb25lIGFuZCBJaTExMUkgWyAwIF0gWyAwIF0gaXMgbm90IE5vbmUgOgogIE9PbzAwT08wb28gPSBJaTExMUkgWyAwIF0gWyAwIF0gLiBzcGxpdCAoICcjJyApCiAgSTFpSUkxSUkxaUlJID0gMAogIGZvciBpaWkxSWlJIGluIHhyYW5nZSAoIDAgLCBsZW4gKCBPT28wME9PMG9vICkgLyAyICkgOgogICBpZiAxMDAgLSAxMDA6IE9Pb09vTzBvMG8wT08gLiBvMDBvTzBvbzBPME8wCiAgIGlmIDQxIC0gNDE6IGlpSUlpMWkxSWlpIC4gSWkgLSBvbyAvIG9vICogSWkKICAgY2F0ZWdvcmllcyAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6IE9PbzAwT08wb28gWyBpaWkxSWlJICogMiBdICwgb09PTzBPMCA6ICdzYWdhX2RldGFpbCZzYWdhPSVzJyAlIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggT09vMDBPTzBvbyBbIGlpaTFJaUkgKiAyIF0gKSAsICdpY28nIDogT09vMDBPTzBvbyBbICggaWlpMUlpSSAqIDIgKSArIDEgXSAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgIGlmIDc3IC0gNzc6IE9Pb09vTzBvMG8wT08KZGVmIG9vbzBPMDAwb09vMCAoIHBhcmFtcyApIDoKIGlmIDcyIC0gNzI6IGlpSUlpMWkxSWlpICUgbzAwb08wb28wTzBPMCAqIG9vICsgSUlvb29PMG9vTzBvbyAvIElJCiBpSTFpaUlpMWlpMSA9IHhibWMgLiBnZXRDb25kVmlzaWJpbGl0eSAoICdTeXN0ZW0uSGFzQWRkb24oJXMpJyAlIHBhcmFtcyBbICdvcHRpb25zJyBdICkKIGlmIGlJMWlpSWkxaWkxIDoKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCAnRWwgYWRkb24geWEgZXN0YWJhIGluc3RhbGFkbycgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA1MDAwICkKIGVsc2UgOgogIGlmIDk1IC0gOTU6IE9Pb09vTzBvMG8wT08gLiBvbzBvCiAgaWYgNjAgLSA2MDogb28wbyAqIElpSUkxSWlJICsgb29Pb29PME9PTyAlIG9vT29vTzBPT08KICBpZiA5MyAtIDkzOiBJSSAlIG9vMG8gLSBJMUlpSTFJSUkxMWkgLyBvb09vb08wT09PIC8gb09PCiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggJ3hibWMuaW5zdGFsbGFkZG9uKCVzKScgJSBwYXJhbXMgWyAnb3B0aW9ucycgXSAsIFRydWUgKQogIGlmIDgzIC0gODM6IEkxCiAgaWYgNDYgLSA0NjogSUlvb29PMG9vTzBvbyAtIElJSUkgKyBPT08gJSBpMWlJMQogIGlmIDExIC0gMTE6IElJICsgb28wbwpkZWYgTzBPT29PbyAoIHBhcmFtcyApIDoKIHBhcmFtcyBbICdzcWxfY29uZCcgXSA9ICdhY3RpdmUgPiAwICBhbmQgZ3JvdXBfaWQgPSAnICsgcGFyYW1zIFsgJ2dyb3VwSWQnIF0KIElpMTExSSA9IE8wMDBvMDAwbzBPbyAoICJwZWxpcyIgLAogWyAicGVsaV9pZCIgLCAiYXVkaW8iICwgIicnIiAsICJ0YWdzIiAsICInJyIgLCAiJyciICwgImxpbmsiICwgIidxdWFsaXR5JyIgLCAibm9tYnJlIiAsICJhbm5vIiAsICJzaW5vcHNpcyIgLAogImNhcmF0dWxhIiAsICJwb3N0ZXIiICwgInN0cmZ0aW1lKCclWS0lbS0lZCcsdXBkYXRlZCksIHB1bnRvcywgY2F0ZWdvcnksIGFjdGl2ZSwgdG1kYiIKIF0gLCBbIF0gLCBbIF0gLCBbICd0YWdzIGFzYycgXSAsIHBhcmFtcyApCiB4Ym1jcGx1Z2luIC4gc2V0Q29udGVudCAoIGlpSUlpaUlJMSAsICJtb3ZpZXMiICkKIE9PbzAwME9vICggT08wTzAgKQogaWYgbGVuICggSWkxMTFJICkgPiAwIDoKICBpMUlpMTFpID0gWyBdCiAgZm9yIElJSTFJMWlJMUkxaUkgaW4gSWkxMTFJIDoKICAgT28wMG8wTzBvT28wID0gWyBdCiAgIG9Pb28wMG8wMDBvbyA9IElJSTFJMWlJMUkxaUkgWyA4IF0KICAgaWYgaXNpbnN0YW5jZSAoIG9Pb28wMG8wMDBvbyAsIHVuaWNvZGUgKSA6CiAgICBvT29vMDBvMDAwb28gPSBvT29vMDBvMDAwb28gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgSTFJaUkxMTExMTExID0gSUlJMUkxaUkxSTFpSSBbIDExIF0KICAgSWkxMUkxMUlpMTFJID0gSUlJMUkxaUkxSTFpSSBbIDEyIF0KICAgaUlJSTExMTExID0gaXRoaWwgLiBJMWkxICggSUlJMUkxaUkxSTFpSSBbIDYgXSApCiAgIGlmIGlJSUkxMTExMSA9PSAnZHJpdmUnIG9yIGlJSUkxMTExMSA9PSAnRHJpdmUnIG9yIGlJSUkxMTExMSA9PSAndXB0b2JveCcgb3IgaUlJSTExMTExID09ICdVcHRvYm94JyA6CiAgICBpSUlJMTExMTEgPSAnVGVhbScKICAgaWYgaUlJSTExMTExID09ICdnb2ZpbGUnIG9yIGlJSUkxMTExMSA9PSAnR29maWxlJyBvciBpSUlJMTExMTEgPT0gJ25vZmlsZScgb3IgaUlJSTExMTExID09ICdOb2ZpbGUnIG9yIGlJSUkxMTExMSA9PSAncGl4ZWxkcmFpbicgb3IgaUlJSTExMTExID09ICdQaXhlbGRyYWluJyBvciBpSUlJMTExMTEgPT0gJ2RlZ29vJyBvciBpSUlJMTExMTEgPT0gJ0RlZ29vJyBvciBpSUlJMTExMTEgPT0gJ2ZpbGVzY2RuJyBvciBpSUlJMTExMTEgPT0gJ0ZpbGVzY2RuJyA6CiAgICBpSUlJMTExMTEgPSAnW0NPTE9SIG9yYW5nZXJlZF1bQl1IMjY1Wy9CXVsvQ09MT1JdJwogICBpZiBpSUlJMTExMTEgPT0gJ3VwdG9zdHJlYW0nIG9yIGlJSUkxMTExMSA9PSAnVXB0b3N0cmVhbScgb3IgaUlJSTExMTExID09ICdhcmNoaXZlJyBvciBpSUlJMTExMTEgPT0gJ0FyY2hpdmUnIDoKICAgIGlJSUkxMTExMSA9ICdbQ09MT1IgZ29sZF1bQl1Ub3BbL0JdWy9DT0xPUl0nCiAgIG9vbzBvMDBPbzBvMCA9ICdbQ09MT1IgJXNdU2Vydmlkb3I6ICVzIFsvQ09MT1JdJyAlICggSTExMWkxMUkxSSAsIGlJSUkxMTExMSApCiAgIGlmIElJSTFJMWlJMUkxaUkgWyAzIF0gOgogICAgb29vMG8wME9vMG8wID0gb29vMG8wME9vMG8wICsgJ1tDT0xPUiAlc10gKCVzKSBbL0NPTE9SXScgJSAoIGlpaTFJSSAsIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAzIF0gLiByZXBsYWNlICggJyMnICwgJyAnICkgKSApCiAgIGlmIG5vdCBJMUlpSTExMTExMTEgOgogICAgSTFJaUkxMTExMTExID0gTm9uZQogICBpZiBub3QgSWkxMUkxMUlpMTFJIDoKICAgIElpMTFJMTFJaTExSSA9IE5vbmUKICAgaWYgSUlJMUkxaUkxSTFpSSBbIDEgXSAhPSAnRVMnIDoKICAgIG9vbzBvMDBPbzBvMCA9IG9vbzBvMDBPbzBvMCArICcgW0NPTE9SICVzXSglcylbL0NPTE9SXSAnICUgKCBvME8wb08wICwgc3RyICggSUlJMUkxaUkxSTFpSSBbIDEgXSAuIHJlcGxhY2UgKCAnIycgLCAnICcgKSApICkKICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gb29vMG8wME9vMG8wICwgY2FyYXR1bGEgPSBJMUlpSTExMTExMTEgLAogcG9zdGVyID0gSWkxMUkxMUlpMTFJICwgdmlkZW8gPSB7ICd0aXRsZScgOiBvT29vMDBvMDAwb28gLCAneWVhcicgOiBJSUkxSTFpSTFJMWlJIFsgOSBdICwgJ3Bsb3QnIDogSUlJMUkxaUkxSTFpSSBbIDEwIF0gfSAsIGlzUGxheWFibGUgPSBUcnVlICkKICAgaWYgMzggLSAzODogaTFpSTEgKyBJSQogICBJMUlpaWkgPSAnezB9P2FjdGlvbj17MX0maWQ9ezJ9Jmxpbj17M30mdGl0PXs0fSZ0eXBlPXs1fScgLiBmb3JtYXQgKCBJMWlJMTFJICwgJ3BsYXknICwgSUlJMUkxaUkxSTFpSSBbIDAgXSAsIElJSTFJMWlJMUkxaUkgWyA2IF0gLAogYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKAogdW5pY29kZSAoIG9Pb28wMG8wMDBvbyAsIG9vb09PTyApIC4gZW5jb2RlICgKIG9vb09PTyApICkgLCAncGVsaXMnICkKICAgaWYgbGVuICggSUlJMUkxaUkxSTFpSSApID4gMTYgYW5kIElJSTFJMWlJMUkxaUkgWyAxNiBdID09IDIgYW5kIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnYWN0aXZlRG93bmxvYWQnICkgOgogICAgT28wMG8wTzBvT28wIC4gYXBwZW5kICgKIElpSUlpSSAoIGlkID0gJyVzLSVzLSVzJyAlICggc3RyICggSUlJMUkxaUkxSTFpSSBbIDAgXSApICwgc3RyICggSUlJMUkxaUkxSTFpSSBbIDEgXSApICwgSUlJMUkxaUkxSTFpSSBbIDIgXSApICwgdHlwZSA9ICdwZWxpcycgLAogbm9tYnJlID0gb09vbzAwbzAwMG9vICwKIHVybCA9IElJSTFJMWlJMUkxaUkgWyA2IF0gLAogY2FyYXR1bGEgPSBJMUlpSTExMTExMTEgLCBwb3N0ZXIgPSBJaTExSTExSWkxMUkgLCByZW1vdmUgPSBGYWxzZSApICkKICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggT28wMG8wTzBvT28wICkKICAgaWYgODQgLSA4NDogSUkgLSBJaTFJCiAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgRmFsc2UgKSApCiAgeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggaWlJSWlpSUkxICwgaTFJaTExaSAsIGxlbiAoIGkxSWkxMWkgKSApCiAgeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKICBpZiA1OCAtIDU4OiBpaTFJMWlpMUlpSWkxICogSUlJSSAvIE9PTwpkZWYgSWkxMWlJSTFpICggYWN0aW9uVmFsdWUgLCByb3cgLCB1cmwgLCBwYXRoICkgOgogaTFJMUkxMTExMSA9IE5vbmUKIG9Pb29Pb08wME9vID0geyB9CiBpZiAyNiAtIDI2OiBPT08gLSBPT08gKyBJMUlpSTFJSUkxMWkKIHRyeSA6CiAgaUlpaTExaWlpaUkxICwgbzAwbzAwMG8wb29PTyA9IGFub3IgLiBJMWkxSTFpSTExSSAoCiAnc2VsZWN0IGZpbGVzLmlkRmlsZSwgaWRQYXRoLCBzdHJGaWxlbmFtZSwgcGxheUNvdW50LCBpVmlkZW9XaWR0aHx8IngifHxpVmlkZW9IZWlnaHQsaVN0cmVhbVR5cGUgZnJvbSBmaWxlcyBsZWZ0IGpvaW4gc3RyZWFtZGV0YWlscyBvbiBzdHJlYW1kZXRhaWxzLmlkRmlsZSA9IGZpbGVzLmlkRmlsZSB3aGVyZSBpZFBhdGg9KFNlbGVjdCBpZFBhdGggZnJvbSBwYXRoIHdoZXJlIHN0clBhdGg9InBsdWdpbjovL3BsdWdpbi52aWRlby5wYWxhbnRpci8iKSBhbmQgc3RyRmlsZW5hbWUgbGlrZSAicGx1Z2luOi8vcGx1Z2luLnZpZGVvLnBhbGFudGlyLz9hY3Rpb249JXMmJXMiJyAlICgKIGFjdGlvblZhbHVlICwgcGF0aCApICkKICBmb3IgbzBvT28wME8wT29PIGluIG8wMG8wMDBvMG9vT08gOgogICBpZiAxIC0gMTogb29vT29PCiAgIG9Pb29Pb08wME9vIFsgbzBvT28wME8wT29PIFsgMiBdIF0gPSBvMG9PbzAwTzBPb08KIGV4Y2VwdCA6CiAgcGFzcwogIGlmIDk0IC0gOTQ6IG9vICUgSWkxSSAvIG9vICogSUlJSSArIG9vT29vTzBPT08KIGlmIGFjdGlvblZhbHVlID09IElpSUlpMUkxSWkgb3IgYWN0aW9uVmFsdWUgPT0gJ2xpc3RfdGVtcCcgb3IgYWN0aW9uVmFsdWUgPT0gJ3ZpZXdfdGVtcCcgOgogIGlmIHVybCBpbiBvT29vT29PMDBPbyA6CiAgIGlmIG9Pb29Pb08wME9vIFsgdXJsIF0gWyAzIF0gPiAwIDoKICAgIGkxSTFJMTExMTEgPSBJaW9vbyAoIG9Pb29Pb08wME9vIFsgdXJsIF0gWyAwIF0gLCBvT29vT29PMDBPbyBbIHVybCBdIFsgMSBdICwgb09vb09vTzAwT28gWyB1cmwgXSBbIDIgXSAsIEZhbHNlICkKICAgZWxzZSA6CiAgICBpMUkxSTExMTExID0gSWlvb28gKCBvT29vT29PMDBPbyBbIHVybCBdIFsgMCBdICwgb09vb09vTzAwT28gWyB1cmwgXSBbIDEgXSAsIG9Pb29Pb08wME9vIFsgdXJsIF0gWyAyIF0gLCBUcnVlICkKICAgIGlmIDYwIC0gNjA6IGkxaUkxICsgSWkKICAgIGlmIDc5IC0gNzk6IElJSUkgLyBJSSAlIEkxSWlJMUlJSTExaSAtIEkxSWlJMUlJSTExaQogICAgaWYgMzIgLSAzMjogb09PCiAgICBpZiAxNiAtIDE2OiBJaUlJMWkxSSAlIG9vb09vTyAqIG9PTyArIG9vT29vTzBPT08KICBlbHNlIDoKICAgaWYgMzIgLSAzMjogb28gLiBvT08gKiBvMDBvTzBvbzBPME8wICsgSWlJSTFJaUkgLyBvb29Pb08gLiBJaQogICBpMUkxSTExMTExID0gSWlvb28gKCAwICwgT09vMG9vICwgdXJsICwgVHJ1ZSApCiByZXR1cm4gaTFJMUkxMTExMQogaWYgODIgLSA4MjogSUlJSSArIElpIC8gb28wbwogaWYgOTggLSA5ODogbzAwb08wb28wTzBPMCAuIG9vT29vTzBPT08gJSBPT29Pb08wbzBvME9PICUgSWkxSSArIElpICUgb09PCmRlZiBPb29PMDBPT28wT09PICggcm93cyA9IFsgXSAsIHR5cGUgPSBJaWkxICwgY2FyYXQgPSBOb25lICwgcG9zdGUgPSBOb25lICwgaW5mbyA9IHsgfSApIDoKIHRyeSA6CiAgaWYgdHlwZSA9PSBJaWkxIDoKICAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAiZXBpc29kZXMiICkKICAgT09vMDAwT28gKCBpaTFpMWlpMUkgKQogIGVsc2UgOgogICB4Ym1jcGx1Z2luIC4gc2V0Q29udGVudCAoIGlpSUlpaUlJMSAsICJtb3ZpZXMiICkKICAgT09vMDAwT28gKCBPTzBPMCApCiBleGNlcHQgOgogIHBhc3MKICBpZiA5MiAtIDkyOiBJaSAvIG9vMG8KIG9Pb29Pb08wME9vID0geyB9CiBpZiAzOCAtIDM4OiBJaTFJICogb28gKyBvT08KIGlmIDcyIC0gNzI6IG8wMG9PMG9vME8wTzAgKyBvb29Pb08KIGlmIDE4IC0gMTg6IEkxSWlJMUlJSTExaSAvIE9PTwogaWYgMzIgLSAzMjogSTEgJSBvbyAlIG8wMG9PMG9vME8wTzAKIGlmIDQgLSA0OiBpMWlJMSAtIGkxaUkxCiBpZiAxIC0gMTogSTFJaUkxSUlJMTFpIC0gSUkgKiBvT08gKyBJSSAlIE9Pb09vTzBvMG8wT08KIGlmIDQzIC0gNDM6IE9Pb09vTzBvMG8wT08gLiBvMDBvTzBvbzBPME8wICUgSWkgLyBJaTFJIC8gbzAwb08wb28wTzBPMAogaWYgNjYgLSA2Njogb29vT29PCiBpZiA2NiAtIDY2OiBpMWlJMSAuIE9PTyAtIEkxSWlJMUlJSTExaQogSTFpMTExSSA9IHsgfQogaTFJaTExaSA9IFsgXQogaUkxMWlJSUlpID0gJycKIGlmIGxlbiAoIHJvd3MgKSA+IDAgOgogIGZvciBJSUkxSTFpSTFJMWlJIGluIHJvd3MgOgogICBpZiAyNCAtIDI0OiBJaTFJCiAgIE9vMDBvME8wb09vMCA9IFsgXQogICBvbzBvbyA9IGxlbiAoIElJSTFJMWlJMUkxaUkgKQogICBJaWlpID0gSUlJMUkxaUkxSTFpSSBbIDAgXQogICBJMU9PID0gSUlJMUkxaUkxSTFpSSBbIDEgXQogICBpaWlJID0gSUlJMUkxaUkxSTFpSSBbIDIgXQogICBPT29vbzBPbyA9IElJSTFJMWlJMUkxaUkgWyA2IF0KICAgaWYgMzcgLSAzNzogSTFJaUkxSUlJMTFpICUgb29Pb29PME9PTyAtIElJb29vTzBvb08wb28gKiBJaUlJMUlpSSAuIGlpSUlpMWkxSWlpICUgb28KICAgaWYgNzMgLSA3Mzogb29Pb29PME9PTyAqIElpSUkxSWlJICsgSUlJSSAqIGlpSUlpMWkxSWlpICUgb09PCiAgIGlmIDMzIC0gMzM6IE9Pb09vTzBvMG8wT08KICAgaWYgNzkgLSA3OTogSTFJaUkxSUlJMTFpIC0gSWkxSQogICBvb28wbzAwT28wbzAgPSBJSUkxSTFpSTFJMWlJIFsgOCBdCiAgIElJaUkxMUlpID0gSUlJMUkxaUkxSTFpSSBbIDkgXQogICBJMUkxaWlJSTEgPSBJSUkxSTFpSTFJMWlJIFsgMTAgXQogICBJMUlpSTExMTExMTEgPSBJSUkxSTFpSTFJMWlJIFsgMTEgXQogICBJaTExSTExSWkxMUkgPSBJSUkxSTFpSTFJMWlJIFsgMTIgXQogICBpZiBvb28wbzAwT28wbzAgOgogICAgb09vbzAwbzAwMG9vID0gb29vMG8wME9vMG8wCiAgICBpZiB0eXBlID09ICdzZXJpZXMnIDoKICAgICBvb28wbzAwT28wbzAgPSAnW0NPTE9SICVzXSAlc1svQ09MT1JdJyAlICggTzAwTzAwMCAsIG9vbzBvMDBPbzBvMCApCiAgICBlbHNlIDoKICAgICBvb28wbzAwT28wbzAgPSAnW0NPTE9SICVzXSAlc1svQ09MT1JdJyAlICggTzBPT08gLCBvb28wbzAwT28wbzAgKQogICBlbHNlIDoKICAgIG9Pb28wMG8wMDBvbyA9IHN0ciAoIEkxT08gKSArICd4JyArIGlpaUkKICAgIG9vbzBvMDBPbzBvMCA9IHN0ciAoIEkxT08gKSArICd4JyArIGlpaUkKICAgaUkxMWlJSUlpID0gb09vbzAwbzAwMG9vCiAgIGlmIDYwIC0gNjA6IEkxICogb29vT29PICsgSUlvb29PMG9vTzBvbwogICBpZiBvbzBvbyA+PSAyMSA6CiAgICBpSTFpaTEgPSBJSUkxSTFpSTFJMWlJIFsgMjAgXQogICAgaWYgNzMgLSA3MzogSWkKICAgZWxzZSA6CiAgICBpSTFpaTEgPSBJSUkxSTFpSTFJMWlJIFsgMyBdCiAgICBpZiA1IC0gNTogSTFJaUkxSUlJMTFpIC4gaTFpSTEgKyBPT08gJSBJMSAuIEkxSWlJMUlJSTExaSAtIGlpMUkxaWkxSWlJaTEKICAgaWYgaUkxaWkxIGFuZCBpSTFpaTEgIT0gJ05vbmUnIDoKICAgIG9vbzBvMDBPbzBvMCA9IG9vbzBvMDBPbzBvMCArICdbQ09MT1IgJXNdICglcykgWy9DT0xPUl0nICUgKCBpaWkxSUkgLCBzdHIgKCAiICIgLiBqb2luICggc2V0ICggaUkxaWkxIC4gc3BsaXQgKCAnIycgKSApICkgKSApCiAgIGlmIGluZm8gYW5kICdwdW50b3MnIGluIGluZm8gYW5kIElJSTFJMWlJMUkxaUkgWyAxNCBdIDoKICAgIG9vbzBvMDBPbzBvMCA9IG9vbzBvMDBPbzBvMCArICcgWyVzXSAnICUgc3RyICggSUlJMUkxaUkxSTFpSSBbIDE0IF0gKQogICBpZiBpbmZvIGFuZCAnYW5ubycgaW4gaW5mbyBhbmQgSUlpSTExSWkgOgogICAgb29vMG8wME9vMG8wID0gb29vMG8wME9vMG8wICsgJyAoJXMpICcgJSBzdHIgKCBJSWlJMTFJaSApCiAgICBpZiAxMyAtIDEzOiBJSSArIG9vMG8gLSBvbzBvCiAgIGlmIG9vMG9vID49IDIyIGFuZCB0eXBlID09ICdwZWxpcycgOgogICAgaWYgNDYgLSA0NjogSTFJaUkxSUlJMTFpCiAgICBvMG9PbzBPME8wTyA9IHNldCAoIElJSTFJMWlJMUkxaUkgWyAyMSBdIC4gc3BsaXQgKCAnIycgKSApCiAgICBpZiA4NSAtIDg1OiBJaUlJMWkxSSAvIEkxSWlJMUlJSTExaSAuIEkxICogb09PICsgaTFpSTEKICAgIGlmICggJ0VTJyBub3QgaW4gbzBvT28wTzBPME8gYW5kIGxlbiAoIG8wb09vME8wTzBPICkgPT0gMSApIG9yIGxlbiAoIG8wb09vME8wTzBPICkgPj0gMiA6CiAgICAgb29vMG8wME9vMG8wID0gb29vMG8wME9vMG8wICsgJyBbQ09MT1IgJXNdKCVzKVsvQ09MT1JdICcgJSAoIG8wTzBvTzAgLCBzdHIgKCAiICIgLiBqb2luICggbzBvT28wTzBPME8gKSApICkKICAgaWYgaW5mbyBhbmQgJ2RhdGUnIGluIGluZm8gOgogICAgb29vMG8wME9vMG8wID0gb29vMG8wME9vMG8wICsgJyAoJXMpICcgJSBzdHIgKCBJSUkxSTFpSTFJMWlJIFsgMTMgXSApCiAgIGlmIG5vdCBJMUlpSTExMTExMTEgOgogICAgSTFJaUkxMTExMTExID0gY2FyYXQKICAgaWYgbm90IElpMTFJMTFJaTExSSA6CiAgICBJaTExSTExSWkxMUkgPSBwb3N0ZQogICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBvb28wbzAwT28wbzAgLCBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsCiBwb3N0ZXIgPSBJaTExSTExSWkxMUkgLCB2aWRlbyA9IHsgJ3RpdGxlJyA6IG9vbzBvMDBPbzBvMCAsICd5ZWFyJyA6IElJaUkxMUlpICwgJ3Bsb3QnIDogSTFJMWlpSUkxIH0gLCBpc1BsYXlhYmxlID0gVHJ1ZSApCiAgIGlmIDE1IC0gMTU6IGlpSUlpMWkxSWlpCiAgIGlmIGlzaW5zdGFuY2UgKCBvT29vMDBvMDAwb28gLCB1bmljb2RlICkgOgogICAgb09vbzAwbzAwMG9vID0gb09vbzAwbzAwMG9vIC4gZW5jb2RlICggJ3V0Zi04JyApCiAgICBpZiA1MyAtIDUzOiBPT29Pb08wbzBvME9PCiAgIElJSTFpID0gdHlwZQogICBpZiA0IC0gNDogSTFJaUkxSUlJMTFpIC4gbzAwb08wb28wTzBPMCAuIElpMUkgLyBvbzBvIC0gSTFJaUkxSUlJMTFpICogSUlvb29PMG9vTzBvbwogICBPb29PTzAwMDBvT29PID0gJ3BsYXknCiAgIGlmIDk3IC0gOTc6IG9PTwogICBpZiBvbzBvbyA+IDIwIGFuZCBJSUkxSTFpSTFJMWlJIFsgMTkgXSA+IDEgOgogICAgT29vT08wMDAwb09vTyA9IElpSUlpMUkxSWkKICAgIGlmIDUyIC0gNTI6IGkxaUkxICogSWlJSTFJaUkgKyBJSW9vb08wb29PMG9vICUgaWkxSTFpaTFJaUlpMQogICAgaWYgSUlJMUkxaUkxSTFpSSBbIDE4IF0gOgogICAgIElJSTFpID0gSUlJMWkgKyAnJmdyb3VwSWQ9JyArIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAxOCBdICkKICAgICBpZiA0NyAtIDQ3OiBPT29Pb08wbzBvME9PICogaWlJSWkxaTFJaWkgLyBvb09vb08wT09PICUgb29vT29PIC8gSWlJSTFJaUkgLyBJaUlJMUlpSQogICBJMUlpaWkgPSAnezB9P2FjdGlvbj17MX0maWQ9ezJ9Jmxpbj17M30mdGl0PXs0fSZ0eXBlPXs1fScgLiBmb3JtYXQgKCBJMWlJMTFJICwgT29vT08wMDAwb09vTyAsIElpaWkgLCBPT29vbzBPbyAsCiBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoCiB1bmljb2RlICggb09vbzAwbzAwMG9vICwgb29vT09PICkgLiBlbmNvZGUgKAogb29vT09PICkgKSAsIElJSTFpICkKICAgaWYgNzMgLSA3MzogaWlJSWkxaTFJaWkgLyBJSUlJIC8gSWlJSTFpMUkgLSBJSSAvIElJCiAgIGlmIHR5cGUgPT0gJ3BlbGlzJyBhbmQgeGJtYyAuIGdldENvbmRWaXNpYmlsaXR5ICggJ1N5c3RlbS5IYXNBZGRvbihzY3JpcHQuZXh0ZW5kZWRpbmZvKScgKSBhbmQgSUlJMUkxaUkxSTFpSSBbIDE3IF0gYW5kIElJSTFJMWlJMUkxaUkgWyAxNyBdIC4gc3RhcnRzd2l0aCAoICdodHRwczovL3d3dy50aGVtb3ZpZWRiLm9yZycgKSA6CiAgICBPbzAwbzBPMG9PbzAgLiBhcHBlbmQgKCAoICJFeHRlbmRlZEluZm8iICwgIlhCTUMuUnVuU2NyaXB0KHNjcmlwdC5leHRlbmRlZGluZm8saW5mbz1leHRlbmRlZGluZm8saWQ9JXMsbmFtZT0lcykiICUgKCBzdHIgKCBJSUkxSTFpSTFJMWlJIFsgMTcgXSAuIHNwbGl0ICggJy8nICkgWyAtIDEgXSAuIHNwbGl0ICggJy0nICkgWyAwIF0gKSAsIG9Pb28wMG8wMDBvbyApICkgKQogICAgaWYgNDkgLSA0OTogb29Pb29PME9PTyArIElpIC0gbzAwb08wb28wTzBPMCAuIElpSUkxSWlJIC0gSWlJSTFpMUkgLiBvT08KICAgaTFJMUlpID0gSWkxMWlJSTFpICggT29vT08wMDAwb09vTyAsIElJSTFJMWlJMUkxaUkgLCBJMUlpaWkgLCAnaWQ9JyArIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAwIF0gKSArICclJyApCiAgIGlmIDE1IC0gMTU6IElJSUkgKyBvb09vb08wT09PCiAgIGlmIGkxSTFJaSA6CiAgICBPbzAwbzBPMG9PbzAgLiBhcHBlbmQgKCBpMUkxSWkgKQogICAgaWYgNzMgLSA3Mzogb28wbyAqIG8wMG9PMG9vME8wTzAgKiBJaTFJICogb28wbyAuIGkxaUkxIC0gb29vT29PCiAgIE9vMDBvME8wb09vMCAuIGFwcGVuZCAoCiBPTzBvME8wICggaWQgPSAnJXMtJXMtJXMnICUgKCBzdHIgKCBJaWlpICkgLCBzdHIgKCBJMU9PICkgLCBpaWlJICkgLCB0eXBlID0gdHlwZSAsIG5vbWJyZSA9IG9vbzBvMDBPbzBvMCAsCiB1cmwgPSBJMUlpaWkgLAogY2FyYXR1bGEgPSBJMUlpSTExMTExMTEgLCBwb3N0ZXIgPSBJaTExSTExSWkxMUkgLCBmYXYgPSBpMTFpaWkgLCBmYXZMaXRlcmFsID0gJycgKSApCiAgIGlmIHR5cGUgPT0gJ3NlcmllcycgOgogICAgT28wMG8wTzBvT28wIC4gYXBwZW5kICgKIE9PMG8wTzAgKCBpZCA9ICclcy0lcy0lcycgJSAoIHN0ciAoIElpaWkgKSAsIHN0ciAoIEkxT08gKSAsIGlpaUkgKSAsIHR5cGUgPSB0eXBlICwgbm9tYnJlID0gb29vMG8wME9vMG8wICwgdXJsID0gSTFJaWlpICwKIGNhcmF0dWxhID0gSTFJaUkxMTExMTExICwgcG9zdGVyID0gSWkxMUkxMUlpMTFJICwgZmF2ID0gaTExICwgdGV4dCA9ICdTZXJpZXMnICwgZmF2TGl0ZXJhbCA9ICdzJyApICkKICAgIGlmIDk0IC0gOTQ6IGlpSUlpMWkxSWlpICUgSUlJSSAuIEkxSWlJMUlJSTExaSAvIElpMUkgKyBPT29Pb08wbzBvME9PIC0gSUkKICAgIGlmIDY5IC0gNjk6IElpIC4gSWkgLSBpMWlJMQogICAgaWYgNzMgLSA3MzogSWlJSTFJaUkgLiBvbzBvIC0gSTEgLyBJMSAlIG9vMG8gLiBJaUlJMWkxSQogICAgaWYgNTcgLSA1NzogbzAwb08wb28wTzBPMCAqIElJb29vTzBvb08wb28gLSBJMUlpSTFJSUkxMWkKICAgIGlmIDI3IC0gMjc6IG9vMG8gKiBJSUlJICogb29vT29PIC8gSTEgLSBpaTFJMWlpMUlpSWkxCiAgICBpZiA3MCAtIDcwOiBJaSAqIElpSUkxaTFJICogSWkxSSArIEkxICUgT09PIC4gb28KICAgaWYgbGVuICggSUlJMUkxaUkxSTFpSSApID4gMTUgYW5kICdEaWJ1am9zJyBpbiBJSUkxSTFpSTFJMWlJIFsgMTUgXSA6CiAgICBpZiA4MCAtIDgwOiBvMDBvTzBvbzBPME8wIC8gSUlJSQogICAgT28wMG8wTzBvT28wIC4gYXBwZW5kICgKIE9PMG8wTzAgKCBpZCA9ICclcy0lcy0lcycgJSAoIHN0ciAoIElpaWkgKSAsIHN0ciAoIEkxT08gKSAsIGlpaUkgKSAsIHR5cGUgPSB0eXBlICwgbm9tYnJlID0gb29vMG8wME9vMG8wICwKIHVybCA9IEkxSWlpaSAsCiBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsIHBvc3RlciA9IElpMTFJMTFJaTExSSAsIGZhdiA9IG9vSUlJSSAsIHRleHQgPSAnRGlidWpvcycgLCBmYXZMaXRlcmFsID0gJ2QnICkgKQogICBlbHNlIDoKICAgIE9vMDBvME8wb09vMCAuIGFwcGVuZCAoCiBPTzBvME8wICggaWQgPSAnJXMtJXMtJXMnICUgKCBzdHIgKCBJaWlpICkgLCBzdHIgKCBJMU9PICkgLCBpaWlJICkgLCB0eXBlID0gdHlwZSAsIG5vbWJyZSA9IG9vbzBvMDBPbzBvMCAsCiB1cmwgPSBJMUlpaWkgLAogY2FyYXR1bGEgPSBJMUlpSTExMTExMTEgLCBwb3N0ZXIgPSBJaTExSTExSWkxMUkgLCBmYXYgPSBJaWlJaTExaUlJSTEgLCB0ZXh0ID0gJ1BlbGlzJyAsIGZhdkxpdGVyYWwgPSAncCcgKSApCiAgICBpZiAzMCAtIDMwOiBvb29Pb08gLSBJSW9vb08wb29PMG9vIC0gbzAwb08wb28wTzBPMCArIG9vMG8gLyBvbyAtIEkxCiAgICBpZiAyNyAtIDI3OiBJSUlJIC0gSUkgKyBvb29Pb08gLyBJSSAuIG9vT29vTzBPT08KICAgaWYgSUlJMUkxaUkxSTFpSSBbIDE2IF0gPT0gMiBhbmQgX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdhY3RpdmVEb3dubG9hZCcgKSBhbmQgT29vT08wMDAwb09vTyAhPSBJaUlJaTFJMUlpIDoKICAgIE9vMDBvME8wb09vMCAuIGFwcGVuZCAoCiBJaUlJaUkgKCBpZCA9ICclcy0lcy0lcycgJSAoIHN0ciAoIElpaWkgKSAsIHN0ciAoIEkxT08gKSAsIGlpaUkgKSAsIHR5cGUgPSB0eXBlICwgbm9tYnJlID0gb09vbzAwbzAwMG9vICwKIHVybCA9IE9Pb29vME9vICwKIGNhcmF0dWxhID0gSTFJaUkxMTExMTExICwgcG9zdGVyID0gSWkxMUkxMUlpMTFJICwgcmVtb3ZlID0gRmFsc2UgKSApCiAgIE9vT08wT08wbzBPIC4gYWRkQ29udGV4dE1lbnVJdGVtcyAoIE9vMDBvME8wb09vMCApCiAgIGlmIDMwIC0gMzA6IGkxaUkxICUgSTFJaUkxSUlJMTFpCiAgIGlmIDk5IC0gOTk6IG8wMG9PMG9vME8wTzAgLyBPT08KICAgaWYgMTMgLSAxMzogSWlJSTFpMUkgLiBJaTFJIC8gaWlJSWkxaTFJaWkKICAgaWYgMzEgLSAzMTogSUkKICAgaWYgMzcgLSAzNzogb09PIC4gaWkxSTFpaTFJaUlpMSAvIElpSUkxSWlJIC0gaWkxSTFpaTFJaUlpMSAqIG8wMG9PMG9vME8wTzAKICAgaWYgT29vT08wMDAwb09vTyA9PSBJaUlJaTFJMUlpIDoKICAgIGlJaTFJaSA9IFRydWUKICAgZWxzZSA6CiAgICBpSWkxSWkgPSBGYWxzZQogICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKICAgaWYgNTEgLSA1MTogSTFJaUkxSUlJMTFpIC0gT09PICsgaWlJSWkxaTFJaWkKICAgaWYgMjAgLSAyMDogSUlJSSAtIG8wMG9PMG9vME8wTzAgKiBvbyAtIG9vb09vTwogICBpZiA0IC0gNDogb28gJSBJSUlJICogaWkxSTFpaTFJaUlpMSAqIG9PTwogICBpZiA0MCAtIDQwOiBJSSArIEkxSWlJMUlJSTExaSAlIE9Pb09vTzBvMG8wT08gLSBvb29Pb08KICAgaWYgNTYgLSA1Njogb29vT29PIC8gbzAwb08wb28wTzBPMAogICBpZiA3MCAtIDcwOiBJaUlJMUlpSQogICBpZiA3NiAtIDc2OiBJaTFJICUgSTEgJSBPT08gLiBvMDBvTzBvbzBPME8wIC4gb28wbyAtIEkxSWlJMUlJSTExaQogICBpZiA1OSAtIDU5OiBPT29Pb08wbzBvME9PICUgSWlJSTFpMUkgKiBvbzBvICogSTFJaUkxSUlJMTFpIC0gSWlJSTFJaUkKICAgaWYgOTggLSA5ODogaWlJSWkxaTFJaWkgKyBJMUlpSTFJSUkxMWkgLyBvb29Pb08KICBpZiBsZW4gKCByb3dzICkgPj0gb29vMG9vT29PME9vIDoKICAgaWYgJ2NfcGFnZScgaW4gaW5mbyBhbmQgJ2FjdGlvbicgaW4gaW5mbyBhbmQgJ2FjdGlvblBhcmFtcycgaW4gaW5mbyA6CiAgICBpSUkgPSBpbnQgKCBpbmZvIFsgJ2NfcGFnZScgXSApCiAgICBpSUkgPSBpSUkgKyAxCiAgICB0cnkgOgogICAgIGlJMTFpSUlJaSA9IGlJMTFpSUlJaSAuIGVuY29kZSAoICd1dGYtOCcgLCAnaWdub3JlJyApCiAgICBleGNlcHQgKCBVbmljb2RlRW5jb2RlRXJyb3IgLCBVbmljb2RlRGVjb2RlRXJyb3IgKSA6CiAgICAgcGFzcwogICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gJ1DDoWdpbmEgU2lndWllbnRlICglcykgPicgJSBzdHIgKCBpSUkgKSApCiAgICBJMUlpaWkgPSAnezB9P3sxfT17Mn0mY19wYWdlPXszfSZwYWdlPXs0fSZ7NX0nIC4gZm9ybWF0ICggSTFpSTExSSAsIG9PT08wTzAgLCBpbmZvIFsgJ2FjdGlvbicgXSAsIHN0ciAoIGlJSSApICwKIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICgKICJub21icmUgPiAnIiArIGlJMTFpSUlJaSArICInIiApICwgaW5mbyBbICdhY3Rpb25QYXJhbXMnIF0gKQogICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBUcnVlICkgKQogICAgaWYgODYgLSA4Njogb09PCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiA1NyAtIDU3OiBJSUlJIC0gb28wbyAqIGkxaUkxICsgaWlJSWkxaTFJaWkgJSBJaUlJMWkxSQogaWYgMjcgLSAyNzogSTEgKyBJMUlpSTFJSUkxMWkgLiBvMDBvTzBvbzBPME8wIC0gSUkKIGlmIDIzIC0gMjM6IElJIC4gaWlJSWkxaTFJaWkgKyBpaTFJMWlpMUlpSWkxIC8gbzAwb08wb28wTzBPMCArIElJb29vTzBvb08wb28KZGVmIEkxSWlJaUkgKCByb3dzICwgY2F0ZWdvcnkgPSBOb25lICwgbGFuZyA9IE5vbmUgLCBkYXRlID0gTm9uZSAsIHBhcmFtcyA9IHsgfSApIDoKIGkxSWkxMWkgPSBbIF0KIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAidHZzaG93cyIgKQogIE9PbzAwME9vICggb08wTzBvMG9vTyApCiBleGNlcHQgOgogIHBhc3MKICBpZiA3MiAtIDcyOiBJSUlJICogSWlJSTFJaUkgKyBPT29Pb08wbzBvME9PCiAgaWYgODUgLSA4NTogSTEgLiBPT29Pb08wbzBvME9PCiBmb3IgSUlJMUkxaUkxSTFpSSBpbiByb3dzIDoKICBJSWlJMWlJSTFpaWkgPSBbIF0KICBPb09vT29vMDAwMG8gPSBJSUkxSTFpSTFJMWlJIFsgMCBdCiAgaUkxMWlJSUlpID0gSUlJMUkxaUkxSTFpSSBbIDEgXQogIEkxMWlpaUkxSWlJID0gSUlJMUkxaUkxSTFpSSBbIDIgXQogIE9vTzBPbyA9ICcnCiAgTzBPb09vMDAwME9vbyA9ICcnCiAgbzBvbyA9ICcnCiAgaWYgNTAgLSA1MDogSWkxSSAqIG9vMG8gJSBpMWlJMSAqIG9vMG8KICBpZiBjYXRlZ29yeSBhbmQgSUlJMUkxaUkxSTFpSSBbIDEwIF0gIT0gJ0dlbmVyYWwnIGFuZCBJSUkxSTFpSTFJMWlJIFsgMTAgXSAhPSAnUGVsaWN1bGEnIDoKICAgTzBPb09vMDAwME9vbyA9ICdbQ09MT1IgJXNdKCVzKSBbL0NPTE9SXScgJSAoIElJSWkxMTExaUkgLCBJSUkxSTFpSTFJMWlJIFsgMTAgXSAuIHJlcGxhY2UgKCAnIycgLCAnLCAnICkgKQogIGlmIGxhbmcgOgogICBvMG9PbzBPME8wTyA9IHNldCAoIElJSTFJMWlJMUkxaUkgWyA5IF0gLiBzcGxpdCAoICcjJyApICkKICAgaWYgKCAnRVMnIG5vdCBpbiBvMG9PbzBPME8wTyBhbmQgbGVuICggbzBvT28wTzBPME8gKSA9PSAxICkgb3IgbGVuICggbzBvT28wTzBPME8gKSA+PSAyIDoKICAgIE9vTzBPbyA9ICdbQ09MT1IgJXNdKCVzKSBbL0NPTE9SXScgJSAoIG8wTzBvTzAgLCBJSUkxSTFpSTFJMWlJIFsgOSBdIC4gcmVwbGFjZSAoICcjJyAsICcgJyApICkKICBpZiBkYXRlIDoKICAgbzBvbyA9ICdbQ09MT1IgJXNdKCVzKVsvQ09MT1JdJyAlICggaWlJSWlpaUkxMSAsIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAxMSBdICkgKQogIGlmIEkxMWlpaUkxSWlJIGFuZCBJSUkxSTFpSTFJMWlJIFsgOCBdID09ICdOJyA6CiAgIG9vMG9vbzBPT09PbyA9IGl0aGlsIC4gSWkxSUlpSTExaUkxICggSTExaWlpSTFJaUkgKQogICBpZiBvbzBvb28wT09PT28gPT0gJ3l0JyA6CiAgICBJaTFJaUkgPSBpdGhpbCAuIG9PME9vMDAgKCBJMTFpaWlJMUlpSSApCiAgICBmb3IgaWlpMUlpSSBpbiB4cmFuZ2UgKCAwICwgbGVuICggSWkxSWlJICkgKSA6CiAgICAgaWYgbGVuICggSWkxSWlJICkgPD0gMSA6CiAgICAgIE9vbzAwTyA9ICcnCiAgICAgZWxzZSA6CiAgICAgIE9vbzAwTyA9ICIgKCIgKyBzdHIgKCBpaWkxSWlJICsgMSApICsgIikiCiAgICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXMgWy9DT0xPUl0gJXMgJXMgJXMnICUgKCBpMUlpSTFpaWkgLCBpSTExaUlJSWkgKyBPb28wME8gLCBPb08wT28gLCBPME9vT28wMDAwT29vICwgbzBvbyApCiAgICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsCiBwb3N0ZXIgPSBJSUkxSTFpSTFJMWlJIFsgNyBdICwgdmlkZW8gPSB7ICd0aXRsZScgOiBJSUkxSTFpSTFJMWlJIFsgMyBdICwgJ3llYXInIDogSUlJMUkxaUkxSTFpSSBbIDQgXSAsICdwbG90JyA6IElJSTFJMWlJMUkxaUkgWyA1IF0gfSApCiAgICAgaWYgNjEgLSA2MTogSWkxSQogICAgIGlmIHhibWMgLiBnZXRDb25kVmlzaWJpbGl0eSAoICdTeXN0ZW0uSGFzQWRkb24oc2NyaXB0LmV4dGVuZGVkaW5mbyknICkgYW5kIElJSTFJMWlJMUkxaUkgWyAxMiBdIGFuZCBJSUkxSTFpSTFJMWlJIFsgMTIgXSAuIHN0YXJ0c3dpdGggKCAnaHR0cHM6Ly93d3cudGhlbW92aWVkYi5vcmcnICkgOgogICAgICBpZiAyMiAtIDIyOiBJMUlpSTFJSUkxMWkgLiBvbzBvIC0gaWkxSTFpaTFJaUlpMSAuIGlpMUkxaWkxSWlJaTEgKiBJaUlJMWkxSSAvIG8wMG9PMG9vME8wTzAKICAgICAgSUlpSTFpSUkxaWlpIC4gYXBwZW5kICggKCAiRXh0ZW5kZWRJbmZvIiAsCiAiWEJNQy5SdW5TY3JpcHQoc2NyaXB0LmV4dGVuZGVkaW5mbyxpbmZvPWV4dGVuZGVkdHZpbmZvLGlkPSVzLG5hbWU9JXMpIiAlICgKIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAxMiBdIC4gc3BsaXQgKCAnLycgKSBbIC0gMSBdIC4gc3BsaXQgKCAnLScgKSBbIDAgXSApICwgaUkxMWlJSUlpICkgKSApCiAgICAgIGlmIDY3IC0gNjc6IG8wMG9PMG9vME8wTzAKICAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCB1cmwgPSBJaTFJaUkgWyBpaWkxSWlJIF0gLAogY2FyYXR1bGEgPSBJSUkxSTFpSTFJMWlJIFsgNiBdICwgcG9zdGVyID0gSUlJMUkxaUkxSTFpSSBbIDcgXSApICkKICAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSWkxSWlJIFsgaWlpMUlpSSBdICwKIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gLCBmYXYgPSBpMTEgLAogdGV4dCA9ICdTZXJpZXMnICwgZmF2TGl0ZXJhbCA9ICdzJyApICkKICAgICBpZiAnRGlidWpvcycgaW4gSUlJMUkxaUkxSTFpSSBbIDEwIF0gOgogICAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSWkxSWlJIFsgaWlpMUlpSSBdICwKIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gLCBmYXYgPSBvb0lJSUkgLAogdGV4dCA9ICdEaWJ1am9zJyAsIGZhdkxpdGVyYWwgPSAnZCcgKSApCiAgICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggSUlpSTFpSUkxaWlpICkKICAgICBpMUlpMTFpIC4gYXBwZW5kICggKCBJaTFJaUkgWyBpaWkxSWlJIF0gLCBPb09PME9PMG8wTyAsIFRydWUgKSApCiAgIGVsc2UgOgogICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXMgWy9DT0xPUl0gJXMgJXMgJXMnICUgKCBpMUlpSTFpaWkgLCBpSTExaUlJSWkgLCBPb08wT28gLCBPME9vT28wMDAwT29vICwgbzBvbyApCiAgICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgY2FyYXR1bGEgPSBJSUkxSTFpSTFJMWlJIFsgNiBdICwKIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gLCB2aWRlbyA9IHsgJ3RpdGxlJyA6IElJSTFJMWlJMUkxaUkgWyAzIF0gLCAneWVhcicgOiBJSUkxSTFpSTFJMWlJIFsgNCBdICwgJ3Bsb3QnIDogSUlJMUkxaUkxSTFpSSBbIDUgXSB9ICkKICAgIEkxSWlpaSA9ICd7MH0/ezF9PXZpZXdfc2VyaWUmc2VyaWVfaWQ9ezJ9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBvT09PME8wICwgT29Pb09vbzAwMDBvICkKICAgIGlmIDcxIC0gNzE6IG9PTyAuIEkxSWlJMUlJSTExaSArIEkxICogb28gKyBpaTFJMWlpMUlpSWkxCiAgICBpZiB4Ym1jIC4gZ2V0Q29uZFZpc2liaWxpdHkgKCAnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC5leHRlbmRlZGluZm8pJyApIGFuZCBJSUkxSTFpSTFJMWlJIFsgMTIgXSBhbmQgSUlJMUkxaUkxSTFpSSBbIDEyIF0gLiBzdGFydHN3aXRoICggJ2h0dHBzOi8vd3d3LnRoZW1vdmllZGIub3JnJyApIDoKICAgICBpZiAyOCAtIDI4OiBvMDBvTzBvbzBPME8wICUgT09vT29PMG8wbzBPTyAuIE9PTyAuIElJIC0gaWkxSTFpaTFJaUlpMSAlIG9vMG8KICAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCAoICJFeHRlbmRlZEluZm8iICwKICJYQk1DLlJ1blNjcmlwdChzY3JpcHQuZXh0ZW5kZWRpbmZvLGluZm89ZXh0ZW5kZWR0dmluZm8saWQ9JXMsbmFtZT0lcykiICUgKAogc3RyICggSUlJMUkxaUkxSTFpSSBbIDEyIF0gLiBzcGxpdCAoICcvJyApIFsgLSAxIF0gLiBzcGxpdCAoICctJyApIFsgMCBdICkgLCBpSTExaUlJSWkgKSApICkKICAgICBpZiAzOCAtIDM4OiBPT29Pb08wbzBvME9PICsgT09PICsgSWlJSTFpMUkgLSBvT08gJSBvbyAtIG9vb09vTwogICAgSUlpSTFpSUkxaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzLXYnICUgc3RyICggT29Pb09vbzAwMDBvICkgLCB0eXBlID0gJ3NlcmllcycgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgdXJsID0gSTFJaWlpICwgY2FyYXR1bGEgPSBJSUkxSTFpSTFJMWlJIFsgNiBdICwgcG9zdGVyID0gSUlJMUkxaUkxSTFpSSBbIDcgXSApICkKICAgIGlmIDIyIC0gMjI6IElpSUkxSWlJCiAgICBpZiAnRGlidWpvcycgaW4gSUlJMUkxaUkxSTFpSSBbIDEwIF0gOgogICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcy12JyAlIHN0ciAoIE9vT29Pb28wMDAwbyApICwgdHlwZSA9ICdzZXJpZXMnICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIHVybCA9IEkxSWlpaSAsIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsCiBwb3N0ZXIgPSBJSUkxSTFpSTFJMWlJIFsgNyBdICwgZmF2ID0gb29JSUlJICwgdGV4dCA9ICdEaWJ1am9zJyAsIGZhdkxpdGVyYWwgPSAnZCcgKSApCiAgICBlbHNlIDoKICAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKAogT08wbzBPMCAoIGlkID0gJyVzLXYnICUgc3RyICggT29Pb09vbzAwMDBvICkgLCB0eXBlID0gJ3NlcmllcycgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgdXJsID0gSTFJaWlpICwgY2FyYXR1bGEgPSBJSUkxSTFpSTFJMWlJIFsgNiBdICwKIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gLCBmYXYgPSBpMTEgLCB0ZXh0ID0gJ1NlcmllcycgLCBmYXZMaXRlcmFsID0gJ3MnICkgKQogICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggSUlpSTFpSUkxaWlpICkKICAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgVHJ1ZSApICkKICBlbHNlIDoKICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXMgWy9DT0xPUl0gJXMgJXMgJXMnICUgKCBpMUlpSTFpaWkgLCBpSTExaUlJSWkgLCBPb08wT28gLCBPME9vT28wMDAwT29vICwgbzBvbyApCiAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCBjYXJhdHVsYSA9IElJSTFJMWlJMUkxaUkgWyA2IF0gLAogcG9zdGVyID0gSUlJMUkxaUkxSTFpSSBbIDcgXSAsIHZpZGVvID0geyAndGl0bGUnIDogSUlJMUkxaUkxSTFpSSBbIDMgXSAsICd5ZWFyJyA6IElJSTFJMWlJMUkxaUkgWyA0IF0gLCAncGxvdCcgOiBJSUkxSTFpSTFJMWlJIFsgNSBdIH0gKQogICBJMUlpaWkgPSAnezB9P3sxfT1zZXJpZSZzZXJpZV9pZD17Mn0nIC4gZm9ybWF0ICggSTFpSTExSSAsIG9PT08wTzAgLCBPb09vT29vMDAwMG8gKQogICBpZiA4OCAtIDg4OiBvbyAlIElpMUkKICAgaWYgeGJtYyAuIGdldENvbmRWaXNpYmlsaXR5ICggJ1N5c3RlbS5IYXNBZGRvbihzY3JpcHQuZXh0ZW5kZWRpbmZvKScgKSBhbmQgSUlJMUkxaUkxSTFpSSBbIDEyIF0gYW5kIElJSTFJMWlJMUkxaUkgWyAxMiBdIC4gc3RhcnRzd2l0aCAoICdodHRwczovL3d3dy50aGVtb3ZpZWRiLm9yZycgKSA6CiAgICBpZiAyMyAtIDIzOiBJSSAvIG9vb09vTwogICAgSUlpSTFpSUkxaWlpIC4gYXBwZW5kICggKCAiRXh0ZW5kZWRJbmZvIiAsCiAiWEJNQy5SdW5TY3JpcHQoc2NyaXB0LmV4dGVuZGVkaW5mbyxpbmZvPWV4dGVuZGVkdHZpbmZvLGlkPSVzLG5hbWU9JXMpIiAlICgKIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAxMiBdIC4gc3BsaXQgKCAnLycgKSBbIC0gMSBdIC4gc3BsaXQgKCAnLScgKSBbIDAgXSApICwgaUkxMWlJSUlpICkgKSApCiAgICBpZiA3MiAtIDcyOiBPT29Pb08wbzBvME9PIC4gaTFpSTEgJSBPT08gKyBPT29Pb08wbzBvME9PIC8gb28gKyBvbwogICAgaWYgMjEgLSAyMTogT09PICogSWkxSSAqIE9PTyAuIElpSUkxaTFJICsgb29Pb29PME9PTyAlIElpSUkxaTFJCiAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9IHN0ciAoIE9vT29Pb28wMDAwbyApICwgdHlwZSA9ICdzZXJpZXMnICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIHVybCA9IEkxSWlpaSAsIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gKSApCiAgIGlmICdEaWJ1am9zJyBpbiBJSUkxSTFpSTFJMWlJIFsgMTAgXSA6CiAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCB1cmwgPSBJMUlpaWkgLCBjYXJhdHVsYSA9IElJSTFJMWlJMUkxaUkgWyA2IF0gLCBwb3N0ZXIgPSBJSUkxSTFpSTFJMWlJIFsgNyBdICwKIGZhdiA9IG9vSUlJSSAsIHRleHQgPSAnRGlidWpvcycgLCBmYXZMaXRlcmFsID0gJ2QnICkgKQogICBlbHNlIDoKICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoCiBPTzBvME8wICggaWQgPSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCB1cmwgPSBJMUlpaWkgLCBjYXJhdHVsYSA9IElJSTFJMWlJMUkxaUkgWyA2IF0gLCBwb3N0ZXIgPSBJSUkxSTFpSTFJMWlJIFsgNyBdICwKIGZhdiA9IGkxMSAsIHRleHQgPSAnU2VyaWVzJyAsIGZhdkxpdGVyYWwgPSAncycgKSApCiAgIE9vT08wT08wbzBPIC4gYWRkQ29udGV4dE1lbnVJdGVtcyAoIElJaUkxaUlJMWlpaSApCiAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgVHJ1ZSApICkKICAgaWYgODMgLSA4MzogSUlJSSAvIElJIC4gSTFJaUkxSUlJMTFpICogaTFpSTEgLSBJMSAtIEkxCiBpZiBsZW4gKCByb3dzICkgPj0gb29vMG9vT29PME9vIDoKICBpZiAnY19wYWdlJyBpbiBwYXJhbXMgYW5kICdhY3Rpb24nIGluIHBhcmFtcyA6CiAgIGlmIDkyIC0gOTI6IEkxSWlJMUlJSTExaQogICB0cnkgOgogICAgaUkxMWlJSUlpID0gaUkxMWlJSUlpIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgZXhjZXB0ICggVW5pY29kZUVuY29kZUVycm9yICwgVW5pY29kZURlY29kZUVycm9yICkgOgogICAgcGFzcwogICBpSUkgPSBpbnQgKCBwYXJhbXMgWyAnY19wYWdlJyBdICkKICAgaUlJID0gaUlJICsgMQogICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSAnUMOhZ2luYSBTaWd1aWVudGUgKCVzKSA+JyAlIHN0ciAoIGlJSSApICkKICAgSTFJaWlpID0gJ3swfT97MX09ezJ9JmNfcGFnZT17M30mcGFnZT17NH0mezV9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBvT09PME8wICwgcGFyYW1zIFsgJ2FjdGlvbicgXSAsIHN0ciAoIGlJSSApICwKCiAgICMgaWkxSTFpaTFJaUlpMSArIEkxSWlJMUlJSTExaQogICBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoCiAibm9tYnJlID4gJyIgKyBpSTExaUlJSWkgKyAiJyIgKSAsIHBhcmFtcyBbICdhY3Rpb25QYXJhbXMnIF0gKQogICBpZiA1NSAtIDU1OiBJSUlJICogSUkgKyBpMWlJMSAvIElJSUkgKiBJMQogICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIFRydWUgKSApCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiAyNCAtIDI0OiBpaUlJaTFpMUlpaSAlIEkxSWlJMUlJSTExaSAqIEkxIC4gaTFpSTEgLiBvMDBvTzBvbzBPME8wCiBpZiA3MyAtIDczOiBJaUlJMWkxSSAlIEkxICsgSWkxSSArIEkxIC0gSUlvb29PMG9vTzBvbwogaWYgMTUgLSAxNTogSWkgKiBPT08gKyBvbzBvICUgSUlvb29PMG9vTzBvbyAtIGlpSUlpMWkxSWlpIC8gb28wbwpkZWYgTzBPICggc2VyaWVfaWQgKSA6CiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKAogIlNFTEVDVCBzZXJpZXMuc2VyaWVfaWQsIHNlcmllc190ZW1wLnRlbXBfaWQsIHNlcmllc190ZW1wLmxpbmssIHNlcmllcy5ub21icmUsIHNlcmllcy5hbm5vLCBzZXJpZXMuc2lub3BzaXMsIHNlcmllcy5jYXJhdHVsYSwgc2VyaWVzLnBvc3Rlciwgc2VyaWVzX3RlbXAuc2lub3BzaXMsIHNlcmllc190ZW1wLmNhcmF0dWxhLCBzZXJpZXNfdGVtcC5wb3N0ZXIsIHNlcmllc190ZW1wLmhhc19lcGlzb2Rlcywgc2VyaWVzX3RlbXAubm9tYnJlLCBzZXJpZXMubGluaywgJ3F1YWxpdHknLCAncXVhbGl0eScsIHNlcmllcy5jYXRlZ29yeSAsIHNlcmllc190ZW1wLmFjdGl2ZSBGUk9NIHNlcmllcyBMRUZUIEpPSU4gc2VyaWVzX3RlbXAgT04gc2VyaWVzLnNlcmllX2lkID0gc2VyaWVzX3RlbXAuc2VyaWVfaWQgd2hlcmUgc2VyaWVzLnNlcmllX2lkPT8gT1JERVIgQlkgc2VyaWVzX3RlbXAudGVtcF9pZCIgLAogKCBzZXJpZV9pZCAsICkgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogaTFJaTExaSA9IFsgXQogSUlpSTFpSUkxaWlpID0gWyBdCiBvME9vT09PID0gRmFsc2UKIGlmIGxlbiAoIElpMTExSSApID4gMCA6CiAgSUlJSWkxMWkgPSBJaTExMUkgWyAwIF0gWyAxNiBdCiAgaWYgNzMgLSA3MzogSTEgKiBJaUlJMWkxSSAtIGlpMUkxaWkxSWlJaTEgKyBvMDBvTzBvbzBPME8wIC8gSUlJSSArIG9vMG8KICBpZiBJaTExMUkgWyAwIF0gWyAxMyBdIDoKICAgb28wb29vME9PT09vID0gaXRoaWwgLiBJaTFJSWlJMTFpSTEgKCBJaTExMUkgWyAwIF0gWyAxMyBdICkKICAgaWYgb28wb29vME9PT09vID09ICd5dCcgOgogICAgSWkxSWlJID0gaXRoaWwgLiBvTzBPbzAwICggSWkxMTFJIFsgMCBdIFsgMTMgXSApCiAgICBmb3IgaWlpMUlpSSBpbiB4cmFuZ2UgKCAwICwgbGVuICggSWkxSWlJICkgKSA6CiAgICAgaWYgbGVuICggSWkxSWlJICkgPD0gMSA6CiAgICAgIE9vbzAwTyA9ICcnCiAgICAgZWxzZSA6CiAgICAgIE9vbzAwTyA9ICIgKCIgKyBzdHIgKCBpaWkxSWlJICsgMSApICsgIikiCiAgICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdTGlzdGEgZGUgQ2Fww610dWxvcyAlcyBbL0NPTE9SXScgJSAoIGkxSWlJMWlpaSAsIE9vbzAwTyApCiAgICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIGNhcmF0dWxhID0gSWkxMTFJIFsgMCBdIFsgNiBdICwKIHBvc3RlciA9IElpMTExSSBbIDAgXSBbIDcgXSAsCiB2aWRlbyA9IHsgJ3RpdGxlJyA6IElpMTExSSBbIDAgXSBbIDMgXSAsICd5ZWFyJyA6IElpMTExSSBbIDAgXSBbIDQgXSAsICdwbG90JyA6IElpMTExSSBbIDAgXSBbIDUgXSB9ICkKICAgICBpZiA4MiAtIDgyOiBvbzBvICUgb09PICogbzAwb08wb28wTzBPMAogICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcy12JyAlIHN0ciAoIHNlcmllX2lkICkgLCB0eXBlID0gSWlpMSAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSWkxSWlJIFsgaWlpMUlpSSBdICwgY2FyYXR1bGEgPSBJaTExMUkgWyAwIF0gWyA2IF0gLAogcG9zdGVyID0gSWkxMTFJIFsgMCBdIFsgNyBdICkgKQogICAgIGlmIElJSUlpMTFpID09ICdEaWJ1am9zJyA6CiAgICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcy12JyAlIHN0ciAoIHNlcmllX2lkICkgLCB0eXBlID0gSWlpMSAsCiBub21icmUgPSBpSTExaWlJaTFJMWlJICwKIHVybCA9IElpMUlpSSBbIGlpaTFJaUkgXSAsIGNhcmF0dWxhID0gSWkxMTFJIFsgMCBdIFsgNiBdICwgZmF2ID0gb29JSUlJICwKIHRleHQgPSAnRGlidWpvcycgLCBmYXZMaXRlcmFsID0gJ2QnICwKIHBvc3RlciA9IElpMTExSSBbIDAgXSBbIDcgXSApICkKICAgICBlbHNlIDoKICAgICAgSUlpSTFpSUkxaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzLXYnICUgc3RyICggc2VyaWVfaWQgKSAsIHR5cGUgPSBJaWkxICwKIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSWkxSWlJIFsgaWlpMUlpSSBdICwgY2FyYXR1bGEgPSBJaTExMUkgWyAwIF0gWyA2IF0gLCBmYXYgPSBpMTEgLAogdGV4dCA9ICdTZXJpZXMnICwgZmF2TGl0ZXJhbCA9ICdzJyAsCiBwb3N0ZXIgPSBJaTExMUkgWyAwIF0gWyA3IF0gKSApCiAgICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggSUlpSTFpSUkxaWlpICkKICAgICBpMUlpMTFpIC4gYXBwZW5kICggKCBJaTFJaUkgWyBpaWkxSWlJIF0gLCBPb09PME9PMG8wTyAsIFRydWUgKSApCiAgIGVsc2UgOgogICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdTGlzdGEgZGUgQ2Fww610dWxvcyBbL0NPTE9SXScgJSBpMUlpSTFpaWkKICAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCBjYXJhdHVsYSA9IElpMTExSSBbIDAgXSBbIDYgXSAsCiBwb3N0ZXIgPSBJaTExMUkgWyAwIF0gWyA3IF0gLAogdmlkZW8gPSB7ICd0aXRsZScgOiBJaTExMUkgWyAwIF0gWyAzIF0gLCAneWVhcicgOiBJaTExMUkgWyAwIF0gWyA0IF0gLAogJ3Bsb3QnIDogJ1RvZG9zIGxvcyBlcGlzb2Rpb3MgZGUgbGEgc2VyaWUnIH0gKQogICAgSTFJaWlpID0gJ3swfT97MX09dmlld19zZXJpZSZzZXJpZV9pZD17Mn0nIC4gZm9ybWF0ICggSTFpSTExSSAsIG9PT08wTzAgLCBzZXJpZV9pZCApCiAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBzZXJpZV9pZCApICwgdHlwZSA9IElpaTEgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgdXJsID0gSTFJaWlpICwKIGNhcmF0dWxhID0gSWkxMTFJIFsgMCBdIFsgNiBdICwgcG9zdGVyID0gSWkxMTFJIFsgMCBdIFsgNyBdICkgKQogICAgaWYgSUlJSWkxMWkgPT0gJ0RpYnVqb3MnIDoKICAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBzZXJpZV9pZCApICwgdHlwZSA9IElpaTEgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwKIHVybCA9IEkxSWlpaSAsCiBjYXJhdHVsYSA9IElpMTExSSBbIDAgXSBbIDYgXSAsIHBvc3RlciA9IElpMTExSSBbIDAgXSBbIDcgXSAsIGZhdiA9IG9vSUlJSSAsCiB0ZXh0ID0gJ0RpYnVqb3MnICwgZmF2TGl0ZXJhbCA9ICdkJyApICkKICAgIGVsc2UgOgogICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcy12JyAlIHN0ciAoIHNlcmllX2lkICkgLCB0eXBlID0gSWlpMSAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSTFJaWlpICwKIGNhcmF0dWxhID0gSWkxMTFJIFsgMCBdIFsgNiBdICwgcG9zdGVyID0gSWkxMTFJIFsgMCBdIFsgNyBdICwgZmF2ID0gaTExICwKIHRleHQgPSAnU2VyaWVzJyAsIGZhdkxpdGVyYWwgPSAncycgKSApCiAgICBPb09PME9PMG8wTyAuIGFkZENvbnRleHRNZW51SXRlbXMgKCBJSWlJMWlJSTFpaWkgKQogICAgaWYgMzIgLSAzMjogSTFJaUkxSUlJMTFpIC8gSWlJSTFJaUkgLyBPT29Pb08wbzBvME9PIC4gSWkxSSAtIEkxCiAgICBpZiA1MiAtIDUyOiBJSW9vb08wb29PMG9vICUgSWlJSTFJaUkgLiBJMSAqIElpSUkxSWlJICsgb28wbwogICAgaWYgODMgLSA4MzogSWkxSSAlIE9Pb09vTzBvMG8wT08KICAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgVHJ1ZSApICkKIGZvciBJSUkxSTFpSTFJMWlJIGluIElpMTExSSA6CiAgSUlJSWkxMWkgPSBJSUkxSTFpSTFJMWlJIFsgMTYgXQogIElJaUkxaUlJMWlpaSA9IFsgXQogIG8wT29PT08gPSBGYWxzZQogIE9vT29Pb28wMDAwbyA9IElJSTFJMWlJMUkxaUkgWyAwIF0KICBJMUlpSSA9IElJSTFJMWlJMUkxaUkgWyAxIF0KICBpZiA5NCAtIDk0OiBvT08gKyBvb09vb08wT09PIC8gSUlvb29PMG9vTzBvbyAvIElJb29vTzBvb08wb28gLSBpMWlJMSAuIE9PTwogIGlmIElJSTFJMWlJMUkxaUkgWyAxMiBdIDoKICAgaWlJaWlJID0gSUlJMUkxaUkxSTFpSSBbIDEyIF0KICBlbHNlIDoKICAgaWlJaWlJID0gJyVzICVzJyAlICggJ1RlbXBvcmFkYScgLCBJMUlpSSApCiAgSUlJaTFpMWkgPSBPb09PMDBvbyAoIElJSTFJMWlJMUkxaUkgWyA1IF0gLCBJSUkxSTFpSTFJMWlJIFsgNiBdICwgSUlJMUkxaUkxSTFpSSBbIDcgXSAsIElJSTFJMWlJMUkxaUkgWyA4IF0gLCBJSUkxSTFpSTFJMWlJIFsgOSBdICwgSUlJMUkxaUkxSTFpSSBbIDEwIF0gKQogIGlmIElJSTFJMWlJMUkxaUkgWyAyIF0gYW5kIElJSTFJMWlJMUkxaUkgWyAxNyBdID4gMCA6CiAgIGlJaTFJaSA9IFRydWUKICAgbzBPb09PTyA9IFRydWUKICAgb28wb29vME9PT09vID0gaXRoaWwgLiBJaTFJSWlJMTFpSTEgKCBJSUkxSTFpSTFJMWlJIFsgMiBdICkKICAgaWYgb28wb29vME9PT09vID09ICd5dCcgOgogICAgSWkxSWlJID0gaXRoaWwgLiBvTzBPbzAwICggSUlJMUkxaUkxSTFpSSBbIDIgXSApCiAgICBmb3IgaWlpMUlpSSBpbiB4cmFuZ2UgKCAwICwgbGVuICggSWkxSWlJICkgKSA6CiAgICAgaWYgbGVuICggSWkxSWlJICkgPD0gMSA6CiAgICAgIE9vbzAwTyA9ICcnCiAgICAgZWxzZSA6CiAgICAgIE9vbzAwTyA9ICIgKCIgKyBzdHIgKCBpaWkxSWlJICsgMSApICsgIikiCiAgICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoIGkxSWlJMWlpaSAsIGlpSWlpSSArIE9vbzAwTyApCiAgICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIGNhcmF0dWxhID0gSUlJaTFpMWkgWyAxIF0gLAogcG9zdGVyID0gSUlJaTFpMWkgWyAyIF0gLAogdmlkZW8gPSB7ICd0aXRsZScgOiBJSUkxSTFpSTFJMWlJIFsgMyBdICwgJ3llYXInIDogSUlJMUkxaUkxSTFpSSBbIDQgXSAsICdwbG90JyA6IElJSWkxaTFpIFsgMCBdIH0gKQogICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcyVzLXYnICUgKCBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHN0ciAoIEkxSWlJICkgKSAsIHR5cGUgPSBJaWkxICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsCiB1cmwgPSBJaTFJaUkgWyBpaWkxSWlJIF0gLCBjYXJhdHVsYSA9IElJSWkxaTFpIFsgMSBdICwgcG9zdGVyID0gSUlJaTFpMWkgWyAyIF0gKSApCiAgICAgaWYgSUlJSWkxMWkgPT0gJ0RpYnVqb3MnIDoKICAgICAgSUlpSTFpSUkxaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzJXMtdicgJSAoIHN0ciAoIE9vT29Pb28wMDAwbyApICwgc3RyICggSTFJaUkgKSApICwgdHlwZSA9IElpaTEgLAogbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsCiB1cmwgPSBJaTFJaUkgWyBpaWkxSWlJIF0gLCBjYXJhdHVsYSA9IElJSWkxaTFpIFsgMSBdICwgcG9zdGVyID0gSUlJaTFpMWkgWyAyIF0gLAogZmF2ID0gb29JSUlJICwgdGV4dCA9ICdEaWJ1am9zJyAsIGZhdkxpdGVyYWwgPSAnZCcgKSApCiAgICAgZWxzZSA6CiAgICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcyVzLXYnICUgKCBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHN0ciAoIEkxSWlJICkgKSAsIHR5cGUgPSBJaWkxICwKIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSWkxSWlJIFsgaWlpMUlpSSBdICwgY2FyYXR1bGEgPSBJSUlpMWkxaSBbIDEgXSAsIHBvc3RlciA9IElJSWkxaTFpIFsgMiBdICwKIGZhdiA9IGkxMSAsIHRleHQgPSAnU2VyaWVzJyAsIGZhdkxpdGVyYWwgPSAncycgKSApCiAgICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggSUlpSTFpSUkxaWlpICkKICAgICBpMUlpMTFpIC4gYXBwZW5kICggKCBJaTFJaUkgWyBpaWkxSWlJIF0gLCBPb09PME9PMG8wTyAsIFRydWUgKSApCiAgIGVsc2UgOgogICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXNbL0NPTE9SXScgJSAoIGkxSWlJMWlpaSAsIGlpSWlpSSApCiAgICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgY2FyYXR1bGEgPSBJSUlpMWkxaSBbIDEgXSAsCiBwb3N0ZXIgPSBJSUlpMWkxaSBbIDIgXSAsCiB2aWRlbyA9IHsgJ3RpdGxlJyA6IElJSTFJMWlJMUkxaUkgWyAzIF0gLCAneWVhcicgOiBJSUkxSTFpSTFJMWlJIFsgNCBdICwgJ3Bsb3QnIDogSUlJaTFpMWkgWyAwIF0gfSApCiAgICBJMUlpaWkgPSAnezB9P3sxfT12aWV3X3RlbXAmc2VyaWVfaWQ9ezJ9JnRlbXBfaWQ9ezN9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBvT09PME8wICwgT29Pb09vbzAwMDBvICwgSTFJaUkgKQogICAgaWYgMSAtIDE6IElJCiAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMlcy12JyAlICggc3RyICggT29Pb09vbzAwMDBvICkgLCBzdHIgKCBJMUlpSSApICkgLCB0eXBlID0gSWlpMSAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSTFJaWlpICwgY2FyYXR1bGEgPSBJSUlpMWkxaSBbIDEgXSAsIHBvc3RlciA9IElJSWkxaTFpIFsgMiBdICkgKQogICAgaWYgSUlJSWkxMWkgPT0gJ0RpYnVqb3MnIDoKICAgICBJSWlJMWlJSTFpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMlcy12JyAlICggc3RyICggT29Pb09vbzAwMDBvICkgLCBzdHIgKCBJMUlpSSApICkgLCB0eXBlID0gSWlpMSAsCiBub21icmUgPSBpSTExaWlJaTFJMWlJICwKIHVybCA9IEkxSWlpaSAsIGNhcmF0dWxhID0gSUlJaTFpMWkgWyAxIF0gLCBwb3N0ZXIgPSBJSUlpMWkxaSBbIDIgXSAsIGZhdiA9IG9vSUlJSSAsCiB0ZXh0ID0gJ0RpYnVqb3MnICwgZmF2TGl0ZXJhbCA9ICdkJyApICkKICAgIGVsc2UgOgogICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcyVzLXYnICUgKCBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHN0ciAoIEkxSWlJICkgKSAsIHR5cGUgPSBJaWkxICwKIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSTFJaWlpICwgY2FyYXR1bGEgPSBJSUlpMWkxaSBbIDEgXSAsIHBvc3RlciA9IElJSWkxaTFpIFsgMiBdICwgZmF2ID0gaTExICwKIHRleHQgPSAnU2VyaWVzJyAsIGZhdkxpdGVyYWwgPSAncycgKSApCiAgICAgaWYgMzIgLSAzMjogb28KICAgICBpZiAyNiAtIDI2OiBJaSArIE9Pb09vTzBvMG8wT08gLiBJSSAqIG9vCiAgICAgaWYgMzMgLSAzMzogT09PIC8gSWlJSTFpMUkgKyBPT08gLSBPT29Pb08wbzBvME9PCiAgICAgaWYgNzQgLSA3NDogb28gKiBPT29Pb08wbzBvME9PIC8gSWkxSSAqIEkxCiAgICBPb09PME9PMG8wTyAuIGFkZENvbnRleHRNZW51SXRlbXMgKCBJSWlJMWlJSTFpaWkgKQogICAgaWYgNTkgLSA1OTogb29vT29PICogSUlJSQogICAgaWYgNjIgLSA2MjogbzAwb08wb28wTzBPMCAvIE9PTyAuIGlpSUlpMWkxSWlpICogSUlJSSAuIElpCiAgICBpZiAxOCAtIDE4OiBvbzBvCiAgICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKICBpZiBJSUkxSTFpSTFJMWlJIFsgMTEgXSA9PSAnWScgOgogICBJSWlJMWlJSTFpaWkgPSBbIF0KICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXMgWy9DT0xPUl0nICUgKCBpMUlpSTFpaWkgLCBpaUlpaUkgKQogICBpZiBJSUkxSTFpSTFJMWlJIFsgMiBdIDoKICAgIGlJMTFpaUlpMUkxaUkgPSAnJXMgW0NPTE9SICVzXShBbHRlcm5hdGl2bylbL0NPTE9SXScgJSAoIGlJMTFpaUlpMUkxaUkgLCBpMTFpaSApCiAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCBjYXJhdHVsYSA9IElJSWkxaTFpIFsgMSBdICwKIHBvc3RlciA9IElJSWkxaTFpIFsgMiBdICwKIHZpZGVvID0geyAndGl0bGUnIDogSUlJMUkxaUkxSTFpSSBbIDMgXSAsICd5ZWFyJyA6IElJSTFJMWlJMUkxaUkgWyA0IF0gLCAncGxvdCcgOiBJSUlpMWkxaSBbIDAgXSB9ICkKICAgSTFJaWlpID0gJ3swfT97MX09bGlzdF90ZW1wJnNlcmllX2lkPXsyfSZ0ZW1wX2lkPXszfSZjYXJhdHVsYT17NH0mcG9zdGVyPXs1fScgLiBmb3JtYXQgKCBJMWlJMTFJICwgb09PTzBPMCAsIE9vT29Pb28wMDAwbyAsIEkxSWlJICwKIElJSWkxaTFpIFsgMSBdICwgSUlJaTFpMWkgWyAyIF0gKQogICBpZiA4MyAtIDgzOiBvMDBvTzBvbzBPME8wIC8gb29vT29PCiAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcyVzJyAlICggc3RyICggT29Pb09vbzAwMDBvICkgLCBzdHIgKCBJMUlpSSApICkgLCB0eXBlID0gSWlpMSAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCB1cmwgPSBJMUlpaWkgLAogY2FyYXR1bGEgPSBJSUlpMWkxaSBbIDEgXSAsIHBvc3RlciA9IElJSWkxaTFpIFsgMiBdICkgKQogICBpZiBJSUlJaTExaSA9PSAnRGlidWpvcycgOgogICAgSUlpSTFpSUkxaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzJXMnICUgKCBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHN0ciAoIEkxSWlJICkgKSAsIHR5cGUgPSBJaWkxICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsCiB1cmwgPSBJMUlpaWkgLAogY2FyYXR1bGEgPSBJSUlpMWkxaSBbIDEgXSAsIHBvc3RlciA9IElJSWkxaTFpIFsgMiBdICwgZmF2ID0gb29JSUlJICwgdGV4dCA9ICdEaWJ1am9zJyAsCiBmYXZMaXRlcmFsID0gJ2QnICkgKQogICBlbHNlIDoKICAgIElJaUkxaUlJMWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcyVzJyAlICggc3RyICggT29Pb09vbzAwMDBvICkgLCBzdHIgKCBJMUlpSSApICkgLCB0eXBlID0gSWlpMSAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSTFJaWlpICwKIGNhcmF0dWxhID0gSUlJaTFpMWkgWyAxIF0gLCBwb3N0ZXIgPSBJSUlpMWkxaSBbIDIgXSAsIGZhdiA9IGkxMSAsIHRleHQgPSAnU2VyaWVzJyAsCiBmYXZMaXRlcmFsID0gJ3MnICkgKQogICAgaWYgODMgLSA4MzogSWkgKyBpaTFJMWlpMUlpSWkxICogSUlvb29PMG9vTzBvbyAuIEkxICUgSUlvb29PMG9vTzBvbwogICAgaWYgNjEgLSA2MTogSWkxSSAtIElpIC8gT09vT29PMG8wbzBPTwogICAgaWYgMTAwIC0gMTAwOiBJaTFJICUgSWlJSTFpMUkKICAgIGlmIDc3IC0gNzc6IGlpMUkxaWkxSWlJaTEKICAgIGlmIDc2IC0gNzY6IG8wMG9PMG9vME8wTzAgJSBpMWlJMSAtIG9vMG8KICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggSUlpSTFpSUkxaWlpICkKICAgaWYgNTEgLSA1MTogT09PIC8gaTFpSTEKICAgaWYgNDAgLSA0MDogb28gKiBJSUlJICogSWlJSTFJaUkKICAgaWYgMTEgLSAxMTogb09PICsgb09PICogSUlJSSAuIGkxaUkxCiAgIGlmIDkyIC0gOTI6IElpMUkgKiBJaUlJMWkxSSAtIElpSUkxSWlJCiAgIGlJaTFJaSA9IFRydWUKICAgbzBPb09PTyA9IFRydWUKICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiB0cnkgOgogIHhibWNwbHVnaW4gLiBzZXRDb250ZW50ICggaWlJSWlpSUkxICwgInR2c2hvd3MiICkKICBPT28wMDBPbyAoIG9PME8wbzBvb08gKQogZXhjZXB0IDoKICBwYXNzCiBpZiBvME9vT09PIDoKICB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKICB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBpaUlJaWlJSTEgKQogZWxzZSA6CiAgeGJtYyAuIGxvZyAoICJbYWRkb24uUGFsYW50aXItJXNdOiBObyBpbmZvIGZvdW5kIGZvciBzZXJpZSAlcyAiICUgKCBJaUlpICwgc2VyaWVfaWQgKSApCiAgaWYgMzQgLSAzNDogb28wbyAtIElJb29vTzBvb08wb28gLSBvT08gLyBJSUlJCiAgaWYgMTggLSAxODogSTEgKiBJSUlJIC0gb29Pb29PME9PTyAqIElpSUkxaTFJCiAgaWYgOTcgLSA5NzogSWlJSTFpMUkKZGVmIG9vTzAgKCBzZXJpZV9pZCAsIHRlbXBfaWQgLCBjYXJhdHVsYSAsIHBvc3RlciApIDoKIElpMTExSSA9IE8wMDBvMDAwbzBPbyAoICJjYXBpdHVsb3MiICwgWyAic2VyaWVfaWQiICwgInRlbXBfaWQiICwgImNhcGl0dWxvX2lkIiAsICInJyIgLCAiJyciICwgIicnIiAsICJsaW5rIiAsICIncXVhbGl0eSciICwKICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsICJjYXJhdHVsYSIgLCAicG9zdGVyIiAsICJ1cGRhdGVkIiAsICInVGVzdCciICwgIidUZXN0JyIgLCAiYWN0aXZlIiBdICwgWyAic2VyaWVfaWQiICwgInRlbXBfaWQiIF0gLAogWyBzZXJpZV9pZCAsIHRlbXBfaWQgXSAsIFsgJ2NhcGl0dWxvcy5ub21icmUnICwgJ2NhcGl0dWxvcy5jYXBpdHVsb19pZCcgXSAsIHBhcmFtcyA9IHsgJ3NxbF9jb25kJyA6ICcgYWN0aXZlID4gMCcgfSApCiBPb29PMDBPT28wT09PICggSWkxMTFJICwgSWlpMSAsIGNhcmF0dWxhICwgcG9zdGVyICkKIGlmIDE3IC0gMTc6IElJb29vTzBvb08wb28gLiBJaUlJMWkxSSAqIElJICogSTEKIGlmIDgzIC0gODM6IG9vb09vTyAlIEkxSWlJMUlJSTExaSAqIEkxSWlJMUlJSTExaSAvIElpSUkxaTFJIC0gb29Pb29PME9PTyArIG9vT29vTzBPT08KIGlmIDY5IC0gNjk6IEkxICogSTEKZGVmIE9vMG8gKCBzZXJpZV9pZCAsIHRlbXBfaWQgKSA6CiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKAogIlNFTEVDVCBzZXJpZXMuc2VyaWVfaWQsIHNlcmllc190ZW1wLnRlbXBfaWQsICcnLCAnJywgJycsICcnLCBzZXJpZXNfdGVtcC5saW5rLCAncXVhbGl0eScsIHNlcmllcy5ub21icmUsIHNlcmllc190ZW1wLmFubm8sIHNlcmllcy5zaW5vcHNpcywgc2VyaWVzLmNhcmF0dWxhLCBzZXJpZXMucG9zdGVyLCBzZXJpZXNfdGVtcC5zaW5vcHNpcywgc2VyaWVzX3RlbXAuY2FyYXR1bGEsIHNlcmllc190ZW1wLnBvc3Rlciwgc2VyaWVzLmNhdGVnb3J5LCBzZXJpZXMuYWN0aXZlIEZST00gc2VyaWVzIElOTkVSIEpPSU4gc2VyaWVzX3RlbXAgT04gc2VyaWVzLnNlcmllX2lkPXNlcmllc190ZW1wLnNlcmllX2lkIHdoZXJlIHNlcmllc190ZW1wLnNlcmllX2lkPT8gQU5EIHNlcmllc190ZW1wLnRlbXBfaWQ9PyIgLAogKCBzZXJpZV9pZCAsIHRlbXBfaWQgLCApICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKIGlmIDI5IC0gMjk6IG9vICogbzAwb08wb28wTzBPMAogSUlJaTFpMWkgPSBPb09PMDBvbyAoIElpMTExSSBbIDAgXSBbIDEwIF0gLCBJaTExMUkgWyAwIF0gWyAxMSBdICwgSWkxMTFJIFsgMCBdIFsgMTIgXSAsIElpMTExSSBbIDAgXSBbIDEzIF0gLCBJaTExMUkgWyAwIF0gWyAxNCBdICwgSWkxMTFJIFsgMCBdIFsgMTUgXSApCiBpMWlpSTExID0gaXRoaWwgLiBvb08wTzBPICggSWkxMTFJIFsgMCBdIFsgNiBdICwgaTExaSAsIHNlcmllX2lkICwgdGVtcF9pZCApCiBJSUlJaUlpMUlJaSA9IFsgTm9uZSBdICogbGVuICggaTFpaUkxMSApCiBpZiA5MyAtIDkzOiBvbzBvICUgSUkgKyBvbyAlIG9vICUgSTFJaUkxSUlJMTFpCiBmb3IgaWlpMUlpSSBpbiB4cmFuZ2UgKCAwICwgbGVuICggaTFpaUkxMSApICkgOgogIGlmIDE2IC0gMTY6IElpICsgaTFpSTEgLiBJaUlJMWkxSQogIElJSUlpSWkxSUlpIFsgaWlpMUlpSSBdID0gbGlzdCAoIElpMTExSSBbIDAgXSBbIDogbGVuICggSWkxMTFJIFsgMCBdICkgXSApCiAgSUlJSWlJaTFJSWkgWyBpaWkxSWlJIF0gWyAxMCBdID0gSUlJaTFpMWkgWyAwIF0KICBJSUlJaUlpMUlJaSBbIGlpaTFJaUkgXSBbIDExIF0gPSBJSUlpMWkxaSBbIDEgXQogIElJSUlpSWkxSUlpIFsgaWlpMUlpSSBdIFsgMTIgXSA9IElJSWkxaTFpIFsgMiBdCiAgSUlJSWlJaTFJSWkgWyBpaWkxSWlJIF0gWyA2IF0gPSBpMWlpSTExIFsgaWlpMUlpSSBdIFsgMSBdCiAgSUlJSWlJaTFJSWkgWyBpaWkxSWlJIF0gWyA4IF0gPSBpMWlpSTExIFsgaWlpMUlpSSBdIFsgMCBdCiAgSUlJSWlJaTFJSWkgWyBpaWkxSWlJIF0gWyAxMCBdID0gJycKICBpZiA2NiAtIDY2OiBpaTFJMWlpMUlpSWkxICUgSUlJSQogIGlmIDE2IC0gMTY6IGkxaUkxIC8gSTFJaUkxSUlJMTFpICogSUlvb29PMG9vTzBvbyAtIGkxaUkxCiAgaWYgMjAgLSAyMDogSWkxSSAlIElpSUkxaTFJIC0gaWlJSWkxaTFJaWkgLyBvbyArIE9Pb09vTzBvMG8wT08gJSBpaUlJaTFpMUlpaQogIElJSUlpSWkxSUlpIFsgaWlpMUlpSSBdIFsgMTUgXSA9IElpMTExSSBbIDAgXSBbIDE2IF0KICBJSUlJaUlpMUlJaSBbIGlpaTFJaUkgXSBbIDE2IF0gPSBJaTExMUkgWyAwIF0gWyAxNyBdCiAgaWYgOTQgLSA5NDogT09vT29PMG8wbzBPTwogIGlmIDc4IC0gNzg6IGlpMUkxaWkxSWlJaTEgLiBvbyAvIG9vT29vTzBPT08KIE9vb08wME9PbzBPT08gKCBJSUlJaUlpMUlJaSAsIElpaTEgKQogaWYgNTQgLSA1NDogT09PICUgb09PIC4gSUkgJSBJaUlJMWkxSSAlIG9vMG8gLSBJMUlpSTFJSUkxMWkKIGlmIDIzIC0gMjM6IG9vICsgT09vT29PMG8wbzBPTyAlIE9Pb09vTzBvMG8wT08gJSBPT29Pb08wbzBvME9PCiBpZiAzIC0gMzogSUlvb29PMG9vTzBvbyAqIE9PTwpkZWYgSUkxSWkxSSAoIHNlcmllX2lkICkgOgogSWkxMTFJID0gTzAwMG8wMDBvME9vICggInNlcmllcyIgLAogWyAic2VyaWVfaWQiICwgIicnIiAsICInJyIgLCAiJyciICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAidXBkYXRlZCIgLCAiJyciICwgImNhdGVnb3J5IiAsICJhY3RpdmUiICwgInRtZGIiCiBdICwgWyAic2VyaWVfaWQiIF0gLCBbIHNlcmllX2lkIF0gLCBbICdzZXJpZV9pZCcgXSApCiBpZiA1MSAtIDUxOiBvbzBvIC0gT09PCiBpZiAxMiAtIDEyOiBJSUlJIC0gb28wbyArIElpSUkxSWlJICsgT09PICUgSUkgKyBJSW9vb08wb29PMG9vCiBpMWlpSTExID0gaXRoaWwgLiBvb08wTzBPICggSWkxMTFJIFsgMCBdIFsgNiBdICwgaTExaSAsIHNlcmllX2lkICkKIElJSUlpSWkxSUlpID0gWyBOb25lIF0gKiBsZW4gKCBpMWlpSTExICkKIGZvciBpaWkxSWlJIGluIHhyYW5nZSAoIDAgLCBsZW4gKCBpMWlpSTExICkgKSA6CiAgSUlJSWlJaTFJSWkgWyBpaWkxSWlJIF0gPSBsaXN0ICggSWkxMTFJIFsgMCBdIFsgOiBdICkKICBJSUlJaUlpMUlJaSBbIGlpaTFJaUkgXSBbIDYgXSA9IGkxaWlJMTEgWyBpaWkxSWlJIF0gWyAxIF0KICBJSUlJaUlpMUlJaSBbIGlpaTFJaUkgXSBbIDggXSA9IGkxaWlJMTEgWyBpaWkxSWlJIF0gWyAwIF0KICBJSUlJaUlpMUlJaSBbIGlpaTFJaUkgXSBbIDEwIF0gPSAnJwogT29vTzAwT09vME9PTyAoIElJSUlpSWkxSUlpICwgSWlpMSApCiBpZiAxMSAtIDExOiBJaSAuIElpSUkxSWlJICogb29vT29PIC0gaWlJSWkxaTFJaWkgJSBvT08KIGlmIDUgLSA1OiBJMUlpSTFJSUkxMWkgLSBJMSAuIGkxaUkxICUgT09PIC8gbzAwb08wb28wTzBPMCAvIElpSUkxSWlJCiBpZiA4MyAtIDgzOiBvbyAvIGkxaUkxIC8gSTEgJSBJaTFJIC4gaWlJSWkxaTFJaWkKZGVmIG9PMG9vTzBvT08wICggKSA6CiBpMUlpMTFpID0gWyBdCiBmb3IgaWlpMUlpSSBpbiByYW5nZSAoIDAgLCAxMCApIDoKICBPMDBvbyA9IGRhdGV0aW1lIC4gZGF0ZXRpbWUgLiBub3cgKCApIC4geWVhciAtIGlpaTFJaUkKICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdJyAlICggaTFJaUkxaWlpICwgTzAwb28gKQogIE9vT08wT08wbzBPID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBpSTExaWlJaTFJMWlJICwgaWNvbkltYWdlID0gJycgKQogIEkxSWlpaSA9ICd7MH0/YWN0aW9uPXsxfSZhbm5vPXsyfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgInVsdGltYXNfcGVsaXNfYW55b19kZXRhaWwiICwgTzAwb28gKQogIGlJaTFJaSA9IFRydWUKICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAiZmlsZXMiICkKICBPT28wMDBPbyAoIG8wbzAwMDBPMCApCiBleGNlcHQgOgogIHBhc3MKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKIGlmIDQzIC0gNDM6IElpMUkgJSBJSUlJIC8gT09vT29PMG8wbzBPTyAtIElpSUkxaTFJCmRlZiBvT28wICggYWN0aW9uICwgcGFyYW1zICkgOgogaWYgJ3NxbF9saW1pdCcgaW4gcGFyYW1zIDoKICBJSWkxSWlJaTFJMSA9IHBhcmFtcyBbICdzcWxfbGltaXQnIF0KIGVsc2UgOgogIElJaTFJaUlpMUkxID0gJycKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgYW5ubyxjb3VudChwZWxpX2lkKSBmcm9tIHBlbGlzICVzIGdyb3VwIGJ5IGFubm8gb3JkZXIgYnkgYW5ubyBkZXNjICVzIiAlICggcGFyYW1zIFsgJ3NxbF9jb25kJyBdICwgSUlpMUlpSWkxSTEgKSApCiBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKIG9Pb08wTzAwMDAwIC4gY2xvc2UgKCApCiBpMUlpMTFpID0gWyBdCiBmb3IgSUlJMUkxaUkxSTFpSSBpbiBJaTExMUkgOgogIE8wMG9vID0gSUlJMUkxaUkxSTFpSSBbIDAgXQogIGlpaU8wMDBPbyA9IElJSTFJMWlJMUkxaUkgWyAxIF0KICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdICglcyknICUgKCBpMUlpSTFpaWkgLCBPMDBvbyAsIGlpaU8wMDBPbyApCiAgT29PTzBPTzBvME8gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IGlJMTFpaUlpMUkxaUkgLCBpY29uSW1hZ2UgPSAnJyApCiAgSTFJaWlpID0gJ3swfT9hY3Rpb249ezF9JmFubm89ezJ9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBhY3Rpb24gLCBPMDBvbyApCiAgaUlpMUlpID0gVHJ1ZQogIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgaUlpMUlpICkgKQogdHJ5IDoKICB4Ym1jcGx1Z2luIC4gc2V0Q29udGVudCAoIGlpSUlpaUlJMSAsICJmaWxlcyIgKQogIE9PbzAwME9vICggbzBvMDAwME8wICkKIGV4Y2VwdCA6CiAgcGFzcwogeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggaWlJSWlpSUkxICwgaTFJaTExaSAsIGxlbiAoIGkxSWkxMWkgKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBpaUlJaWlJSTEgKQogaWYgMTMgLSAxMzogaTFpSTEKIGlmIDcgLSA3OiBJaQpkZWYgT09vMG9vT28wICggKSA6CiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIGlmIDI1IC0gMjU6IE9Pb09vTzBvMG8wT08gKyBJMSAtIG9vMG8gLyBvMDBvTzBvbzBPME8wICogaWlJSWkxaTFJaWkgLyBJSQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggImMyVnNaV04wSUdkeWIzVndYMk52Ym1OaGRDaHpZV2RoTENBbkl5Y3BJR1p5YjIwZ2NHVnNhWE1nYjNKa1pYSWdZbmtnYzJGbllTQmhjMk09IiApICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKIGlmIDU4IC0gNTg6IE9Pb09vTzBvMG8wT08gLiBvMDBvTzBvbzBPME8wCiBJaTExMUkgPSBzb3J0ZWQgKCBzZXQgKCBJaTExMUkgWyAwIF0gWyAwIF0gLiBzcGxpdCAoICcjJyApICkgKQogaTFJaTExaSA9IFsgXQogZm9yIElJSTFJMWlJMUkxaUkgaW4gSWkxMTFJIDoKICBpZiAzNiAtIDM2OiBpMWlJMSAlIG9vMG8KICBpZiAoIElJSTFJMWlJMUkxaUkgIT0gJycgYW5kIElJSTFJMWlJMUkxaUkgIT0gJyAnICkgOgogICBpaUlJaWkxMWkxSWkgPSBJSUkxSTFpSTFJMWlJCiAgIHRyeSA6CiAgICBpaUlJaWkxMWkxSWkgPSBpaUlJaWkxMWkxSWkgLiBlbmNvZGUgKCAndXRmLTgnICwgJ2lnbm9yZScgKQogICBleGNlcHQgKCBVbmljb2RlRW5jb2RlRXJyb3IgLCBVbmljb2RlRGVjb2RlRXJyb3IgKSA6CiAgICBwYXNzCiAgIGlJMTFpaUlpMUkxaUkgPSAnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKCBpMUlpSTFpaWkgLCBpaUlJaWkxMWkxSWkgKQogICBPb09PME9PMG8wTyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gaUkxMWlpSWkxSTFpSSAsIGljb25JbWFnZSA9ICcnICkKICAgSTFJaWlpID0gJ3swfT9hY3Rpb249c2FnYV9kZXRhaWwmc2FnYT17MX0nIC4gZm9ybWF0ICggSTFpSTExSSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggaWlJSWlpMTFpMUlpICkgKQogICBpSWkxSWkgPSBUcnVlCiAgIGlJSWkxSUlJSSA9IElJMUlpMTFpMUlpMUkgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGlpSUlpaTExaTFJaSApICkKICAgaWYgbGVuICggaUlJaTFJSUlJICkgPiAwIDoKICAgIE9vT08wT08wbzBPIC4gYWRkQ29udGV4dE1lbnVJdGVtcyAoIGlJSWkxSUlJSSApCiAgICBpZiA0OCAtIDQ4OiBvMDBvTzBvbzBPME8wICsgb09PICUgSWlJSTFpMUkgKiBJSSAtIE9PTwogICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAiZmlsZXMiICkKICBPT28wMDBPbyAoIG8wbzAwMDBPMCApCiBleGNlcHQgOgogIHBhc3MKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKIGlmIDEwIC0gMTA6IG9vMG8gLyBvbzBvIC0gSTFJaUkxSUlJMTFpICsgSWkgJSBJSSArIG9vb09vTwogaWYgOTYgLSA5NjogbzAwb08wb28wTzBPMCAlIElpMUkgLSBJMSAuIGkxaUkxCmRlZiBJaUlJMWlpSUkxICggKSA6CiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAic2VsZWN0IGdyb3VwX2NvbmNhdChsb3dlcih0YWdzKSwgJyMnKSBmcm9tIHBlbGlzIG9yZGVyIGJ5IHBlbGlfaWQgYXNjIiApCiBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKIG9Pb08wTzAwMDAwIC4gY2xvc2UgKCApCiBpZiAyIC0gMjogb29vT29PIC8gSWlJSTFpMUkKIElpMTExSSA9IHNvcnRlZCAoIHNldCAoIElpMTExSSBbIDAgXSBbIDAgXSAuIHNwbGl0ICggJyMnICkgKSApCiBpZiAyMyAtIDIzOiBvb29Pb08KIGkxSWkxMWkgPSBbIF0KIGZvciBJSUkxSTFpSTFJMWlJIGluIElpMTExSSA6CiAgb28wT08gPSBJSUkxSTFpSTFJMWlJCiAgaWYgb28wT08gIT0gJycgOgogICBpZiAyIC0gMjogSWkKICAgdHJ5IDoKICAgIG9vME9PID0gb28wT08gLiBlbmNvZGUgKCAndXRmLTgnICwgJ2lnbm9yZScgKQogICBleGNlcHQgKCBVbmljb2RlRW5jb2RlRXJyb3IgLCBVbmljb2RlRGVjb2RlRXJyb3IgKSA6CiAgICBwYXNzCiAgIGlJMTFpaUlpMUkxaUkgPSAnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKCBpMUlpSTFpaWkgLCBvbzBPTyAuIGNhcGl0YWxpemUgKCApICkKICAgT29PTzBPTzBvME8gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IGlJMTFpaUlpMUkxaUkgLCBpY29uSW1hZ2UgPSAnJyApCiAgIEkxSWlpaSA9ICd7MH0/YWN0aW9uPWdlbmVyb19kZXRhaWwmZ2VuZXJvPXsxfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBvbzBPTyApICkKICAgaUlpMUlpID0gVHJ1ZQogICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAiZmlsZXMiICkKICBPT28wMDBPbyAoIG8wbzAwMDBPMCApCiBleGNlcHQgOgogIHBhc3MKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKIGlmIDg4IC0gODg6IG8wMG9PMG9vME8wTzAgKiBvbyAlIE9PTwogaWYgODMgLSA4MzogSTEgLyBvb09vb08wT09PICsgb09PICogSWlJSTFpMUkgJSBJMQpkZWYgSUlJMUlJaUlJMTEgKCApIDoKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJzZWxlY3QgZ3JvdXBfY29uY2F0KGxvd2VyKGdlbmVybyksICcjJykgZnJvbSBwZWxpcyBvcmRlciBieSBwZWxpX2lkIGFzYyIgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogaWYgMTAgLSAxMDogbzAwb08wb28wTzBPMCAqIElJb29vTzBvb08wb28gKiBPT29Pb08wbzBvME9PCiBJaTExMUkgPSBzb3J0ZWQgKCBzZXQgKCBJaTExMUkgWyAwIF0gWyAwIF0gLiBzcGxpdCAoICcjJyApICkgKQogaWYgOTAgLSA5MDogb29vT29PIC0gSWlJSTFpMUkgJSBJaUlJMUlpSQogaTFJaTExaSA9IFsgXQogZm9yIElJSTFJMWlJMUkxaUkgaW4gSWkxMTFJIDoKICBvbzBPTyA9IElJSTFJMWlJMUkxaUkKICBpZiBvbzBPTyAhPSAnJyA6CiAgIGlmIDUwIC0gNTA6IE9PTyAtIElJb29vTzBvb08wb28gLSBvbyAvIG8wMG9PMG9vME8wTzAgLyBpMWlJMSAuIElpCiAgIHRyeSA6CiAgICBvbzBPTyA9IG9vME9PIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgZXhjZXB0ICggVW5pY29kZUVuY29kZUVycm9yICwgVW5pY29kZURlY29kZUVycm9yICkgOgogICAgcGFzcwogICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdJyAlICggaTFJaUkxaWlpICwgb28wT08gLiBjYXBpdGFsaXplICggKSApCiAgIE9vT08wT08wbzBPID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBpSTExaWlJaTFJMWlJICwgaWNvbkltYWdlID0gJycgKQogICBJMUlpaWkgPSAnezB9P2FjdGlvbj1nZW5lcm9fZGV0YWlsJmdlbmVybz17MX0nIC4gZm9ybWF0ICggSTFpSTExSSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggb28wT08gKSApCiAgIGlJaTFJaSA9IFRydWUKICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiB0cnkgOgogIHhibWNwbHVnaW4gLiBzZXRDb250ZW50ICggaWlJSWlpSUkxICwgImZpbGVzIiApCiAgT09vMDAwT28gKCBvMG8wMDAwTzAgKQogZXhjZXB0IDoKICBwYXNzCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiA4MyAtIDgzOiBvbyAqIGkxaUkxICUgT09PIC4gSUkgKiBvb09vb08wT09PIC4gaWlJSWkxaTFJaWkKIGlmIDMgLSAzOiBvbzBvIC0gSTEgLSBvb09vb08wT09PIC0gSWkxSQpkZWYgSTFJaUlJMUlpaUkxSSAoIHNhZ2EgLCBwYXJhbXMgKSA6CiBwYXJhbXMgWyAnc3FsX2dyb3VwJyBdID0gJyBncm91cF9pZCcKIHBhcmFtcyBbICdhbm5vJyBdID0gJ3RydWUnCiBwYXJhbXMgWyAncHVudG9zJyBdID0gJ3RydWUnCiBwYXJhbXMgWyAnYWN0aW9uJyBdID0gJ3NhZ2FfZGV0YWlsJwogcGFyYW1zIFsgJ2FjdGlvblBhcmFtcycgXSA9ICdzYWdhPScgKyBzYWdhCiBwYXJhbXMgWyAnc3FsX2xpbWl0JyBdID0gJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkKIGlmICdwYWdlJyBpbiBwYXJhbXMgYW5kICdjX3BhZ2UnIGluIHBhcmFtcyA6CiAgcGFyYW1zIFsgJ3NxbF9jb25kJyBdID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBwYXJhbXMgWyAncGFnZScgXSApIC4gZGVjb2RlICggJ3V0Zi04JyApCiBlbHNlIDoKICBvbzAgPSAxCiAgcGFyYW1zIFsgJ2NfcGFnZScgXSA9IG9vMAogSWkxMTFJID0gTzAwICggInBlbGlzIiAsICJzYWdhIiAsCiBbICJwZWxpX2lkIiAsICJhdWRpbyIgLCAiJyciICwgInRhZ3MiICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAic3RyZnRpbWUoJyVZLSVtLSVkJyx1cGRhdGVkKSwgcHVudG9zLCBjYXRlZ29yeSwgYWN0aXZlLCB0bWRiIiAsCiAiZ3JvdXBfaWQiICwgImNvdW50KCopIiAsICJncm91cF9jb25jYXQodGFncywnIycpIiAsICJncm91cF9jb25jYXQoYXVkaW8sJyMnKSIKIF0gLCBbICJzYWdhIiBdICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBzYWdhICkgLiBkZWNvZGUgKCAndXRmLTgnICkgLCBbICdub21icmUnIF0gLCBwYXJhbXMgKQogT29vTzAwT09vME9PTyAoIElpMTExSSAsICdwZWxpcycgLCBpbmZvID0gcGFyYW1zICkKIGlmIDE4IC0gMTg6IElpMUkgLyBJMQpkZWYgT08wT08wT08gKCBnZW4gLCBwYXJhbXMgKSA6CiBwYXJhbXMgWyAnc3FsX2dyb3VwJyBdID0gJyBncm91cF9pZCcKIHBhcmFtcyBbICdhbm5vJyBdID0gJ3RydWUnCiBwYXJhbXMgWyAncHVudG9zJyBdID0gJ3RydWUnCiBwYXJhbXMgWyAnYWN0aW9uJyBdID0gJ2dlbmVyb19kZXRhaWwnCiBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdID0gJ2dlbmVybz0nICsgZ2VuCiBwYXJhbXMgWyAnc3FsX2xpbWl0JyBdID0gJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkKIGlmICdwYWdlJyBpbiBwYXJhbXMgYW5kICdjX3BhZ2UnIGluIHBhcmFtcyA6CiAgcGFyYW1zIFsgJ3NxbF9jb25kJyBdID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBwYXJhbXMgWyAncGFnZScgXSApIC4gZGVjb2RlICggJ3V0Zi04JyApCiBlbHNlIDoKICBvbzAgPSAxCiAgcGFyYW1zIFsgJ2NfcGFnZScgXSA9IG9vMAogSWkxMTFJID0gTzAwICggInBlbGlzIiAsICJnZW5lcm8iICwKIFsgInBlbGlfaWQiICwgImF1ZGlvIiAsICInJyIgLCAidGFncyIgLCAiJyciICwgIicnIiAsICJsaW5rIiAsICIncXVhbGl0eSciICwgIm5vbWJyZSIgLAogImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLAogInN0cmZ0aW1lKCclWS0lbS0lZCcsdXBkYXRlZCksIHB1bnRvcywgY2F0ZWdvcnksIGFjdGl2ZSwgdG1kYiIgLAogImdyb3VwX2lkIiAsICJjb3VudCgqKSIgLCAiZ3JvdXBfY29uY2F0KHRhZ3MsJyMnKSIgLCAiZ3JvdXBfY29uY2F0KGF1ZGlvLCcjJykiCiBdICwgWyAiZ2VuZXJvIiBdICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBnZW4gKSAuIGRlY29kZSAoICd1dGYtOCcgKSAsIFsgJ25vbWJyZScgXSAsIHBhcmFtcyApCiBPb29PMDBPT28wT09PICggSWkxMTFJICwgJ3BlbGlzJyAsIGluZm8gPSBwYXJhbXMgKQogaWYgODUgLSA4NTogT09PIC4gaWkxSTFpaTFJaUlpMSAvIElJb29vTzBvb08wb28KZGVmIG9vMG9Pb29vTzBPICggYW5ubyAsIG9yZGVyICwgcGFyYW1zICkgOgogcGFyYW1zIFsgJ2FjdGlvblBhcmFtcycgXSA9ICdhbm5vPScgKyBhbm5vCiBwYXJhbXMgWyAnc3FsX2xpbWl0JyBdID0gJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkKIGlmICdwYWdlJyBpbiBwYXJhbXMgYW5kICdjX3BhZ2UnIGluIHBhcmFtcyA6CiAgcGFyYW1zIFsgJ3NxbF9jb25kJyBdID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBwYXJhbXMgWyAncGFnZScgXSApIC4gZGVjb2RlICggJ3V0Zi04JyApCiBlbHNlIDoKICBvbzAgPSAxCiAgcGFyYW1zIFsgJ2NfcGFnZScgXSA9IG9vMAogSWkxMTFJID0gTzAwMG8wMDBvME9vICggInBlbGlzIiAsCiBbICJwZWxpX2lkIiAsICJhdWRpbyIgLCAiJyciICwgInRhZ3MiICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAic3RyZnRpbWUoJyVZLSVtLSVkJyx1cGRhdGVkKSwgcHVudG9zLCBjYXRlZ29yeSwgYWN0aXZlLCB0bWRiIiAsCiAiZ3JvdXBfaWQiICwgImNvdW50KCopIiAsICJncm91cF9jb25jYXQodGFncywnIycpIiAsICJncm91cF9jb25jYXQoYXVkaW8sJyMnKSIKIF0gLCBbICJhbm5vIiBdICwgWyBhbm5vIF0gLCBvcmRlciAsIHBhcmFtcyApCiBPb29PMDBPT28wT09PICggSWkxMTFJICwgJ3BlbGlzJyAsIGluZm8gPSBwYXJhbXMgKQogaWYgNjMgLSA2MzogT09PCmRlZiBPb29vT09Pb09vICggY2F0ZWdvcnkgLCBvcmRlciAsIHBhcmFtcyA9IHsgfSApIDoKIHBhcmFtcyBbICdhY3Rpb25QYXJhbXMnIF0gPSAnY2F0ZWdvcnk9JyArIGNhdGVnb3J5IFsgMCBdCiBwYXJhbXMgWyAnc3FsX2xpbWl0JyBdID0gJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkKIGlmICdwYWdlJyBpbiBwYXJhbXMgYW5kICdjX3BhZ2UnIGluIHBhcmFtcyA6CiAgcGFyYW1zIFsgJ3NxbF9jb25kJyBdID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBwYXJhbXMgWyAncGFnZScgXSApIC4gZGVjb2RlICggJ3V0Zi04JyApCiBlbHNlIDoKICBvbzAgPSAxCiAgcGFyYW1zIFsgJ2NfcGFnZScgXSA9IG9vMAogSWkxMTFJID0gTzAwMG8wMDBvME9vICggInBlbGlzIiAsCiBbICJwZWxpX2lkIiAsICJhdWRpbyIgLCAiJyciICwgInRhZ3MiICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAic3RyZnRpbWUoJyVZLSVtLSVkJyx1cGRhdGVkKSwgcHVudG9zLCBjYXRlZ29yeSwgYWN0aXZlLCB0bWRiIiAsCiAiZ3JvdXBfaWQiICwgImNvdW50KCopIiAsICJncm91cF9jb25jYXQodGFncywnIycpIiAsICJncm91cF9jb25jYXQoYXVkaW8sJyMnKSIKIF0gLCBbICJjYXRlZ29yeSIgXSAsIGNhdGVnb3J5ICwgb3JkZXIgLCBwYXJhbXMgKQogT29vTzAwT09vME9PTyAoIElpMTExSSAsICdwZWxpcycgLCBpbmZvID0gcGFyYW1zICkKIGlmIDUyIC0gNTI6IG9vb09vTyAlIElpSUkxaTFJICsgSUlvb29PMG9vTzBvbwpkZWYgTzAwICggdGFibGUgLCBjb2x1bW5fY29uZCAsIHZhbHVlcyAsIGlkICwgaWRfdmFsdWUgLCBvcmRlciAsIHBhcmFtcyA9IHsgfSApIDoKIGlJSUkgPSBzcWxpdGUzIC4gY29ubmVjdCAoIGkxMWkgKQogSUlpSWlpMUlpSTFpID0gaUlJSSAuIGN1cnNvciAoICkKIGlmIHBhcmFtcyBhbmQgJ3NxbF9saW1pdCcgaW4gcGFyYW1zIDoKICBJSWkxSWlJaTFJMSA9IHBhcmFtcyBbICdzcWxfbGltaXQnIF0KIGVsc2UgOgogIElJaTFJaUlpMUkxID0gJycKIGlmIHBhcmFtcyBhbmQgJ3NxbF9ncm91cCcgaW4gcGFyYW1zIDoKICBpSWlJMTExaTExSUkgPSAnIGdyb3VwIGJ5ICcgKyBwYXJhbXMgWyAnc3FsX2dyb3VwJyBdCiBlbHNlIDoKICBpSWlJMTExaTExSUkgPSAnJwogaWYgcGFyYW1zIGFuZCAnc3FsX2NvbmQnIGluIHBhcmFtcyA6CiAgaWkxSUlJMTExaWkgPSAnIGFuZCAnICsgcGFyYW1zIFsgJ3NxbF9jb25kJyBdCiBlbHNlIDoKICBpaTFJSUkxMTFpaSA9ICcnCiAgaWYgMzggLSAzODogSTEgLiBJaUlJMWkxSSAqIElpMUkKIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAiU0VMRUNUICIgKyAiLCIgLiBqb2luICggdmFsdWVzICkgKyAiLCIgKyAiLCIgLiBqb2luICggaWQgKSArICIgRlJPTSAiICsgdGFibGUgKyAiIFdIRVJFIGFjdGl2ZSA+IDAgIiArIGlpMUlJSTExMWlpICsgIiBhbmQgKCAiICsgY29sdW1uX2NvbmQgKyAiIGxpa2UgJyIgKyBpZF92YWx1ZSArICInIG9yICIgKyBjb2x1bW5fY29uZCArICIgbGlrZSAnIiArIGlkX3ZhbHVlICsgIiMlJyBvciAiICsgY29sdW1uX2NvbmQgKyAiIGxpa2UgJyUjIiArIGlkX3ZhbHVlICsgIicgb3IgIiArIGNvbHVtbl9jb25kICsgIiBsaWtlICclIyIgKyBpZF92YWx1ZSArICIjJScpICIgKyBpSWlJMTExaTExSUkgKyAiIG9yZGVyIGJ5ICIgKyAiLCIgLiBqb2luICggb3JkZXIgKSArIElJaTFJaUlpMUkxICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogaUlJSSAuIGNsb3NlICggKQogcmV0dXJuIElpMTExSQogaWYgNTEgLSA1MTogSUlJSSAtIE9Pb09vTzBvMG8wT08KZGVmIE8wMDBvMDAwbzBPbyAoIHRhYmxlICwgdmFsdWVzICwgaWRzICwgaWRzX3ZhbHVlICwgb3JkZXIgLCBwYXJhbXMgPSAnJyApIDoKIGlmIDk4IC0gOTg6IE9Pb09vTzBvMG8wT08gKiBvbyAlIElpICogSUkgJSBJaTFJCiBpaTFJSUkxMTFpaSA9ICcnCiBJSWkxSWlJaTFJMSA9ICcnCiBpSWlJMTExaTExSUkgPSAnJwogaWYgNTcgLSA1NzogSUkgKyBvb29Pb08gKyBJSSArIEkxSWlJMUlJSTExaQogaWYgcGFyYW1zIGFuZCAnc3FsX2xpbWl0JyBpbiBwYXJhbXMgOgogIElJaTFJaUlpMUkxID0gcGFyYW1zIFsgJ3NxbF9saW1pdCcgXQogaWYgcGFyYW1zIGFuZCAnc3FsX2NvbmQnIGluIHBhcmFtcyA6CiAgaWYgbGVuICggaWRzICkgPT0gbGVuICggaWRzX3ZhbHVlICkgYW5kIGxlbiAoIGlkcyApID09IDAgOgogICBpaTFJSUkxMTFpaSA9ICcgd2hlcmUgJyArIHBhcmFtcyBbICdzcWxfY29uZCcgXQogIGVsc2UgOgogICBpaTFJSUkxMTFpaSA9IHBhcmFtcyBbICdzcWxfY29uZCcgXSArICcgYW5kICcKIGlmIHBhcmFtcyBhbmQgJ3NxbF9ncm91cCcgaW4gcGFyYW1zIDoKICBpSWlJMTExaTExSUkgPSAnIGdyb3VwIGJ5ICcgKyBwYXJhbXMgWyAnc3FsX2dyb3VwJyBdCiBpSUlJID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IGlJSUkgLiBjdXJzb3IgKCApCiBpZiBsZW4gKCBpZHMgKSA9PSBsZW4gKCBpZHNfdmFsdWUgKSBhbmQgbGVuICggaWRzICkgPT0gMCA6CiAgaWYgMjUgLSAyNTogbzAwb08wb28wTzBPMAogIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAiU0VMRUNUICIgKyAiLCIgLiBqb2luICggdmFsdWVzICkgKyAiIEZST00gIiArIHRhYmxlICsgaWkxSUlJMTExaWkgKyBpSWlJMTExaTExSUkgKyAiIG9yZGVyIGJ5ICIgKyAiLCIgLiBqb2luICggb3JkZXIgKSArIElJaTFJaUlpMUkxICkKIGVsc2UgOgogIGlmIDUzIC0gNTM6IG9vIC8gb29vT29PIC8gSTFJaUkxSUlJMTFpIC8gSTFJaUkxSUlJMTFpCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTRUxFQ1QgIiArICIsIiAuIGpvaW4gKCB2YWx1ZXMgKSArICIsIiArICIsIiAuIGpvaW4gKCBpZHMgKSArICIgRlJPTSAiICsgdGFibGUgKyAiIFdIRVJFICIgKyBpaTFJSUkxMTFpaSArICgKICIgPSA/IGFuZCAiIC4gam9pbiAoIGlkcyApICsgIj0/IiApICsgaUlpSTExMWkxMUlJICsgIiBvcmRlciBieSAiICsgIiwiIC4gam9pbiAoIG9yZGVyICkgKyBJSWkxSWlJaTFJMSAsIGlkc192YWx1ZSApCiBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKIGlJSUkgLiBjbG9zZSAoICkKIHJldHVybiBJaTExMUkKIGlmIDcyIC0gNzI6IGkxaUkxCmRlZiBJSWkxMWlJMTFJSTEgKCBsaW4gLCB0aXQgLCBpZCAsIHR5cGUgLCBwYXJhbXMgKSA6CiBpdGhpbCAuIElJaSAoIGxpbiAsIHRpdCAsIGkxMWkgLCBpZCAsIHR5cGUgLCAncGxheScgLCBwYXJhbXMgKQogaWYgMzEgLSAzMTogaTFpSTEKIGlmIDE4IC0gMTg6IEkxSWlJMUlJSTExaSArIElpSUkxaTFJICUgb28wbyAqIGlpMUkxaWkxSWlJaTEKZGVmIGkxaWlJaWkxaWlpSWkgKCBwYXJhbXN0cmluZyApIDoKIE9vME8wb09PMDAgPSBkaWN0ICggcGFyc2VfcXNsICggcGFyYW1zdHJpbmcgKSApCiBpZiBPbzBPMG9PTzAwIDoKICBpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09IElpaTEgOgogICBPb28wMG8wb28wbyAoICc9PScgLCAnZ2VuZXJhbCcgLCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3Nlcmllc19kaWJ1am9zJyA6CiAgIE9vbzAwbzBvbzBvICggJ2xpa2UnICwgJyVkaWJ1am9zJScgLCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3Nlcmllc19yZXRybycgOgogICBPb28wMG8wb28wbyAoICc9PScgLCAncmV0cm8nICwgT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdzZXJpZXNfZG9jdW1lbnRhbGVzJyA6CiAgIE9vbzAwbzBvbzBvICggJ2xpa2UnICwgJyVkb2N1bWVudGFsJScgLCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3Nlcmllc19tdXNpY2EnIDoKICAgT29vMDBvMG9vMG8gKCAnbGlrZScgLCAnJW11c2ljYSUnICwgT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICd0ZWxlbm92ZWxhcycgOgogICBPb28wMG8wb28wbyAoICdsaWtlJyAsICcldGVsZW5vdmVsYSUnICwgT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdzZXJpZXNfYW5pbWUnIDoKICAgT29vMDBvMG9vMG8gKCAnbGlrZScgLCAnJWFuaW1lJScgLCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3NlYXJjaFNlcmllJyA6CiAgIElJSUkxSSAoIElJaTExSWkxICwgJ3NlcmllcycgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAnc2VhcmNoUGVsaScgOgogICBJSUlJMUkgKCBpaUkxMTExSUlpaUkgLCAncGVsaXMnICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3Nlcmllc0J5TGFuZycgOgogICBpZiAnbGFuZycgaW4gT28wTzBvT08wMCA6CiAgICBPME8wME9vb08wME8gKCBPbzBPMG9PTzAwIFsgJ2xhbmcnIF0gLCAnc2VyaWVzJyAsIE9vME8wb09PMDAgKQogICBlbHNlIDoKICAgIE8wTzAwT29vTzAwTyAoIE5vbmUgLCAnc2VyaWVzJyAsIE9vME8wb09PMDAgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAncGVsaXNCeUxhbmcnIDoKICAgaWYgJ2xhbmcnIGluIE9vME8wb09PMDAgOgogICAgTzBPMDBPb29PMDBPICggT28wTzBvT08wMCBbICdsYW5nJyBdICwgJ3BlbGlzJyAsIE9vME8wb09PMDAgKQogICBlbHNlIDoKICAgIE8wTzAwT29vTzAwTyAoIE5vbmUgLCAncGVsaXMnICwgT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdzZXJpZXNCeUFaJyA6CiAgIG9PT08wbyAoIE9vME8wb09PMDAgLCAnc2VyaWUnICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3Nlcmllc19tYXNfdmlzdGFzJyA6CiAgIGkxMWlJSWkgKCAidmlld3MiICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3Nlcmllc19tYXNfdmlzdGFzX21lcycgOgogICBpMTFpSUlpICggImxhc3RfbW9udGhfdmlld3MiICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3BlbGlzX21hc192aXN0YXMnIDoKICAgT29vT29Pb29vICggWyAnc3VtKHZpZXdzKSBkZXNjJyBdICwgeyAic3FsX2NvbmQiIDogIiAgYWN0aXZlID4gMCAiICwgJ3NxbF9ncm91cCcgOiAnIGdyb3VwX2lkJyAsICdzcWxfbGltaXQnIDogJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkgLCAnYW5ubycgOiAndHJ1ZScgLCAicHVudG9zIiA6ICJ0cnVlIiB9ICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3BlbGlzX21hc192aXN0YXNfbWVzJyA6CiAgIE9vb09vT29vbyAoIFsgJ3N1bShsYXN0X21vbnRoX3ZpZXdzKSBkZXNjJyBdICwgeyAic3FsX2NvbmQiIDogIiAgYWN0aXZlID4gMCAiICwgJ3NxbF9ncm91cCcgOiAnIGdyb3VwX2lkJyAsICdzcWxfbGltaXQnIDogJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkgLCAnYW5ubycgOiAndHJ1ZScgLCAicHVudG9zIiA6ICJ0cnVlIiB9ICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3BlbGlzX2RpYnVqb3NfbWFzX3Zpc3RhcycgOgogICBPb29Pb09vb28gKCBbICdzdW0odmlld3MpIGRlc2MnIF0gLCB7ICJzcWxfY29uZCIgOiAiICBjYXRlZ29yeSA9ICdEaWJ1am9zJyBhbmQgYWN0aXZlID4gMCAiICwgJ3NxbF9ncm91cCcgOiAnIGdyb3VwX2lkJyAsICdzcWxfbGltaXQnIDogJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkgLCAnYW5ubycgOiAndHJ1ZScgLCAicHVudG9zIiA6ICJ0cnVlIiB9ICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3BlbGlzX2RpYnVqb3NfbWFzX3Zpc3Rhc19tZXMnIDoKICAgT29vT29Pb29vICggWyAnc3VtKGxhc3RfbW9udGhfdmlld3MpIGRlc2MnIF0gLCB7ICJzcWxfY29uZCIgOiAiIGNhdGVnb3J5ID0gJ0RpYnVqb3MnIGFuZCBhY3RpdmUgPiAwICIgLCAnc3FsX2dyb3VwJyA6ICcgZ3JvdXBfaWQnICwgJ3NxbF9saW1pdCcgOiAnIGxpbWl0ICcgKyBzdHIgKCBvb28wb29Pb08wT28gKSAsICdhbm5vJyA6ICd0cnVlJyAsICJwdW50b3MiIDogInRydWUiIH0gKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAndWx0aW1hc19zZXJpZXMnIDoKICAgaUkxSWlpSUkxaUkgKCBJSWkxMUlpMSAsICdzZXJpZXMnICwgImFuZCBjYXRlZ29yeSBub3QgaW4gKCdEb2N1bWVudGFsJywgJ011c2ljYScsICdBbmltZScpIiApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICd1bHRpbWFzX3Nlcmllc19hbmltZScgOgogICBpSTFJaWlJSTFpSSAoIElJaTExSWkxICwgJ3NlcmllcycgLCAiYW5kIGNhdGVnb3J5ID0gKCdBbmltZScpIiApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICd1bHRpbW9zX2RvY3VtZW50YWxlcycgOgogICBpSTFJaWlJSTFpSSAoIElJaTExSWkxICwgJ3NlcmllcycgLCAiYW5kIGNhdGVnb3J5ID0gKCdEb2N1bWVudGFsJykiICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3VsdGltYXNfbXVzaWNhcycgOgogICBpSTFJaWlJSTFpSSAoIElJaTExSWkxICwgJ3NlcmllcycgLCAiYW5kIGNhdGVnb3J5ID0gKCdNdXNpY2EnKSIgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAndWx0aW1hc19wZWxpcycgOgogICBPbzBPMG9PTzAwIFsgJ3NxbF9jb25kJyBdID0gIiAgYWN0aXZlID4gMCAiCiAgIE9vME8wb09PMDAgWyAnc3FsX2dyb3VwJyBdID0gJyBncm91cF9pZCcKICAgT28wTzBvT08wMCBbICdwdW50b3MnIF0gPSAndHJ1ZScKICAgT28wTzBvT08wMCBbICdhbm5vJyBdID0gJ3RydWUnCiAgIE9vME8wb09PMDAgWyAnZGF0ZScgXSA9ICd0cnVlJwogICBPb29vT09Pb09vICggWyAnUGVsaWN1bGEnIF0gLCBbICd1cGRhdGVkIGRlc2MnICwgJ2Fubm8gZGVzYycgXSAsIE9vME8wb09PMDAgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAnc2VyaWUnIDoKICAgTzBPICggT28wTzBvT08wMCBbICdzZXJpZV9pZCcgXSApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdhZGREb3dubG9hZCcgOgogICBPb08wb29PT08gKCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ2FkZGZhdicgOgogICBpaW9PMG9vMDBPME8gKCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ2FkZGZhdnMnIDoKICAgaWlvTzBvbzAwTzBPICggT28wTzBvT08wMCAsIGZhdm9yaXRvcyA9IGlpSWlpMUlJaTFJICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ2FkZGZhdnAnIDoKICAgaWlvTzBvbzAwTzBPICggT28wTzBvT08wMCAsIGZhdm9yaXRvcyA9IGlJSWlJaUkxSTFJICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ2FkZGZhdmQnIDoKICAgaWlvTzBvbzAwTzBPICggT28wTzBvT08wMCAsIGZhdm9yaXRvcyA9IGlpSTFJaUkxaWlJSTEgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAncm1mYXYnIDoKICAgT29PT29PTzAgKCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3JtZmF2cCcgOgogICBPb09Pb09PMCAoIE9vME8wb09PMDAgLCBmYXZvcml0b3MgPSBpSUlpSWlJMUkxSSApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdybWZhdmQnIDoKICAgT29PT29PTzAgKCBPbzBPMG9PTzAwICwgZmF2b3JpdG9zID0gaWlJMUlpSTFpaUlJMSApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdybWZhdnMnIDoKICAgT29PT29PTzAgKCBPbzBPMG9PTzAwICwgZmF2b3JpdG9zID0gaWlJaWkxSUlpMUkgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAnbGlzdGZhdicgOgogICBPMDAwMDAgKCBpSWlJaWlpSWkxSTFJICwgZmF2ID0gaTExaWlpICwgZmF2TGl0ZXJhbCA9ICcnICwgdGV4dCA9ICcnICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ2xpc3RmYXZzJyA6CiAgIE8wMDAwMCAoIGlpSWlpMUlJaTFJICwgZmF2ID0gaTExICwgZmF2TGl0ZXJhbCA9ICdzJyAsIHRleHQgPSAnU2VyaWVzJyApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdsaXN0ZmF2cCcgOgogICBPMDAwMDAgKCBpSUlpSWlJMUkxSSAsIGZhdiA9IElpaUlpMTFpSUlJMSAsIGZhdkxpdGVyYWwgPSAncCcgLCB0ZXh0ID0gJ1BlbGlzJyApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdsaXN0ZmF2ZCcgOgogICBPMDAwMDAgKCBpaUkxSWlJMWlpSUkxICwgZmF2ID0gb29JSUlJICwgZmF2TGl0ZXJhbCA9ICdkJyAsIHRleHQgPSAnRGlidWpvcycgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAndG9fdW53YXRjaCcgOgogICBpMUlJMSAoIE9vME8wb09PMDAgWyAnaWRGaWxlJyBdICwgT28wTzBvT08wMCBbICdpZFBhdGgnIF0gLCBPbzBPMG9PTzAwIFsgJ2ZpbGVOYW1lJyBdICwgRmFsc2UgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAndG9fd2F0Y2gnIDoKICAgaTFJSTEgKCBPbzBPMG9PTzAwIFsgJ2lkRmlsZScgXSAsIE9vME8wb09PMDAgWyAnaWRQYXRoJyBdICwgT28wTzBvT08wMCBbICdmaWxlTmFtZScgXSAsIFRydWUgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAndG9fc2FnYScgOgogICBPMG9vMDAgKCBPbzBPMG9PTzAwIFsgJ3NhZ2EnIF0gKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAndmlld19zZXJpZScgOgogICBJSTFJaTFJICggT28wTzBvT08wMCBbICdzZXJpZV9pZCcgXSApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICd2aWV3X3RlbXAnIDoKICAgT28wbyAoIE9vME8wb09PMDAgWyAnc2VyaWVfaWQnIF0gLCBPbzBPMG9PTzAwIFsgJ3RlbXBfaWQnIF0gKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAnbGlzdF90ZW1wJyA6CiAgIG9vTzAgKCBPbzBPMG9PTzAwIFsgJ3NlcmllX2lkJyBdICwgT28wTzBvT08wMCBbICd0ZW1wX2lkJyBdICwgT28wTzBvT08wMCBbICdjYXJhdHVsYScgXSAsIE9vME8wb09PMDAgWyAncG9zdGVyJyBdICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3BsYXknIDoKICAgSUlpMTFpSTExSUkxICggT28wTzBvT08wMCBbICdsaW4nIF0gLCBPbzBPMG9PTzAwIFsgJ3RpdCcgXSAsIE9vME8wb09PMDAgWyAnaWQnIF0gLCBPbzBPMG9PTzAwIFsgJ3R5cGUnIF0gLCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyAnYWN0aW9uJyBdID09ICdhbnlvJyA6CiAgIE9vME8wb09PMDAgWyAnc3FsX2NvbmQnIF0gPSAid2hlcmUgYWN0aXZlID4gMCIKICAgb09vMCAoICdhbnlvX2RldGFpbCcgLCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyAnYWN0aW9uJyBdID09ICdhbnlvX2RldGFpbCcgOgogICBPbzBPMG9PTzAwIFsgJ3NxbF9jb25kJyBdID0gIiAgYWN0aXZlID4gMCAiCiAgIE9vME8wb09PMDAgWyAnc3FsX2dyb3VwJyBdID0gIiBncm91cF9pZCIKICAgT28wTzBvT08wMCBbICdwdW50b3MnIF0gPSAidHJ1ZSIKICAgb28wb09vb29PME8gKCBPbzBPMG9PTzAwIFsgJ2Fubm8nIF0gLCBbICdub21icmUgYXNjJyBdICwgT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgJ2FjdGlvbicgXSA9PSAndWx0aW1hc19wZWxpc19hbnlvJyA6CiAgIG9PMG9vTzBvT08wICggKQogIGVsaWYgT28wTzBvT08wMCBbICdhY3Rpb24nIF0gPT0gJ3VsdGltYXNfcGVsaXNfYW55b19kZXRhaWwnIDoKICAgb28wb09vb29PME8gKCBPbzBPMG9PTzAwIFsgJ2Fubm8nIF0gLCBbICd1cGRhdGVkIGRlc2MnIF0gLCB7ICJzcWxfY29uZCIgOiAiICBhY3RpdmUgPiAwICIgLCAnc3FsX2dyb3VwJyA6ICcgZ3JvdXBfaWQnICwgJ3NxbF9saW1pdCcgOiAnIGxpbWl0ICcgKyBzdHIgKCBvb28wb29Pb08wT28gKSAsICdkYXRlJyA6ICd0cnVlJyAsICJwdW50b3MiIDogInRydWUiIH0gKQogIGVsaWYgT28wTzBvT08wMCBbICdhY3Rpb24nIF0gPT0gJ2FueW9fdG9wJyA6CiAgIE9vME8wb09PMDAgWyAnc3FsX2NvbmQnIF0gPSAid2hlcmUgYWN0aXZlID4gMCBhbmQgcHVudG9zID4gMCIKICAgb09vMCAoICdhbnlvX3RvcF9kZXRhaWwnICwgT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgJ2FjdGlvbicgXSA9PSAnYW55b190b3BfZGV0YWlsJyA6CiAgIE9vME8wb09PMDAgWyAnc3FsX2NvbmQnIF0gPSAiICBhY3RpdmUgPiAwIGFuZCBwdW50b3MgPiAwICIKICAgT28wTzBvT08wMCBbICdzcWxfZ3JvdXAnIF0gPSAiIGdyb3VwX2lkIgogICBPbzBPMG9PTzAwIFsgJ3B1bnRvcycgXSA9ICJ0cnVlIgogICBPbzBPMG9PTzAwIFsgJ3NxbF9saW1pdCcgXSA9ICcgbGltaXQgJyArIHN0ciAoIG9vbzBvb09vTzBPbyApCiAgIG9vMG9Pb29vTzBPICggT28wTzBvT08wMCBbICdhbm5vJyBdICwgWyAncHVudG9zIGRlc2MnICwgJ25vbWJyZSBhc2MnIF0gLCBPbzBPMG9PTzAwICkKICBlbGlmIE9vME8wb09PMDAgWyAnYWN0aW9uJyBdID09ICdzYWdhcycgOgogICBPT28wb29PbzAgKCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgJ2FjdGlvbicgXSA9PSAnc2FnYV9kZXRhaWwnIDoKICAgT28wTzBvT08wMCBbICdzcWxfY29uZCcgXSA9ICIgIGFjdGl2ZSA+IDAgIgogICBPbzBPMG9PTzAwIFsgJ3NxbF9ncm91cCcgXSA9ICcgZ3JvdXBfaWQnCiAgIE9vME8wb09PMDAgWyAnYW5ubycgXSA9ICd0cnVlJwogICBPbzBPMG9PTzAwIFsgJ3B1bnRvcycgXSA9ICd0cnVlJwogICBJMUlpSUkxSWlpSTFJICggT28wTzBvT08wMCBbICdzYWdhJyBdICwgT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgJ2FjdGlvbicgXSA9PSAnbGlzdF9nZW5lcm9zJyA6CiAgIElJSTFJSWlJSTExICggKQogIGVsaWYgT28wTzBvT08wMCBbICdhY3Rpb24nIF0gPT0gJ2dlbmVyb19kZXRhaWwnIDoKICAgT08wT08wT08gKCBPbzBPMG9PTzAwIFsgJ2dlbmVybycgXSAsIE9vME8wb09PMDAgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAncGVsaV9pbmYnIDoKICAgT28wTzBvT08wMCBbICdzcWxfY29uZCcgXSA9ICIgIGFjdGl2ZSA+IDAgIgogICBPbzBPMG9PTzAwIFsgJ3NxbF9ncm91cCcgXSA9ICcgZ3JvdXBfaWQnCiAgIE9vME8wb09PMDAgWyAncHVudG9zJyBdID0gJ3RydWUnCiAgIE9vME8wb09PMDAgWyAnYW5ubycgXSA9ICd0cnVlJwogICBPb29vT09Pb09vICggWyAnRGlidWpvcycgXSAsIFsgJ25vbWJyZScgXSAsIE9vME8wb09PMDAgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAncGVsaV9hbmltZScgOgogICBPbzBPMG9PTzAwIFsgJ3NxbF9jb25kJyBdID0gIiAgYWN0aXZlID4gMCAiCiAgIE9vME8wb09PMDAgWyAnc3FsX2dyb3VwJyBdID0gJyBncm91cF9pZCcKICAgT28wTzBvT08wMCBbICdwdW50b3MnIF0gPSAndHJ1ZScKICAgT28wTzBvT08wMCBbICdhbm5vJyBdID0gJ3RydWUnCiAgIE9vb29PT09vT28gKCBbICdBbmltZScgXSAsIFsgJ25vbWJyZScgXSAsIE9vME8wb09PMDAgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAndG9wX3BlbGlfaW5mJyA6CiAgIE9vME8wb09PMDAgWyAnc3FsX2NvbmQnIF0gPSAiICBhY3RpdmUgPiAwICIKICAgT28wTzBvT08wMCBbICdzcWxfZ3JvdXAnIF0gPSAnIGdyb3VwX2lkJwogICBPbzBPMG9PTzAwIFsgJ3B1bnRvcycgXSA9ICd0cnVlJwogICBPbzBPMG9PTzAwIFsgJ2Fubm8nIF0gPSAndHJ1ZScKICAgT29vb09PT29PbyAoIFsgJ0RpYnVqb3MnIF0gLCBbICdwdW50b3MgZGVzYycgLCAnbm9tYnJlIGFzYycgXSAsIE9vME8wb09PMDAgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAncGVsaXNCeUFaJyA6CiAgIG9PT08wbyAoIE9vME8wb09PMDAgLCAncGVsaScgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAnbGFzdF9wZWxpX2luZicgOgogICBPbzBPMG9PTzAwIFsgJ3NxbF9jb25kJyBdID0gIiAgYWN0aXZlID4gMCAiCiAgIE9vME8wb09PMDAgWyAnc3FsX2dyb3VwJyBdID0gJyBncm91cF9pZCcKICAgT28wTzBvT08wMCBbICdwdW50b3MnIF0gPSAndHJ1ZScKICAgT28wTzBvT08wMCBbICdkYXRlJyBdID0gJ3RydWUnCiAgIE9vME8wb09PMDAgWyAnYW5ubycgXSA9ICd0cnVlJwogICBPb29vT09Pb09vICggWyAnRGlidWpvcycgXSAsIFsgJ3VwZGF0ZWQgZGVzYycgLCAnYW5ubyBkZXNjJyBdICwgT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdzZXJpZXNfbWVudScgOgogICBpSWkxaWlJaUlpICggSTFJMWkxaTExSTFpICggJ1NlcmllcycgKSApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdwZWxpc19tZW51JyA6CiAgIGlJaTFpaUlpSWkgKCBJMUkxaTFpMTFJMWkgKCAnUGVsaXMnICkgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAnZGlidWpvc19tZW51JyA6CiAgIGlJaTFpaUlpSWkgKCBJMUkxaTFpMTFJMWkgKCAnRGlidWpvcycgKSApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdhbmltZV9tZW51JyA6CiAgIGlJaTFpaUlpSWkgKCBJMUkxaTFpMTFJMWkgKCAnQW5pbWUnICkgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAnZG9jdW1lbnRhbGVzX21lbnUnIDoKICAgaUlpMWlpSWlJaSAoIEkxSTFpMWkxMUkxaSAoICdEb2N1bWVudGFsJyApICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ211c2ljYV9tZW51JyA6CiAgIGlJaTFpaUlpSWkgKCBJMUkxaTFpMTFJMWkgKCAnTXVzaWNhJyApICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ2hlcnJhbWllbnRhc19tZW51JyA6CiAgIGlJaTFpaUlpSWkgKCBJMUkxaTFpMTFJMWkgKCAnSGVycmFtaWVudGFzJyApICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3ZhbGlkYXRlRm9sZGVyQ29uZmlnJyA6CiAgIG9PbyAoICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ2NsZWFuJyA6CiAgIG9PMG9PICggKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAnZG93bmxvYWRzJyA6CiAgIElpaTFvTzAwbzAwMDBPTzBPICggKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSAncGxheUxvY2FsJyA6CiAgIGlpSUlpaUlJMSA9IGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKQogICBpMTExaWkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBwYXRoID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBPbzBPMG9PTzAwIFsgJ3BhdGgnIF0gKSApCiAgIGlmIDExIC0gMTE6IElJSUkgLyBPT29Pb08wbzBvME9PICogaTFpSTEgLiBJSUlJIC0gaWkxSTFpaTFJaUlpMQogICB4Ym1jcGx1Z2luIC4gc2V0UmVzb2x2ZWRVcmwgKCBpaUlJaWlJSTEgLCBUcnVlICwgaTExMWlpICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3JtRG93bmxvYWQnIDoKICAgb29vbzBvICggT28wTzBvT08wMCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICd2YWxpZGF0ZUNyZWRlbnRpYWxzJyA6CiAgIGkxSSAoIE9vME8wb09PMDAgWyAndXJsJyBdICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ2NyZWF0ZUNvcHknIDoKICAgTzBPMDAwbyAoICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ3Jlc3RvcmVDb3B5JyA6CiAgIG9PT29PTyAoICkKICBlbGlmIE9vME8wb09PMDAgWyBvT09PME8wIF0gPT0gJ29wZW5TZXR0aW5ncycgOgogICBfX3NldHRpbmdzX18gLiBvcGVuU2V0dGluZ3MgKCApCiAgZWxpZiBPbzBPMG9PTzAwIFsgb09PTzBPMCBdID09ICdpbnN0YWxsJyA6CiAgIG9vbzBPMDAwb09vMCAoIE9vME8wb09PMDAgKQogIGVsaWYgT28wTzBvT08wMCBbIG9PT08wTzAgXSA9PSBJaUlJaTFJMUlpIDoKICAgTzBPT29PbyAoIE9vME8wb09PMDAgKQogZWxzZSA6CiAgaWYgNDEgLSA0MTogaTFpSTEgKiBPT29Pb08wbzBvME9PIC4gbzAwb08wb28wTzBPMCAvIG9vCiAgSTFpSUkxaTFpICggaTExaSApCiAgaUlpMWlpSWlJaSAoIEkxSTFpMWkxMUkxaSAoICJkZWZhdWx0IiApICkKICBpZiAxMDAgLSAxMDA6IG9vMG8gLyBJSW9vb08wb29PMG9vICsgb09PIC4gb29vT29PIC4gT09vT29PMG8wbzBPTyArIElpCiAgaWYgNyAtIDc6IG8wMG9PMG9vME8wTzAgLyBpaUlJaTFpMUlpaSAuIG9vMG8KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyA6CiBpMWlpSWlpMWlpaUlpICggc3lzIC4gYXJndiBbIDIgXSBbIDEgOiBdICkKIGlmIDI0IC0gMjQ6IGlpMUkxaWkxSWlJaTEgLSBpaUlJaTFpMUlpaSAqIElpIC0gaTFpSTEgLyBPT29Pb08wbzBvME9PIC8gb29vT29PCiBpZiA2MyAtIDYzOiBpaTFJMWlpMUlpSWkxIC4gSTEgLiBJaUlJMUlpSSAqIElpSUkxaTFJIC8gb29Pb29PME9PTwogaWYgOTQgLSA5NDogSWkxSQogaWYgNCAtIDQ6IElpSUkxSWlJICUgSTFJaUkxSUlJMTFpIC4gSTFJaUkxSUlJMTFpCiMgODA3Y2IxYmZmZmIyMzRkYWNlM2Y5MzBmNTcxYTkwMzlkNzZmNGNmOQo=')