import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys
import re
import os
import xbmcgui
import xbmc
import HTMLParser
import xbmcplugin
import xbmcaddon
import urllib
import urllib2
import sqlite3
import base64
import zlib
from urllib2 import HTTPError
from urllib2 import URLError
import traceback
import unicodedata
import requests
import random
import datetime
from requests . packages . urllib3 . exceptions import InsecureRequestWarning
requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning )
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
__settings__ = xbmcaddon . Addon ( id = "plugin.video.palantir" )
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
if 85 - 85: oo
if 70 - 70: iIi11 + Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / iIi11
def oo0o ( text ) :
 OOO0O00O0 = '7Se10gAIe-T0_a'
 if 17 - 17: IIoooO0ooO0oo
 OOO0O00O0 = base64 . urlsafe_b64decode ( 'N1NlMTBnQUllLVQwX2E=' )
 try :
  o0ooo = base64 . urlsafe_b64decode ( str ( text ) )
  II1111I1 = [ ]
  for O00Ooo0o0OO in xrange ( len ( o0ooo ) ) :
   I1iI1iiiIiI1 = OOO0O00O0 [ O00Ooo0o0OO % len ( OOO0O00O0 ) ]
   OO0O0 = chr ( ord ( o0ooo [ O00Ooo0o0OO ] ) - ord ( I1iI1iiiIiI1 ) % 256 )
   II1111I1 . append ( OO0O0 )
  ii1i1ii1I = '' . join ( II1111I1 )
  return ii1i1ii1I
 except TypeError , o0o0000O0 :
  return text
  if 70 - 70: i1iI1 % Ii1I
  if 64 - 64: oo . OOoOoO0o0o0OO . OOO - ii1I1ii1IiIi1 . oooOoO * Ii
  if 63 - 63: OOoOoO0o0o0OO . iiIIi1i1Iii / IIoooO0ooO0oo . Ii / IIoooO0ooO0oo % ii1I1ii1IiIi1
  if 3 - 3: iIi11 % ooOooO0OOO * IiII1i1I / OOO * IiII1i1I
  if 51 - 51: iiIIi1i1Iii . IiII1i1I % OOoOoO0o0o0OO
  if 31 - 31: i1iI1 / i1iI1 % II * IiII1i1I - II
def OOo0000oO ( ) :
 return 'eJzLKCkpsNLXL8-sSixKSU4syU_M0UstrgRi_YDEnMS8kswiAO2-DU0='
 if 48 - 48: iiIIi1i1Iii % OOO
 if 52 - 52: II
def I111I11I11111 ( bas ) :
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 I11iIiIIi = ''
 if 28 - 28: IIII
 try :
  if 56 - 56: iiIIi1i1Iii + IIII . IiII1i1I - ooOooO0OOO + oo / IiII1IiI
  OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IGxvYyBmcm9tIHZlcnNpb24=' ) )
  oO = OO0o . fetchone ( )
  I11iIiIIi = oO [ 0 ]
  IIIii1Ii . close ( )
 except :
  try :
   IIIii1Ii . close ( )
  except :
   pass
   if 40 - 40: ii1I1ii1IiIi1 * oo / I1
  try :
   os . remove ( bas )
  except :
   pass
 return str ( I11iIiIIi . strip ( ) )
 if 28 - 28: iIi11 - o00oO0oo0O0O0 / ooOooO0OOO + IiII1i1I / Ii
 if 41 - 41: i1iI1 - OOO % I1IiI1III11i - IIoooO0ooO0oo + I1IiI1III11i
def I1iiI1I ( url , post = None ) :
 if 12 - 12: ii1I1ii1IiIi1
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( url , post , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 return iiII
 if 51 - 51: IIII / iiIIi1i1Iii
 if 56 - 56: i1iI1
def i1I1IIIII ( bd , id , val , type ) :
 try :
  I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
  if 92 - 92: I1 - I1IiI1III11i / oo . OOoOoO0o0o0OO / II - oOO
  ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3F1YWxpdHkucGhwP3R5cGU9JXNpZD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , type , id , str ( val ) )
  I1iiI1I ( ooO000oOo00 )
  oO00ooOoOOo0o = id . split ( '-' )
  if 9 - 9: iiIIi1i1Iii % OOO * oOO + iiIIi1i1Iii . IiII1IiI
  IIIii1Ii = sqlite3 . connect ( bd )
  OO0o = IIIii1Ii . cursor ( )
  if type == 'series' :
   if oO00ooOoOOo0o [ 2 ] :
    if 100 - 100: oOO . oo / Ii * IIII
    OO0o . execute ( base64 . urlsafe_b64decode (
 'VVBEQVRFIGNhcGl0dWxvcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8gQU5EIGNhcGl0dWxvX2lkID0gPw==' ) ,
 ( str ( val ) , int ( oO00ooOoOOo0o [ 0 ] ) , int ( oO00ooOoOOo0o [ 1 ] ) , oO00ooOoOOo0o [ 2 ] , ) )
   elif oO00ooOoOOo0o [ 1 ] :
    if 13 - 13: oOO + oOO + IIII . II - IIoooO0ooO0oo * ooOooO0OOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBxdWFsaXR5PT8gV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) ,
 ( str ( val ) , int ( oO00ooOoOOo0o [ 0 ] ) , int ( oO00ooOoOOo0o [ 1 ] ) , ) )
   elif oO00ooOoOOo0o [ 0 ] :
    if 35 - 35: oOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPw==' ) ,
 ( str ( val ) , int ( oO00ooOoOOo0o [ 0 ] ) , ) )
  else :
   if 92 - 92: i1iI1
   OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHBlbGlzIFNFVCBxdWFsaXR5PT8gV0hFUkUgcGVsaV9pZCA9ID8=' ) ,
 ( str ( val ) , int ( oO00ooOoOOo0o [ 0 ] ) , ) )
  IIIii1Ii . commit ( )
  IIIii1Ii . close ( )
 except Exception as o0o0000O0 :
  pass
  if 87 - 87: oooOoO / I1 % iiIIi1i1Iii
  if 49 - 49: OOO * Ii1I . OOO
def ooO0O0O ( link , bd , id , temp_id = 0 ) :
 iiIii1IIi1I = [ ]
 try :
  iIiiIi1i1i1i1 = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
  ooO000oOo00 = oo0o ( str ( link ) )
  iIiiIi1i1i1i1 [ 'referer' ] = '/' . join ( ooO000oOo00 . split ( '/' ) [ : 4 ] )
  iIiiIi1i1i1i1 [ 'connection' ] = 'keep-alive'
  Ii11 = urllib2 . Request ( ooO000oOo00 , None , iIiiIi1i1i1i1 )
  I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
  iiII = I11Iii11i1Ii1 . read ( )
  I11Iii11i1Ii1 . close ( )
  IIi11Ii1 = '/' . join ( ooO000oOo00 . split ( '/' ) [ 0 : 5 ] )
  O0Oo0oOO = re . findall ( 'class="list_row".*data-file-id="(.*?)"' , iiII )
  if 48 - 48: IIII * iIi11 + I1IiI1III11i
  OOooO0O = re . findall ( 'class="name">\s*<a.*data-action-before="preview".*>(.*?)</a>' , iiII )
  o0o = HTMLParser . HTMLParser ( )
  if 7 - 7: o00oO0oo0O0O0 . oooOoO % Ii
  if len ( O0Oo0oOO ) > 0 :
   try :
    IIIii1Ii = sqlite3 . connect ( bd )
    OO0o = IIIii1Ii . cursor ( )
    if temp_id > 0 :
     if 32 - 32: ii1I1ii1IiIi1 + I1 - IiII1i1I % Ii1I + oOO
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzX3RlbXAgV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) , ( id , temp_id , ) )
    else :
     if 1 - 1: OOoOoO0o0o0OO % I1IiI1III11i
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzIFdIRVJFIHNlcmllX2lkID0gPw==' ) , ( id , ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    if oO [ 0 ] < len ( O0Oo0oOO ) :
     I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
     if temp_id > 0 :
      if 75 - 75: IiII1IiI
      ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdGVtcD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , id , temp_id , str ( len ( O0Oo0oOO ) ) )
     else :
      if 36 - 36: oooOoO % I1IiI1III11i
      ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdmFsPSVz' ) ) % (
 I11iIiIIi , id , str ( len ( O0Oo0oOO ) ) )
     I1iiI1I ( ooO000oOo00 )
     if 38 - 38: OOO * Ii
     IIIii1Ii = sqlite3 . connect ( bd )
     OO0o = IIIii1Ii . cursor ( )
     if temp_id > 0 :
      if 6 - 6: oo % I1IiI1III11i . iIi11 + oooOoO . oo % ii1I1ii1IiIi1
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBuX2VwaT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8=' ) , ( len ( O0Oo0oOO ) , id , temp_id , ) )
     else :
      if 17 - 17: OOoOoO0o0o0OO - IIoooO0ooO0oo + iiIIi1i1Iii
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgbl9lcGk9PyBXSEVSRSBzZXJpZV9pZCA9ID8=' ) , ( len ( O0Oo0oOO ) , id , ) )
     IIIii1Ii . commit ( )
     IIIii1Ii . close ( )
   except Exception as o0o0000O0 :
    pass
  for i1II1I in xrange ( 0 , len ( O0Oo0oOO ) ) :
   iiIii1IIi1I . append ( ( o0o . unescape ( OOooO0O [ i1II1I ] . decode ( 'utf-8' ) ) , oOOOOo ( '%s/p,%s,list,1,3.avi' % ( IIi11Ii1 , O0Oo0oOO [ i1II1I ] ) ) ) )
 except ( HTTPError , URLError ) as o0o0000O0 :
  ooO = xbmcgui . ListItem ( 'Enlace borrado' , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , False , ooO )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , 'Enlace borrado' , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return iiIii1IIi1I
 if 49 - 49: oo * iIi11 % II + I1
def Ii1IIiI11iI1 ( url , decode = True ) :
 if decode :
  url = oo0o ( url )
  if 82 - 82: Ii1I * i1iI1 - oo . iiIIi1i1Iii . I1IiI1III11i % o00oO0oo0O0O0
 if base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' ) in url :
  return base64 . urlsafe_b64decode ( 'ZGs=' )
  if 76 - 76: IiII1i1I % iIi11 + OOO + ii1I1ii1IiIi1
 elif base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' ) in url :
  return base64 . urlsafe_b64decode ( 'Y3A=' )
  if 67 - 67: II
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' ) in url :
  if 24 - 24: II / oooOoO - OOoOoO0o0o0OO - ii1I1ii1IiIi1
  return base64 . urlsafe_b64decode ( 'dWs=' )
  if 40 - 40: II - IIoooO0ooO0oo / iIi11 * II . Ii
 elif base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' ) in url :
  return base64 . urlsafe_b64decode ( 'cHQ=' )
  if 78 - 78: Ii1I + OOO - oOO
 elif base64 . urlsafe_b64decode ( 'ay1iYWdp' ) in url or base64 . urlsafe_b64decode ( 'a2JhZ2k=' ) in url :
  return base64 . urlsafe_b64decode ( 'a2I=' )
  if 32 - 32: Ii . iiIIi1i1Iii / oooOoO % IiII1i1I / I1 * o00oO0oo0O0O0
 elif base64 . urlsafe_b64decode ( 'cnR2ZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'cmU=' )
  if 53 - 53: OOO * ooOooO0OOO % iIi11
 elif base64 . urlsafe_b64decode ( 'eW91dHViZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'eXQ=' )
  if 15 - 15: IiII1IiI + IIII * iIi11 . II
 elif base64 . urlsafe_b64decode ( 'aHR0cHM6Ly9nbG9yaWEudHYv' ) in url :
  return base64 . urlsafe_b64decode ( 'Z2xvcmlh' )
  if 6 - 6: I1
 elif base64 . urlsafe_b64decode ( 'Z2xvcmlhLnR2' ) in url :
  return base64 . urlsafe_b64decode ( 'c3RhbmRhcmQ=' )
  if 94 - 94: IIoooO0ooO0oo + oooOoO
 elif base64 . urlsafe_b64decode ( 'cGVsaXNpcGFk' ) in url :
  return base64 . urlsafe_b64decode ( 'dGs=' )
  if 56 - 56: ooOooO0OOO % IiII1IiI . II / OOO
 elif base64 . urlsafe_b64decode ( 'YXJjaGl2ZS5vcmc=' ) in url :
  return base64 . urlsafe_b64decode ( 'YXI=' )
  if 26 - 26: ooOooO0OOO . IIII % iIi11
 else :
  return base64 . urlsafe_b64decode ( 'dWs=' )
  if 37 - 37: iIi11 * oOO - ooOooO0OOO - iiIIi1i1Iii
def I1i1 ( urls , decode = True ) :
 ooO000oOo00 = urls . split ( ' ' ) [ 0 ]
 if decode :
  ooO000oOo00 = oo0o ( ooO000oOo00 )
  if 23 - 23: II / oOO / IiII1IiI - IiII1i1I - oo % oo
 if base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' )
  if 94 - 94: IIoooO0ooO0oo % o00oO0oo0O0O0 * ii1I1ii1IiIi1 . oooOoO / iIi11 * OOoOoO0o0o0OO
 elif base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' )
  if 61 - 61: o00oO0oo0O0O0 * iIi11 + oo / oooOoO
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' )
  if 39 - 39: i1iI1 % oOO . o00oO0oo0O0O0 - oo * IiII1i1I
 elif base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' )
  if 27 - 27: Ii
 elif base64 . urlsafe_b64decode ( 'ay1iYWdp' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'ay1iYWdp' )
  if 94 - 94: ooOooO0OOO - oooOoO
 elif base64 . urlsafe_b64decode ( 'cnR2ZQ==' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'cnR2ZQ=' )
  if 70 - 70: iIi11 . iiIIi1i1Iii * IiII1i1I
 elif base64 . urlsafe_b64decode ( 'eW91dHViZQ==' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'eW91dHViZQ=' )
  if 64 - 64: IIoooO0ooO0oo % II
 elif base64 . urlsafe_b64decode ( 'Z2xvcmlhLnR2' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'Z2xvcmlhLnR2' )
  if 86 - 86: iIi11 / II * Ii * II + oooOoO - IiII1i1I
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtYW5nbw==' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'c3RyZWFtYW5nbw==' )
  if 95 - 95: II + oo / IIII + Ii1I
 elif base64 . urlsafe_b64decode ( 'dmlkb3ph' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'dmlkb3ph' )
  if 85 - 85: ooOooO0OOO . II * IIoooO0ooO0oo % II % Ii - oo
 elif base64 . urlsafe_b64decode ( 'ZGFpbHltb3Rpb24=' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'ZGFpbHltb3Rpb24=' )
  if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
 elif base64 . urlsafe_b64decode ( 'YXJjaGl2ZQ==' ) in ooO000oOo00 :
  return base64 . urlsafe_b64decode ( 'YXJjaGl2ZQ==' )
  if 84 - 84: iIi11 + oOO . IiII1i1I % ooOooO0OOO % IiII1IiI * iiIIi1i1Iii
 else :
  ii1 = ooO000oOo00 . split ( '/' )
  if len ( ii1 ) > 2 :
   ii1 = ooO000oOo00 . split ( '/' ) [ 2 ] . split ( '.' )
   if 47 - 47: Ii1I - o00oO0oo0O0O0 - II
   if ii1 [ 0 ] == base64 . urlsafe_b64decode ( 'd3d3' ) :
    return ii1 [ 1 ]
   else :
    if 21 - 21: iIi11 + o00oO0oo0O0O0 - i1iI1 - IiII1IiI
    return ii1 [ 0 ]
  else :
   if 48 - 48: IiII1i1I . II
   return ooO000oOo00
   if 86 - 86: OOO / IiII1IiI * IiII1IiI * o00oO0oo0O0O0
def Oo00OooO ( server , link ) :
 ii = link . split ( '/' )
 oOiii = '/' . join ( ii [ 3 : 4 ] )
 iIIiiIIIIi = '/' . join ( ii [ 4 : 5 ] )
 link = ii [ 5 ] . split ( ',' ) [ 1 ]
 OOoOo0OO = link
 oOoOoOo = '%s/-%s/p,%s,list,1,3.avi' % ( oOiii , iIIiiIIIIi , link )
 ooO000oOo00 = '%s/%s/' % ( server , oOiii )
 iIiiIi1i1i1i1 = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 iiIi1I1ii = '%s/%s' % ( server , oOoOoOo )
 iIiiIi1i1i1i1 [ 'referer' ] = ooO000oOo00
 iIiiIi1i1i1i1 [ 'connection' ] = 'keep-alive'
 Ii11 = urllib2 . Request ( iiIi1I1ii , None , iIiiIi1i1i1i1 )
 I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 I11Iii11i1Ii1 . close ( )
 Ii1iIi1 = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % link , iiII )
 i11 = 0
 try :
  Ii1iIi1 = Ii1iIi1 [ 0 ]
 except :
  i11 = 1
  if 94 - 94: IiII1IiI % I1IiI1III11i * oo
 if i11 == 0 :
  iII = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( server , OOoOo0OO )
  oOO0oooo = 'fileId=%s&__RequestVerificationToken=%s' % ( OOoOo0OO , Ii1iIi1 )
  iIiiIi1i1i1i1 [ 'referer' ] = iiIi1I1ii
  iIiiIi1i1i1i1 [ 'connection' ] = 'keep-alive'
  Ii11 = urllib2 . Request ( iII , oOO0oooo , iIiiIi1i1i1i1 )
  I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
  iiII = I11Iii11i1Ii1 . read ( )
  I11Iii11i1Ii1 . close ( )
  link = re . findall ( 'DownloadUrl":"([^"]+)' , iiII )
  iI = link [ 0 ]
 else :
  iI = ''
 return iI . strip ( )
 if 7 - 7: I1IiI1III11i / I1IiI1III11i
 if 82 - 82: IiII1IiI . II . ooOooO0OOO - Ii1I
 if 27 - 27: OOO / ii1I1ii1IiIi1 + IIoooO0ooO0oo - ooOooO0OOO % oOO
def oOOOOo ( string ) :
 OOO0O00O0 = '7Se10gAIe-T0_a'
 II1111I1 = [ ]
 for O00Ooo0o0OO in xrange ( len ( string ) ) :
  I1iI1iiiIiI1 = OOO0O00O0 [ O00Ooo0o0OO % len ( OOO0O00O0 ) ]
  OO0O0 = chr ( ord ( string [ O00Ooo0o0OO ] ) + ord ( I1iI1iiiIiI1 ) % 256 )
  II1111I1 . append ( OO0O0 )
 ii1i1ii1I = '' . join ( II1111I1 )
 return base64 . urlsafe_b64encode ( ii1i1ii1I )
 if 68 - 68: oooOoO
 if 77 - 77: OOoOoO0o0o0OO * ii1I1ii1IiIi1
def oo0o00ooO ( base , server ) :
 if server == 'kbagi' :
  server = 'k-bagi.com'
 import time
 from random import randint
 oO0oOoOOo0OO = str ( int ( time . time ( ) * 1000 ) )
 O0o = 'http://%s/action/Account/Login?returnUrl=%s&%s' % ( server , '%2F' , oO0oOoOOo0OO )
 oOO0oooo = None
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( O0o , oOO0oooo , oOOO00OoOo )
 if 17 - 17: Ii % ii1I1ii1IiIi1 * I1 % Ii * o00oO0oo0O0O0 + iiIIi1i1Iii
 if 49 - 49: oOO + o00oO0oo0O0O0 - I1IiI1III11i
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 I11I1IiiI1IIi = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 O0Oo0oOO = re . search ( '".*?__RequestVerificationToken.*?value="(.*?)"' , iiII )
 Ii1iIi1 = O0Oo0oOO . group ( 1 )
 iII = 'http://%s/action/Account/Login' % server
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Accept' ] = '*/*'
 oOOO00OoOo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOO00OoOo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOO00OoOo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOO00OoOo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOOoOO = iII1iIIiIi11I ( base , server )
 if 40 - 40: IIII + oo - oooOoO . OOO . OOO . OOoOoO0o0o0OO
 oOO0oooo = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( Ii1iIi1 , oOOoOO [ 0 ] . encode ( 'utf-8' ) , oOOoOO [ 1 ] . encode ( 'utf-8' ) )
 if 58 - 58: IiII1IiI * OOoOoO0o0o0OO
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iII , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 if 58 - 58: II % I1IiI1III11i * OOoOoO0o0o0OO * oooOoO . iIi11
 iiII = I11Iii11i1Ii1 . read ( )
 if 62 - 62: Ii - II - i1iI1
 return 'Type":"Redirect' in iiII . replace ( ' ' , '' )
 if 41 - 41: I1IiI1III11i + oooOoO . o00oO0oo0O0O0 % iIi11
def OO ( server , link , base ) :
 O0o = link
 oOO0oooo = None
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( O0o , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 ooOOOoO0 = I11Iii11i1Ii1 . url
 return ooOOOoO0
 if 70 - 70: IiII1i1I . II + OOO
def i1iIIIii1 ( server , link , base ) :
 ii = link . split ( '/' )
 oOiii = '/' . join ( ii [ 3 : 4 ] )
 iIIiiIIIIi = '/' . join ( ii [ 4 : 5 ] )
 link = ii [ 5 ] . split ( ',' ) [ 1 ]
 O0o = 'http://%s/%s/%s/p,%s,list,1,2.avi' % ( server , oOiii , iIIiiIIIIi , link )
 oOO0oooo = None
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( O0o , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 I11I1IiiI1IIi = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 O0Oo0oOO = re . search ( 'action="(\\/action\\/DownloadFile\\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , iiII )
 iI1 = 'http://%s%s' % ( server , O0Oo0oOO . group ( 1 ) . replace ( '&amp;' , '&' ) )
 Ii1iIi1 = O0Oo0oOO . group ( 2 )
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOO0oooo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , Ii1iIi1 )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 if 69 - 69: I1 + IIoooO0ooO0oo * OOoOoO0o0o0OO + oOO . iiIIi1i1Iii % IiII1IiI
 Ii11 = oo0O0 ( iI1 , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 import time
 oO0oOoOOo0OO = str ( int ( time . time ( ) ) ) + '404'
 iiIi1I1ii = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , oO0oOoOOo0OO )
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOO0oooo = None
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iiIi1I1ii , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iIIi1 = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 o00OO00 = I11I1IiiI1IIi . split ( ';' )
 O0OO00oO00Oo = iIIi1 . split ( ';' )
 for OO00 in O0OO00oO00Oo :
  if OO00 not in o00OO00 :
   o00OO00 . append ( OO00 )
   if 23 - 23: Ii1I - iiIIi1i1Iii
 O0OO00oO00Oo = [ ]
 for OO00 in o00OO00 :
  if 'path=/' not in OO00 and 'HttpOnly' not in OO00 :
   O0OO00oO00Oo . append ( OO00 )
   if 70 - 70: Ii + iiIIi1i1Iii - oooOoO + i1iI1
 I11I1IiiI1IIi = '; ' . join ( O0OO00oO00Oo ) . replace ( '  ' , ' ' )
 iII = 'http://%s/action/Account/Login' % server
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Accept' ] = '*/*'
 oOOO00OoOo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOO00OoOo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOO00OoOo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOO00OoOo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOOoOO = iII1iIIiIi11I ( base , server )
 oOO0oooo = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( Ii1iIi1 , oOOoOO [ 0 ] . encode ( 'utf-8' ) , oOOoOO [ 1 ] . encode ( 'utf-8' ) )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iII , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 try :
  iIIi1 = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 except :
  return oOOoOO [ 0 ] . encode ( 'utf-8' ) + '##NoLogin'
 iiII = I11Iii11i1Ii1 . read ( )
 o00OO00 = I11I1IiiI1IIi . split ( ';' )
 O0OO00oO00Oo = iIIi1 . split ( ';' )
 for OO00 in O0OO00oO00Oo :
  if OO00 not in o00OO00 :
   o00OO00 . append ( OO00 )
   if 21 - 21: I1IiI1III11i - ooOooO0OOO % OOO % oo . o00oO0oo0O0O0 + IIII
 O0OO00oO00Oo = [ ]
 for OO00 in o00OO00 :
  if 'path=/' not in OO00 and 'HttpOnly' not in OO00 :
   O0OO00oO00Oo . append ( OO00 )
   if 17 - 17: i1iI1 * IiII1i1I . iIi11 - OOO * I1IiI1III11i
 I11I1IiiI1IIi = '; ' . join ( O0OO00oO00Oo ) . replace ( '  ' , ' ' )
 iIIi1 = ''
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = O0o
 oOOO00OoOo [ 'Cookie' ] = I11I1IiiI1IIi
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 oOO0oooo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , Ii1iIi1 )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iI1 , oOO0oooo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 O0Oo0oOO = re . search ( 'DownloadUrl":"(.*?)"' , iiII )
 return O0Oo0oOO . group ( 1 )
 if 62 - 62: I1
 def Oo0 ( item ) :
  if "quality" in item [ 1 ] [ 0 ] :
   if 62 - 62: IiII1i1I % I1IiI1III11i - i1iI1 / i1iI1 . iiIIi1i1Iii
   if 80 - 80: OOoOoO0o0o0OO / IIII * iIi11 % oooOoO . o00oO0oo0O0O0
   if 60 - 60: IIoooO0ooO0oo * oooOoO . Ii % IIII
   if 74 - 74: iiIIi1i1Iii
   if 74 - 74: i1iI1 - Ii1I - i1iI1 * OOoOoO0o0o0OO % Ii1I
   if 73 - 73: Ii
   if 42 - 42: iIi11
   IiIiii1111I11 = item [ 1 ] [ 0 ] [ "quality" ]
  else :
   IiIiii1111I11 = item [ 1 ] [ 0 ] [ "path" ] [ "quality" ]
   if 18 - 18: oo / ooOooO0OOO
  if "path" in item [ 1 ] [ 0 ] :
   if "debridonly" in item [ 1 ] [ 0 ] [ "path" ] :
    ooIIi11iIIiiIi = "A"
  elif "debridonly" in item [ 1 ] [ 0 ] :
   ooIIi11iIIiiIi = "A"
  else :
   ooIIi11iIIiiIi = "B"
   if 80 - 80: Ii - Ii1I % I1IiI1III11i / oo * I1IiI1III11i + o00oO0oo0O0O0
  if ooIIi11iIIiiIi == "A" :
   if IiIiii1111I11 . startswith ( "4K" ) :
    IiIiii1111I11 = "Aa"
   elif IiIiii1111I11 . startswith ( "1080" ) :
    IiIiii1111I11 = "Ab"
   elif IiIiii1111I11 . startswith ( "720" ) :
    IiIiii1111I11 = "Ac"
   elif IiIiii1111I11 . startswith ( "560" ) :
    IiIiii1111I11 = "Ad"
   elif IiIiii1111I11 == "DVD" :
    IiIiii1111I11 = "Ae"
   elif IiIiii1111I11 == "HD" :
    IiIiii1111I11 = "Af"
   elif IiIiii1111I11 . startswith ( "480" ) :
    IiIiii1111I11 = "Ba"
   elif IiIiii1111I11 . startswith ( "360" ) :
    IiIiii1111I11 = "Bb"
   elif IiIiii1111I11 . startswith ( "SD" ) :
    IiIiii1111I11 = "Bc"
   else :
    IiIiii1111I11 = "CZ"
    if 35 - 35: ii1I1ii1IiIi1 % IIII
  elif IiIiii1111I11 . startswith ( "4K" ) :
   IiIiii1111I11 = "HDa"
  elif IiIiii1111I11 . startswith ( "1080" ) :
   IiIiii1111I11 = "HDb"
  elif IiIiii1111I11 . startswith ( "720" ) :
   IiIiii1111I11 = "HDc"
  elif IiIiii1111I11 . startswith ( "560" ) :
   IiIiii1111I11 = "HDd"
  elif IiIiii1111I11 == "DVD" :
   IiIiii1111I11 = "HDe"
  elif IiIiii1111I11 == "HD" :
   IiIiii1111I11 = "HDf"
  elif IiIiii1111I11 . startswith ( "480" ) :
   IiIiii1111I11 = "SDa"
  elif IiIiii1111I11 . startswith ( "360" ) :
   IiIiii1111I11 = "SDb"
  elif IiIiii1111I11 . startswith ( "SD" ) :
   IiIiii1111I11 = "SDc"
  else :
   IiIiii1111I11 = "Z"
  return IiIiii1111I11
  if 90 - 90: Ii1I + oooOoO / o00oO0oo0O0O0
 @ staticmethod
 def iiii ( quality_string ) :
  try :
   IiIiii1111I11 = int ( quality_string )
   if IiIiii1111I11 > 576 :
    return "HD"
   else :
    return "SD"
  except ValueError :
   if quality_string not in [ "SD" , "CAM" , "SCR" ] :
    return "HD"
   else :
    return "SD"
    if 36 - 36: oooOoO
 @ staticmethod
 def OOOo00ooo0Oo ( scraper_link ) :
  if (
 not ADDON . getSetting ( "allow_openload" ) == "true"
 and "openload" in scraper_link [ "url" ]
 ) :
   return True
  if (
 not ADDON . getSetting ( "allow_the_video_me" ) == "true"
 and "thevideo.me" in scraper_link [ "url" ]
 ) :
   return True
  if (
 not ADDON . getSetting ( "allow_the_vidup_me" ) == "true"
 and "vidup.me" in scraper_link [ "url" ]
 ) :
   return True
  return False
  if 98 - 98: IIII
  if 58 - 58: oOO
def i11I ( link , name = None , selected_link = None ) :
 import re
 if 2 - 2: I1 + II - Ii
 if 57 - 57: oooOoO
 if 30 - 30: i1iI1 + oooOoO * IiII1i1I / oOO % I1IiI1III11i
 if 7 - 7: IIII
 if 90 - 90: I1 - IiII1IiI . iIi11 + IiII1i1I * ii1I1ii1IiIi1 . IiII1i1I
 if 63 - 63: OOO / oo - i1iI1 - IIII - ooOooO0OOO
 if 22 - 22: IIII / oOO + Ii1I + oOO / IIII - I1IiI1III11i
 if 31 - 31: OOO
 if name is None :
  name = xbmc . getInfoLabel ( "listitem.label" )
 if link . startswith ( "http" ) or link . startswith ( "plugin" ) :
  iiIIIiIi111i = [ link ]
 else :
  IiIiII1I1Ii = JenItem ( link )
  iiIIIiIi111i = IiIiII1I1Ii . getAll ( "sublink" )
  if not iiIIIiIi111i :
   iiIIIiIi111i = [ IiIiII1I1Ii ]
 II1IIiIIIIi1i = [ ]
 ooOo00 = get_link_message ( )
 if selected_link is None :
  Oo0oOoOOO00o = ADDON . getSetting ( "default_link" )
 else :
  Oo0oOoOOO00o = selected_link
 oooo0o = ADDON . getSetting ( "use_link_dialog" ) == "true"
 OOo = False
 for ooO0O0o0oOOO in iiIIIiIi111i :
  if oooo0o and "search" in ooO0O0o0oOOO :
   continue
  if "searchsd" in ooO0O0o0oOOO :
   if Oo0oOoOOO00o == "SD" :
    return ooO0O0o0oOOO
   o0000O = "SD"
   if ooOo00 [ "SD" ] != "" :
    o0000O += " (%s)" % ooOo00 [ "SD" ]
   oOO0O0 = ( o0000O , ooO0O0o0oOOO )
  elif "search" in ooO0O0o0oOOO :
   if Oo0oOoOOO00o == "HD" :
    return ooO0O0o0oOOO
   o0000O = "HD"
   if ooOo00 [ "HD" ] != "" :
    o0000O += " (%s)" % ooOo00 [ "HD" ]
   oOO0O0 = ( o0000O , ooO0O0o0oOOO )
  else :
   OOo = True
   oO0oooOO00OOo = re . findall ( "(.*?)\((.*?)\)" , ooO0O0o0oOOO )
   if oO0oooOO00OOo :
    oOO0O0 = ( "%s" % oO0oooOO00OOo [ 0 ] [ 1 ] , oO0oooOO00OOo [ 0 ] [ 0 ] )
   else :
    oOO0O0 = ( "Link %s" % ( int ( iiIIIiIi111i . index ( ooO0O0o0oOOO ) ) + 1 ) , ooO0O0o0oOOO )
  II1IIiIIIIi1i . append ( oOO0O0 )
 if oooo0o and ( not OOo or len ( iiIIIiIi111i ) > 1 ) :
  II1IIiIIIIi1i . append ( ( "Search" , "search" ) )
  if 77 - 77: iiIIi1i1Iii . ii1I1ii1IiIi1 / I1IiI1III11i * oooOoO
 if len ( II1IIiIIIIi1i ) == 1 :
  ooO000oOo00 = II1IIiIIIIi1i [ 0 ] [ 1 ]
  return ooO000oOo00
  if 23 - 23: IiII1IiI + II % ii1I1ii1IiIi1 % I1 . o00oO0oo0O0O0
 i1I = xbmcgui . Dialog ( ) . select ( name , [ O00Ooo0o0OO [ 0 ] for O00Ooo0o0OO in II1IIiIIIIi1i ] )
 if i1I == - 1 :
  return False
 else :
  ooO000oOo00 = II1IIiIIIIi1i [ i1I ] [ 1 ]
 return ooO000oOo00
 if 9 - 9: Ii1I - oOO % iIi11 % I1IiI1III11i * IIoooO0ooO0oo - iIi11
def oO0Oo00 ( link ) :
 I1i1Ii1iII = re . findall ( 'list=(.*?)(?:&|\s|$)+' , oo0o ( link ) , flags = re . DOTALL )
 oOoOo = [ ]
 if len ( I1i1Ii1iII ) > 0 :
  for O00Ooo0o0OO in I1i1Ii1iII :
   oOoOo . append ( 'plugin://plugin.video.youtube/playlist/%s/' % str ( I1i1Ii1iII [ 0 ] ) )
  return oOoOo
 else :
  return None
  if 66 - 66: oOO
def OoOO0OO0oOO ( link ) :
 iiII = I1iiI1I ( link )
 if 98 - 98: IIII * Ii + Ii - II
 I1i1Ii1iII = re . search ( '/streaming/.*?m3u8' , iiII ) . group ( 0 )
 if I1i1Ii1iII :
  if 85 - 85: Ii1I * II . IiII1IiI - ii1I1ii1IiIi1 - OOoOoO0o0o0OO / I1IiI1III11i
  return 'https://gloria.tv' + I1i1Ii1iII
 else :
  return None
  if 42 - 42: IIII / ii1I1ii1IiIi1 + oOO . OOO / iIi11
def oOIiIiIiIi ( tit , videoUrl ) :
 ii11ii1iIII1I = int ( sys . argv [ 1 ] )
 ooO = xbmcgui . ListItem ( path = videoUrl )
 ooO . setInfo ( 'video' , { 'title' : tit } )
 xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , ooO )
 if 22 - 22: iiIIi1i1Iii
def o00OOOo ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 61 - 61: Ii1I
 if 57 - 57: ooOooO0OOO * iIi11 - ii1I1ii1IiIi1 + IiII1IiI + oOO . ooOooO0OOO
def iI1i11III1Ii ( tit , videoUrl ) :
 tit = o00OOOo ( unicode ( tit . decode ( 'utf-8' ) ) )
 if 97 - 97: IIoooO0ooO0oo % II - oo / i1iI1 * oOO % oo
 I1IiI1111111 , Ii11I11Ii11I = os . path . splitext ( videoUrl )
 oooOO0OO0 , II1II1I11 = os . path . splitext ( tit )
 if 34 - 34: IiII1IiI * I1 - I1 . IiII1IiI
 if 56 - 56: ii1I1ii1IiIi1 + IIII * oo - oOO
 if not Ii11I11Ii11I and not II1II1I11 :
  Ii11I11Ii11I = '.avi'
  if 88 - 88: IiII1i1I . oo + ooOooO0OOO . o00oO0oo0O0O0 * iiIIi1i1Iii + IiII1IiI
 if not tit . endswith ( Ii11I11Ii11I ) :
  tit = tit + Ii11I11Ii11I
  if 64 - 64: ii1I1ii1IiIi1
  if 19 - 19: oo . ooOooO0OOO - II - Ii
 import xbmcaddon
 try :
  import SimpleDownloader as downloader
  downloader = downloader . SimpleDownloader ( )
  O00o00000O00 = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
  i1i1I = { "url" : videoUrl . strip ( ) , "download_path" : O00o00000O00 , "filename" : tit }
  downloader . download ( tit , i1i1I )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , 'Iniciando Descarga...' , xbmcgui . NOTIFICATION_INFO , 3000 )
 except :
  traceback . print_exc ( file = sys . stdout )
  iii = 'Addon Simple Downloader no encontrado, por eso no se puede descargar'
  ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , False , ooO )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
  if 25 - 25: o00oO0oo0O0O0 . oo
def IIi ( ser , titulo , base , id , type , action , params ) :
 ii11ii1iIII1I = int ( sys . argv [ 1 ] )
 if action == 'play' :
  action = oOIiIiIiIi
  try :
   I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( base ) ) )
   if 83 - 83: ooOooO0OOO / i1iI1 % oOO
   ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3ZpZXdzLnBocD9pZD0lcyZ0eXBlPSVz' ) ) % ( I11iIiIIi , id , type )
   I1iiI1I ( ooO000oOo00 )
   if 64 - 64: IIoooO0ooO0oo % IiII1IiI - IiII1i1I
   IIIii1Ii = sqlite3 . connect ( base )
   OO0o = IIIii1Ii . cursor ( )
   if type == 'series' :
    if 9 - 9: i1iI1 / o00oO0oo0O0O0 % iIi11
    OO0o . execute (
 base64 . urlsafe_b64decode ( 'dXBkYXRlIHNlcmllcyBzZXQgdmlld3M9dmlld3MrMSB3aGVyZSBzZXJpZV9pZCA9ID8=' ) ,
 ( id , ) )
   else :
    if 54 - 54: IiII1i1I / IiII1i1I * OOoOoO0o0o0OO + IiII1i1I
    OO0o . execute (
 base64 . urlsafe_b64decode ( 'dXBkYXRlIHBlbGlzIHNldCB2aWV3cz12aWV3cysxIHdoZXJlIHBlbGlfaWQgPSA_' ) , ( id , ) )
   IIIii1Ii . commit ( )
   IIIii1Ii . close ( )
  except :
   pass
 else :
  action = iI1i11III1Ii
  try :
   id = id . split ( '-' ) [ 0 ]
   I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( base ) ) )
   if 19 - 19: I1IiI1III11i
   ooO000oOo00 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2Rvd24ucGhwP2lkPSVzJnR5cGU9JXM=' ) ) % ( I11iIiIIi , id , type )
   I1iiI1I ( ooO000oOo00 )
   if 53 - 53: IiII1i1I + IIII / II - I1IiI1III11i % ii1I1ii1IiIi1
   IIIii1Ii = sqlite3 . connect ( base )
   OO0o = IIIii1Ii . cursor ( )
   if type == 'series' :
    if 22 - 22: IIII * ii1I1ii1IiIi1 / o00oO0oo0O0O0 - II
    OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHNlcmllcyBzZXQgZG93bj1kb3duKzEgd2hlcmUgc2VyaWVfaWQgPSA_' ) , ( id , ) )
   else :
    if 59 - 59: o00oO0oo0O0O0
    if 58 - 58: ii1I1ii1IiIi1 * oooOoO % iiIIi1i1Iii . IIoooO0ooO0oo * o00oO0oo0O0O0 / Ii1I
    OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHBlbGlzIHNldCBkb3duPWRvd24rMSB3aGVyZSBwZWxpX2lkID0gPw==' ) , ( id , ) )
   IIIii1Ii . commit ( )
   IIIii1Ii . close ( )
  except :
   pass
 II1IIiIIIIi1i = ser . split ( ' ' )
 if not II1IIiIIIIi1i :
  iii = 'Video en preparaci\xc3\xb3n'
  ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
  if 25 - 25: I1IiI1III11i + Ii - iiIIi1i1Iii . Ii
 try :
  import resolveurl
 except :
  import traceback
  traceback . print_exc ( file = sys . stdout )
  iii = 'Addon script.module.resolveurl no encontrado'
  ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
  Ii1iI = xbmcgui . Dialog ( )
  Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 7000 )
  if 18 - 18: I1IiI1III11i % oooOoO
 for O00Ooo0o0OO in xrange ( len ( II1IIiIIIIi1i ) ) :
  i1ii1 = oo0o ( II1IIiIIIIi1i [ O00Ooo0o0OO ] )
  if 45 - 45: ooOooO0OOO + IiII1i1I
  O0O0O0O0O0 = Ii1IIiI11iI1 ( i1ii1 , False )
  if 49 - 49: IiII1i1I * IiII1IiI
  if 84 - 84: IiII1IiI % I1 + OOO . o00oO0oo0O0O0 - ooOooO0OOO
  IiII11i = base64 . urlsafe_b64decode ( titulo )
  if 82 - 82: II / IiII1IiI - i1iI1
  if 97 - 97: Ii . o00oO0oo0O0O0 * IIII . OOoOoO0o0o0OO
  if 47 - 47: I1 . ooOooO0OOO - Ii
  if 83 - 83: oooOoO . iiIIi1i1Iii - I1IiI1III11i
  if 2 - 2: I1IiI1III11i
  if 96 - 96: iiIIi1i1Iii . I1IiI1III11i % iIi11 . iiIIi1i1Iii
  if 1 - 1: IIoooO0ooO0oo % OOoOoO0o0o0OO % oooOoO . oOO
  if 13 - 13: ii1I1ii1IiIi1 + iIi11 % oo
  if 14 - 14: iIi11 + OOoOoO0o0o0OO - oo - o00oO0oo0O0O0
  if O0O0O0O0O0 == 'ar' :
   O00O00OoOoo = 'archive'
   try :
    iI = OO ( O00O00OoOoo , i1ii1 , base )
    action ( IiII11i , iI )
   except HTTPError :
    if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'El servidor %s parece caido, intentalo mas tarde' % O00O00OoOoo
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
     import traceback
     traceback . print_exc ( file = sys . stdout )
   except Exception :
    if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'Error del servidor %s, Trabajamos para solucionarlo' % O00O00OoOoo
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
     import traceback
     traceback . print_exc ( file = sys . stdout )
  elif O0O0O0O0O0 == 'kb' or O0O0O0O0O0 == 'dk' :
   if O0O0O0O0O0 == 'kb' :
    O00O00OoOoo = 'k-bagi.com'
    OO0oO = 'Kabagi'
   else :
    O00O00OoOoo = 'diskokosmiko.mx'
    OO0oO = 'Diskokosmico'
   try :
    iI = i1iIIIii1 ( O00O00OoOoo , i1ii1 , base )
    if iI == '' and O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'El enlace ya no existe'
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
     break
    elif iI . endswith ( 'NoLogin' ) and O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     xbmcgui . Dialog ( ) . notification ( 'Palantir' , '%s: Usuario (%s) y Contraseña incorrectas' % ( OO0oO , iI . split ( '##' ) [ 0 ] ) , xbmcgui . NOTIFICATION_WARNING , 8000 )
     break
    elif not iI . endswith ( 'NoLogin' ) :
     action ( IiII11i , i1iIIIii1 ( O00O00OoOoo , i1ii1 , base ) )
     break
   except HTTPError :
    if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'El servidor %s parece caido, intentalo mas tarde' % O00O00OoOoo
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
     import traceback
     traceback . print_exc ( file = sys . stdout )
   except Exception :
    if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'Error del servidor %s, Trabajamos para solucionarlo' % O00O00OoOoo
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
     import traceback
     traceback . print_exc ( file = sys . stdout )
  elif O0O0O0O0O0 == 'dk' :
   try :
    iI = Oo00OooO ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , i1ii1 )
    if iI == '' and O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'El enlace ya no existe'
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
     break
    elif iI != '' :
     action ( IiII11i , iI )
     break
   except HTTPError :
    if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'El servidor %s parece caido, intentalo mas tarde' % 'diskokosmico'
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
   except Exception :
    if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'diskokosmico'
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
  elif O0O0O0O0O0 == 're' or O0O0O0O0O0 == 'yt' or O0O0O0O0O0 == 'standard' :
   if O0O0O0O0O0 == 'yt' :
    iI = oO0Oo00 ( i1ii1 )
   else :
    iI = i1ii1
   action ( IiII11i , iI )
   break
  elif O0O0O0O0O0 == 'gloria' :
   iI = OoOO0OO0oOO ( i1ii1 )
   if iI != None :
    action ( IiII11i , iI )
   else :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'gloria.tv'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
   break
  elif O0O0O0O0O0 == 'sc' :
   ooO000oOo00 = i1ii1
   try :
    iiII = I1iiI1I ( i1ii1 )
    if '<h1>File Not Found</h1>' in iiII or '<h1>Archivo no encontrado</h1>' in iiII or iiII == 'Not Found' :
     if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
      iii = 'El enlace ya no existe'
      ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
      xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
      Ii1iI = xbmcgui . Dialog ( )
      Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    else :
     iI = re . findall ( 'file\\: "([^"]+)"' , iiII , flags = re . DOTALL )
     if not iI :
      oOO0oooo = ''
      o0 = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , iiII , flags = re . DOTALL )
      for O0000o0 , ooooo0 in o0 :
       oOO0oooo += O0000o0 + '=' + ooooo0 + '&'
       if 7 - 7: IiII1i1I / oo
      oOO0oooo = oOO0oooo . replace ( 'op=download1' , 'op=download2' )
      iiII = I1iiI1I ( ooO000oOo00 , post = oOO0oooo )
      if 'id="justanotice"' in iiII :
       return [ ]
      iI = re . findall ( 'file\\: "([^"]+)"' , iiII , flags = re . DOTALL )
     try :
      action ( IiII11i , iI [ 0 ] )
      break
     except :
      pass
   except HTTPError :
    if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'El servidor %s parece caido, intentalo mas tarde' % 'streamcloud'
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
   except Exception :
    if O00Ooo0o0OO == len ( II1IIiIIIIi1i ) - 1 :
     iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'streamcloud'
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
     if 6 - 6: I1 / OOoOoO0o0o0OO % I1IiI1III11i / oo
  elif O0O0O0O0O0 == 'tk' :
   ooO000oOo00 = i1ii1
   oO0o = dict ( )
   oO0o [
 "User-Agent" ] = "Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3163.100 Safari/537.36"
   oO0o [
 "Accept" ] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
   oO0o [ "Accept-Language" ] = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3"
   oO0o [ "Accept-Charset" ] = "UTF-8"
   oO0o [ "Accept-Encoding" ] = "gzip"
   if 'bb' in params and 'mm' in params :
    iI = '%s&bb=%s&mm=%s|User-Agent=%s' % ( ooO000oOo00 , params [ 'bb' ] , params [ 'mm' ] , oO0o )
   else :
    iI = '%s|User-Agent=%s' % ( ooO000oOo00 , oO0o )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'tk'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 33 - 33: IiII1i1I % oooOoO * IiII1IiI . II . I1IiI1III11i
  elif 'gofile.io' in i1ii1 :
   oO0o0O = i1ii1 [ i1ii1 . find ( '=' ) + 1 : ]
   III1i1I11i = 'https://apiv2.gofile.io/getServer?c=' + oO0o0O
   O0oO = requests . get ( III1i1I11i )
   iiii1111Ii = O0oO . json ( ) [ 'data' ] [ 'server' ]
   i1ii1 = 'https://' + iiii1111Ii + '.gofile.io/getUpload?c=' + oO0o0O
   O0oO = requests . get ( i1ii1 )
   iI = O0oO . json ( ) [ 'data' ] [ 'files' ] [ '0' ] [ 'link' ]
   iI = iI . replace ( 'https' , 'http' ) . replace ( ' ' , '%20' )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 51 - 51: i1iI1 . I1IiI1III11i - I1
    if 43 - 43: iiIIi1i1Iii * ooOooO0OOO + IIII . oo * oo
  elif 'pixeldrain' in i1ii1 :
   oO0o0O = i1ii1 [ i1ii1 . find ( 'u/' ) + 2 : ]
   iI = 'https://pixeldrain.com/api/file/' + oO0o0O + '?download'
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
  elif 'my-files.ru' in i1ii1 :
   I111iiIii1 = requests . get ( i1ii1 , allow_redirects = False , verify = False )
   oO00oOo = re . search ( '''(?:"url" href=['"])([\%|\()|:/.A-z?<_&\s=>0-9;-]+)(?:)''' , I111iiIii1 . text ) . group ( 1 )
   I111iiIii1 = requests . get ( oO00oOo , headers = { 'Cookie' : 'session_token=d0f66sjl95qcdgwfb6s0fzo8yxu69jt4' , 'Referer' : i1ii1 , 'Accept' : '*/*' } , allow_redirects = False , verify = False )
   iI = I111iiIii1 . headers [ 'Location' ]
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 42 - 42: Ii - OOO . OOO / II
  elif 'degoo' in i1ii1 :
   if "degoo.com/w/" in i1ii1 :
    I111iiIii1 = requests . get ( i1ii1 )
    iI = re . findall ( '''(?: href=['"])([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\" target=\"_self\">Download)''' , I111iiIii1 . text )
    if len ( iI ) > 1 :
     oO00o00oo0Oo0 = re . findall ( '''(?:<tr><td>)([\%|\&|\#|\;|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\.mkv|\.mp4|\.avi)(?:</td><td class=)''' , I111iiIii1 . text )
     iIii1i1 = zip ( oO00o00oo0Oo0 , iI )
     iIii1i1 = set ( iIii1i1 )
     iIii1i1 = sorted ( iIii1i1 )
     oO00o00oo0Oo0 , iI = zip ( * iIii1i1 )
     Oo00 = [ ]
     for OOoOoO in oO00o00oo0Oo0 :
      oOOo0O0 = HTMLParser . HTMLParser ( ) . unescape ( OOoOoO )
      Oo00 . append ( oOOo0O0 )
     ii1i = xbmcgui . Dialog ( ) . select ( "Selecciona un enlace" , Oo00 )
     iI = iI [ ii1i ]
    else :
     iI = iI [ 0 ]
   else :
    I111iiIii1 = requests . get ( i1ii1 , headers = { 'Host' : 'cloud.degoo.com' , 'Accept' : '*/*' , 'User-Agent' : 'Mozilla/5.0 (compatible; Rigor/1.0.0; http://rigor.com)' } , allow_redirects = False )
    oO00oOo = I111iiIii1 . headers [ 'Location' ]
    o0Oo = oO00oOo [ oO00oOo . find ( 'https://' ) + 8 : oO00oOo . find ( 'link' ) + 4 ]
    iiiIii1IiII = requests . get ( oO00oOo , headers = { 'Host' : o0Oo , 'Accept' : '*/*' , 'User-Agent' : 'Mozilla/5.0 (compatible; Rigor/1.0.0; http://rigor.com)' } , allow_redirects = False )
    oOOOo0o = re . search ( '''(?:window.top.location = validate\(\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , iiiIii1IiII . text ) . group ( 1 )
    I1OOoo000o0O0Oo = requests . get ( oOOOo0o )
    iI = re . findall ( '''(?: href=['"])([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\" target=\"_self\">Download)''' , I1OOoo000o0O0Oo . text )
    if len ( iI ) > 1 :
     oO00o00oo0Oo0 = re . findall ( '''(?:<tr><td>)([\%|\&|\#|\;|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\.mkv|\.mp4|\.avi)(?:</td><td class=)''' , I1OOoo000o0O0Oo . text )
     iIii1i1 = zip ( oO00o00oo0Oo0 , iI )
     iIii1i1 = set ( iIii1i1 )
     iIii1i1 = sorted ( iIii1i1 )
     oO00o00oo0Oo0 , iI = zip ( * iIii1i1 )
     Oo00 = [ ]
     for OOoOoO in oO00o00oo0Oo0 :
      oOOo0O0 = HTMLParser . HTMLParser ( ) . unescape ( OOoOoO )
      Oo00 . append ( oOOo0O0 )
     ii1i = xbmcgui . Dialog ( ) . select ( "Selecciona un enlace" , Oo00 )
     iI = iI [ ii1i ]
    else :
     iI = iI [ 0 ]
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
  elif 'userscloud.com' in i1ii1 :
   try :
    if len ( Ii111 [ 0 ] ) > 2 :
     pass
   except :
    OoOO0O0oO0O = 'https://userscloud.com'
    if 73 - 73: OOoOoO0o0o0OO - OOoOoO0o0o0OO
    o0Ii1I11iIi1I1I = [ [ 'Pal01' , 'pal012019' ] , [ 'Pal02' , 'pal022019' ] , [ 'Pal03' , 'pal032019' ] ]
    iIIiIii1i1 = random . randint ( 0 , len ( o0Ii1I11iIi1I1I ) - 1 )
    iiII = { 'op' : 'login' ,
 'rand' : '' ,
 'redirect' : '' ,
 'login' : o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 0 ] ,
 'password' : o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 1 ] }
    OOoooo0o0O = requests . post ( OoOO0O0oO0O , data = iiII , allow_redirects = False )
    Ii111 = re . findall ( '''(?:xfss=)([a-zA-Z0-9]+)(?:\;)''' , OOoooo0o0O . headers [ 'Set-Cookie' ] )
   I111iiIii1 = requests . get ( i1ii1 )
   id = re . findall ( '''(?:name\=\"id\" value\=\")([a-zA-Z0-9]+)(?:\"\>)''' , I111iiIii1 . text )
   i1i = re . findall ( '''(?:name\=\"rand\" value\=\")([a-zA-Z0-9]+)(?:\"\>)''' , I111iiIii1 . text )
   iiII = { 'op' : 'download2' ,
 'id' : id [ 0 ] ,
 'rand' : '' ,
 'referer' : '' ,
 'method_free' : '' ,
 'method_premium' : '' }
   iIiiIi1i1i1i1 = { 'Cookie' : 'login=' + o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 0 ] + '; xfss=' + Ii111 [ 0 ] }
   iIii1I = requests . post ( i1ii1 , data = iiII , headers = iIiiIi1i1i1i1 , allow_redirects = False )
   if 37 - 37: IiII1i1I
   OO0O0OOO = iIii1I . headers [ 'Location' ]
   I1IIi1 = re . search ( '''(\:[a-zA-Z0-9]+)''' , OO0O0OOO ) . group ( 1 )
   iI = OO0O0OOO . replace ( I1IIi1 , '' ) . replace ( I1IIi1 , '' ) . replace ( ' ' , '%20' )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 74 - 74: IIII - iIi11 / II
  elif 'desiupload.in' in i1ii1 :
   try :
    if len ( iIIiI1i [ 0 ] ) > 2 :
     pass
   except :
    OoOO0O0oO0O = 'https://desiupload.in/'
    if 37 - 37: ii1I1ii1IiIi1 % o00oO0oo0O0O0 / ooOooO0OOO + I1 % I1 . iIi11
    o0Ii1I11iIi1I1I = [ [ 'Pal01' , 'pal012019' ] , [ 'Pal02' , 'pal022019' ] , [ 'Pal03' , 'pal032019' ] ]
    iIIiIii1i1 = random . randint ( 0 , len ( o0Ii1I11iIi1I1I ) - 1 )
    iiII = { 'op' : 'login' ,
 'token' : '' ,
 'rand' : '' ,
 'redirect' : '' ,
 'login' : o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 0 ] ,
 'password' : o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 1 ] }
    OOoooo0o0O = requests . post ( OoOO0O0oO0O , data = iiII , allow_redirects = False )
    iIIiI1i = re . findall ( '''(?:xfss=)([a-zA-Z0-9]+)(?:\;)''' , OOoooo0o0O . headers [ 'Set-Cookie' ] )
   iIiiIi1i1i1i1 = { 'Cookie' : 'xfss=' + iIIiI1i [ 0 ] }
   oO0o0O = i1ii1 [ i1ii1 . find ( 'in/' ) + 3 : ]
   iiII = { 'op' : 'download2' ,
 'id' : oO0o0O ,
 'rand' : '' ,
 'referer' : '' ,
 'method_free' : '' ,
 'method_premium' : '' ,
 'adblock_detected' : '1' }
   if 96 - 96: oo / iiIIi1i1Iii / OOO * OOoOoO0o0o0OO / IiII1i1I / o00oO0oo0O0O0
   I111iiIii1 = requests . post ( i1ii1 , data = iiII , headers = iIiiIi1i1i1i1 , allow_redirects = False )
   if 2 - 2: oOO
   i1ii1 = re . findall ( '''(?:\"downloadbtn\" style\=\"padding:15px 30px;\"><a href=\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   iI = i1ii1 [ 0 ]
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 73 - 73: I1IiI1III11i . Ii1I - OOoOoO0o0o0OO . IiII1i1I
  elif 'thefileslocker.com' in i1ii1 :
   try :
    if len ( ooo0o0ooo0o00 [ 0 ] ) > 2 :
     pass
   except :
    OoOO0O0oO0O = 'https://thefileslocker.com/'
    if 63 - 63: IIII * i1iI1 / IiII1IiI * iiIIi1i1Iii . OOO % IiII1IiI
    o0Ii1I11iIi1I1I = [ [ 'Pal01' , 'pal012019' ] , [ 'Pal02' , 'pal022019' ] , [ 'Pal03' , 'pal032019' ] ]
    iIIiIii1i1 = random . randint ( 0 , len ( o0Ii1I11iIi1I1I ) - 1 )
    iiII = { 'op' : 'login' ,
 'rand' : '' ,
 'redirect' : 'https://thefileslocker.com/' ,
 'login' : o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 0 ] ,
 'password' : o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 1 ] }
    OOoooo0o0O = requests . post ( OoOO0O0oO0O , data = iiII , allow_redirects = False )
    ooo0o0ooo0o00 = re . findall ( '''(?:xfss=)([a-zA-Z0-9]+)(?:\;)''' , OOoooo0o0O . headers [ 'Set-Cookie' ] )
   o00oOOOoOOo0O = requests . post ( OoOO0O0oO0O , data = iiII , allow_redirects = False )
   o00 = re . findall ( '''(?:xfss=)([a-zA-Z0-9]+)(?:\;)''' , o00oOOOoOOo0O . headers [ 'Set-Cookie' ] )
   o0Oo0O0oO = re . findall ( '''(?:login=)([a-zA-Z0-9]+)(?:\;)''' , o00oOOOoOOo0O . headers [ 'Set-Cookie' ] )
   if 25 - 25: oo / IiII1IiI + OOoOoO0o0o0OO - IIII + OOO
   I111iiIii1 = requests . get ( i1ii1 )
   id = re . findall ( '''(?:name=\"id\" value=\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   OoO = re . findall ( '''(?:name=\"fname\" value=\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   iiII = { 'op' : 'download2' ,
 'usr_login' : '' ,
 'id' : id ,
 'fname' : OoO ,
 'referer' : i1ii1 ,
 'method_free' : 'Liberta Descarga >>' }
   if 20 - 20: OOoOoO0o0o0OO - OOO - IIoooO0ooO0oo - ooOooO0OOO + OOoOoO0o0o0OO + I1IiI1III11i
   iIiiIi1i1i1i1 = { 'Cookie' : 'xfss=' + ooo0o0ooo0o00 [ 0 ] + '; ' + 'login=' + o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 0 ] , 'Referer' : i1ii1 }
   I111iiIii1 = requests . post ( i1ii1 , headers = iIiiIi1i1i1i1 , data = iiII )
   i1ii1 = re . findall ( '''(?:href=\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\">)(?:http)''' , I111iiIii1 . text )
   iI = i1ii1 [ 0 ]
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 31 - 31: Ii1I
  elif 'onuploads.com' in i1ii1 :
   IiiII1iII = requests . session ( )
   IIiIi = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 ' 'YaBrowser/19.10.0.1401 Yowser/2.5 Safari/537.36'
   if 39 - 39: Ii + Ii
   I111iiIii1 = IiiII1iII . get ( i1ii1 , headers = { 'User-Agent' : IIiIi } , allow_redirects = False )
   iI1oOoO0OOo0 = re . findall ( '''(?:name=\"op\" value=\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   id = re . findall ( '''(?:name=\"id\" value=\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   iiII = { 'op' : iI1oOoO0OOo0 [ 0 ] ,
 'id' : id [ 0 ] ,
 'rand' : '' ,
 'referer' : '' ,
 'method_free' : '' ,
 'method_premium' : '' ,
 'adblock_detected' : '0' }
   if 82 - 82: iIi11 % iIi11 . ii1I1ii1IiIi1 - IIII
   iiiIii1IiII = IiiII1iII . post ( i1ii1 , data = iiII )
   iiIi1I1ii = re . findall ( '''(?: href=['"])([\%|\+|\,:/.A-z?<_&\s=>0-9;-]+)(?:"><img src="../images/dbtn.jpg" width="150px" title="download button" alt="submit button"></a>)''' , iiiIii1IiII . text )
   iI = iiIi1I1ii [ 0 ]
   IiiII1iII . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 33 - 33: oooOoO / IIII . i1iI1 . I1IiI1III11i
  elif 'upfile.mobi' in i1ii1 :
   I111iiIii1 = requests . get ( i1ii1 , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   iiIi1I1ii = re . findall ( '''(?: href=['"])([\%|\+|:/.A-z?<_&\s=>0-9;-]+\?page\=file&[\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   iiiIii1IiII = requests . get ( iiIi1I1ii [ 0 ] , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   iII = re . findall ( '''(?: href=['"])([\%|\+|:/.A-z?<_&\s=>0-9;-]+\?page=download&server[\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , iiiIii1IiII . text )
   i1ii1 = iII [ 0 ]
   I1OOoo000o0O0Oo = requests . get ( iII [ 0 ] , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   i1ii1 = I1OOoo000o0O0Oo . headers [ 'Location' ]
   I1IIi1 = re . search ( '''(\:[a-zA-Z0-9]+)''' , i1ii1 ) . group ( 1 )
   iI = i1ii1 . replace ( I1IIi1 , '' )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 85 - 85: OOO / ooOooO0OOO . Ii1I - II
  elif 'qtfile.com' in i1ii1 :
   I111iiIii1 = requests . get ( i1ii1 , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   iiIi1I1ii = re . findall ( '''(?: href=['"])([\%|\+|:/.A-z?<_&\s=>0-9;-]+\?page\=file&[\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   iiiIii1IiII = requests . get ( iiIi1I1ii [ 0 ] , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   iII = re . findall ( '''(?: href=['"])([\%|\+|:/.A-z?<_&\s=>0-9;-]+\?page=download&server[\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , iiiIii1IiII . text )
   i1ii1 = iII [ 0 ]
   I1OOoo000o0O0Oo = requests . get ( iII [ 0 ] , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   i1ii1 = I1OOoo000o0O0Oo . headers [ 'Location' ]
   I1IIi1 = re . search ( '''(\:[a-zA-Z0-9]+)''' , i1ii1 ) . group ( 1 )
   iI = i1ii1 . replace ( I1IIi1 , '' )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 78 - 78: OOO + IiII1i1I % oOO
  elif '9files.co' in i1ii1 :
   I111iiIii1 = requests . get ( i1ii1 , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   iiIi1I1ii = re . findall ( '''(?: href=['"])([\%|\+|:/.A-z?<_&\s=>0-9;-]+\?page\=file&[\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   iiiIii1IiII = requests . get ( iiIi1I1ii [ 0 ] , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   iII = re . findall ( '''(?: href=['"])([\%|\+|:/.A-z?<_&\s=>0-9;-]+\?page=download&server[\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , iiiIii1IiII . text )
   i1ii1 = iII [ 0 ]
   I1OOoo000o0O0Oo = requests . get ( iII [ 0 ] , headers = { 'Referer' : i1ii1 } , allow_redirects = False )
   i1ii1 = I1OOoo000o0O0Oo . headers [ 'Location' ]
   I1IIi1 = re . search ( '''(\:[a-zA-Z0-9]+)''' , i1ii1 ) . group ( 1 )
   iI = i1ii1 . replace ( I1IIi1 , '' )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 71 - 71: o00oO0oo0O0O0 - oooOoO % oooOoO
  elif 'megaup' in i1ii1 :
   try :
    I111iiIii1 = requests . get ( i1ii1 )
    ooO000oOo00 = re . findall ( '''(?:class\=\'btn btn-default\' href=\')([\%|\+|:/.A-z?<_&\s=>0-9;-]+3D)''' , I111iiIii1 . text )
    I111iiIii1 = requests . get ( ooO000oOo00 [ 0 ] , headers = { 'cookie' : 'filehosting=7b56d2dufci4nbdtn9tnqd0eu5' } , allow_redirects = False )
    iI = I111iiIii1 . headers [ 'location' ]
   except :
    I111iiIii1 = requests . get ( i1ii1 )
    ooO000oOo00 = re . findall ( '''(?:class\=\'btn btn-default\' href=\')([\%|\+|:/.A-z?<_&\s=>0-9;-]+3D)''' , I111iiIii1 . text )
    I111iiIii1 = requests . get ( ooO000oOo00 [ 0 ] , headers = { 'cookie' : 'filehosting=19ha5hkuioafgpiellnai04bg3' } , allow_redirects = False )
    iI = I111iiIii1 . headers [ 'location' ]
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'H265'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 1 - 1: o00oO0oo0O0O0 / IIII - iIi11 . oooOoO
  elif 'jetload.net' in i1ii1 :
   OO0OOoO00 = i1ii1 [ i1ii1 . find ( '/d/' ) + len ( '/d/' ) : ]
   Iii11 = 'https://jetload.net/api/get_direct_video/' + OO0OOoO00
   I111iiIii1 = requests . get ( Iii11 )
   O0o000o0Oo = I111iiIii1 . json ( )
   OooO00OOo0OOO = O0o000o0Oo [ 'file' ] [ 'file_name' ]
   IIIii1iiI11i1 = '.' + O0o000o0Oo [ 'file' ] [ 'file_ext' ]
   II1IIiII = O0o000o0Oo [ 'file' ] [ 'srv_id' ]
   OO00o00oo0oOO0 = 'https://jetload.net/api/download'
   iiiIii1IiII = requests . post ( OO00o00oo0oOO0 , data = { 'file_name' : OooO00OOo0OOO + IIIii1iiI11i1 , 'srv' : II1IIiII } )
   iI = iiiIii1IiII . text
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Ocean'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 84 - 84: oOO % oOO
  elif 'saruch.co' in i1ii1 :
   oO0o0O = i1ii1 [ i1ii1 . find ( 'video/' ) + len ( 'video/' ) : ]
   i1ii1iii1IIII = 'https://api.saruch.co/videos/' + oO0o0O + '/stream'
   I111iiIii1 = requests . get ( i1ii1iii1IIII )
   II1IIiIIIIi1i = [ ]
   IIiIiI11 = [ ]
   o0OooO00OOo = I111iiIii1 . json ( ) [ 'video' ] [ 'sources' ]
   for O00Ooo0o0OO in range ( 0 , len ( o0OooO00OOo ) ) :
    i1ii1 = o0OooO00OOo [ O00Ooo0o0OO ]
    IIiIiI11 . append ( i1ii1 [ 'label' ] )
    II1IIiIIIIi1i . append ( i1ii1 [ 'file' ] )
   Ii1III1II1I1i = __settings__ . getSetting ( 'auto_ocean' )
   if Ii1III1II1I1i == "false" :
    if len ( II1IIiIIIIi1i ) > 1 :
     ii1i = xbmcgui . Dialog ( ) . select ( "Selecciona un enlace" , IIiIiI11 )
     if ii1i == - 1 :
      ooOo00 = "%s" % 'Has cancelado'
      return xbmc . executebuiltin ( "Notification(\"Palantir INFO:\", \"%s\")" % ooOo00 )
     else :
      iI = II1IIiIIIIi1i [ ii1i ]
   else :
    iI = II1IIiIIIIi1i [ 0 ]
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Ocean'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 66 - 66: IiII1i1I - IIoooO0ooO0oo . iiIIi1i1Iii / IIoooO0ooO0oo + IIII
  elif 'poybox.com' in i1ii1 :
   iI = i1ii1
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Ocean'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 43 - 43: oooOoO * oooOoO % i1iI1 % oooOoO - IiII1i1I % IIoooO0ooO0oo
  elif 'dfile.space' in i1ii1 :
   I111iiIii1 = requests . get ( i1ii1 , allow_redirects = False , verify = True )
   i1ii1 = I111iiIii1 . headers [ 'Location' ]
   iI = i1ii1 . replace ( 'https' , 'http' )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Ocean'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 14 - 14: II % I1IiI1III11i - Ii1I % OOO * i1iI1 % I1IiI1III11i
  elif 'kustod.io' in i1ii1 :
   IiiII1iII = requests . session ( )
   iiIIiiIiii1I = i1ii1 [ i1ii1 . find ( '/s/' ) + len ( '/s/' ) : ]
   I1Iiii1I11ii = 'https://brain.kustod.io/v1/taggings/' + iiIIiiIiii1I + '/file/url'
   iIii1I = IiiII1iII . get ( I1Iiii1I11ii , allow_redirects = False )
   iI = iIii1I . headers [ 'location' ]
   IiiII1iII . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Ocean'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
  elif "upw.io" in i1ii1 :
   IiiII1iII = requests . session ( )
   IIiIi = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36"
   iIii1I = IiiII1iII . get ( i1ii1 , allow_redirects = False , headers = { 'user-agent' : IIiIi } )
   i1ii1 = re . search ( '''(?:href=['"])([:/.A-z?<_&\s=>0-9;-]+%3D)(?:'>download)''' , iIii1I . text ) . group ( 1 )
   iiiIii1IiII = IiiII1iII . get ( i1ii1 , allow_redirects = False )
   iI = iiiIii1IiII . headers [ 'location' ]
   IiiII1iII . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Ocean'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 46 - 46: OOO * iIi11
  elif "sandup.co" in i1ii1 :
   IiiII1iII = requests . session ( )
   IIiIi = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 ' 'YaBrowser/19.10.0.1401 Yowser/2.5 Safari/537.36'
   if 30 - 30: Ii / i1iI1 + I1
   I111iiIii1 = IiiII1iII . get ( i1ii1 , headers = { 'User-Agent' : IIiIi } , verify = False )
   iI1oOoO0OOo0 = re . findall ( '''(?:name=\"op\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   id = re . findall ( '''(?:name=\"id\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   iiII = { 'op' : iI1oOoO0OOo0 ,
 'id' : id ,
 'rand' : '' ,
 'referer' : '' ,
 'method_free' : '' ,
 'method_premium' : '' ,
 'adblock_detected' : '0' }
   iiiIii1IiII = IiiII1iII . post ( i1ii1 , data = iiII )
   iiIi1I1ii = re . findall ( '''(?: href=['"])(.+)(?:" type="button" class="btn btn-primary btn-block mb-4">)''' , iiiIii1IiII . text )
   i1ii1 = iiIi1I1ii [ 0 ]
   i1ii1 = HTMLParser . HTMLParser ( ) . unescape ( i1ii1 ) + '|verifypeer=false&auth=SSL/TLS&verifyhost=false'
   iI = i1ii1 . replace ( ' ' , '%20' )
   iI = iI . replace ( '_' , '%20' )
   IiiII1iII . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Artic'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 73 - 73: oo / II % Ii
  elif "uptocloud.co" in i1ii1 :
   IiiII1iII = requests . session ( )
   IIiIi = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 ' 'YaBrowser/19.10.0.1401 Yowser/2.5 Safari/537.36'
   if 2 - 2: oo . IIII . IiII1IiI % iiIIi1i1Iii - Ii
   I111iiIii1 = IiiII1iII . get ( i1ii1 , headers = { 'User-Agent' : IIiIi } , verify = False )
   iI1oOoO0OOo0 = re . findall ( '''(?:name=\"op\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   id = re . findall ( '''(?:name=\"id\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   iiII = { 'op' : iI1oOoO0OOo0 ,
 'id' : id ,
 'rand' : '' ,
 'referer' : '' ,
 'method_free' : '' ,
 'method_premium' : '' ,
 'adblock_detected' : '0' }
   iiiIii1IiII = IiiII1iII . post ( i1ii1 , data = iiII )
   iiIi1I1ii = re . findall ( '''(?: href=['"])(.+)(?:" class="btn btn-primary btn-block mb-4">)''' , iiiIii1IiII . text )
   i1ii1 = iiIi1I1ii [ 0 ]
   i1ii1 = HTMLParser . HTMLParser ( ) . unescape ( i1ii1 ) + '|verifypeer=false&auth=SSL/TLS&verifyhost=false'
   if 78 - 78: ooOooO0OOO / i1iI1 / I1IiI1III11i + OOO + Ii1I + OOO
   iI = i1ii1 . replace ( ' ' , '%20' )
   iI = iI . replace ( '_' , '%20' )
   IiiII1iII . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Artic'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 94 - 94: i1iI1 . I1 / I1 . I1 - oOO
    if 46 - 46: iIi11 % OOoOoO0o0o0OO % II
  elif "cutedrive.com" in i1ii1 :
   IiiII1iII = requests . session ( )
   IIiIi = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 ' 'YaBrowser/19.10.0.1401 Yowser/2.5 Safari/537.36'
   if 86 - 86: i1iI1 . Ii1I . IiII1IiI
   I111iiIii1 = IiiII1iII . get ( i1ii1 , headers = { 'User-Agent' : IIiIi } , allow_redirects = False )
   iI1oOoO0OOo0 = re . findall ( '''(?:name=\"op\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   id = re . findall ( '''(?:name=\"id\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   OoO = re . findall ( '''(?:name=\"fname\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   iiII = { 'op' : iI1oOoO0OOo0 [ 0 ] ,
 'usr_login' : '' ,
 'id' : id [ 0 ] ,
 'fname' : OoO [ 0 ] ,
 'referer' : i1ii1 ,
 'method_free' : 'Liberta Descarga >>' }
   iIii1I = IiiII1iII . post ( i1ii1 , data = iiII , allow_redirects = False )
   iI1oOoO0OOo0 = re . findall ( '''(?:name=\"op\" value=\")(.+)(?:">)''' , iIii1I . text )
   id = re . findall ( '''(?:name=\"id\" value=\")(.+)(?:">)''' , iIii1I . text )
   iiII = { 'op' : iI1oOoO0OOo0 [ 0 ] ,
 'id' : id [ 0 ] ,
 'rand' : '' ,
 'referer' : i1ii1 ,
 'method_free' : 'Liberta Descarga >>' ,
 'method_premium' : '' }
   iiiIii1IiII = IiiII1iII . post ( i1ii1 , data = iiII , allow_redirects = False )
   iI = iiiIii1IiII . headers [ 'Location' ]
   iI = iI . replace ( ' ' , '%20' )
   IiiII1iII . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Koto'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 83 - 83: OOO * I1 / oo * OOO
  elif "file.cm" in i1ii1 :
   IiiII1iII = requests . session ( )
   IIiIi = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 ' 'YaBrowser/19.10.0.1401 Yowser/2.5 Safari/537.36'
   if 79 - 79: I1 % Ii1I
   I111iiIii1 = IiiII1iII . get ( i1ii1 , headers = { 'User-Agent' : IIiIi } , allow_redirects = False )
   iI1oOoO0OOo0 = re . findall ( '''(?:name=\"op\" value=\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   id = re . findall ( '''(?:name=\"id\" value=\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
   iiII = { 'op' : iI1oOoO0OOo0 [ 0 ] ,
 'id' : id [ 0 ] ,
 'rand' : '' ,
 'referer' : i1ii1 ,
 'method_free' : '' ,
 'method_premium' : '' }
   iiiIii1IiII = IiiII1iII . post ( i1ii1 , data = iiII , allow_redirects = False )
   iI = iiiIii1IiII . headers [ 'Location' ]
   iI = iI . replace ( ' ' , '%20' )
   IiiII1iII . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Vike'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 56 - 56: oooOoO % iIi11 . oOO * II - OOoOoO0o0o0OO
  elif "7-up.net" in i1ii1 :
   IiiII1iII = requests . session ( )
   IIiIi = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 ' 'YaBrowser/19.10.0.1401 Yowser/2.5 Safari/537.36'
   if 6 - 6: IiII1i1I / I1 * ii1I1ii1IiIi1 + ii1I1ii1IiIi1 / I1
   I111iiIii1 = IiiII1iII . get ( i1ii1 , headers = { 'User-Agent' : IIiIi } , allow_redirects = False )
   iI1oOoO0OOo0 = re . findall ( '''(?:name=\"op\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   id = re . findall ( '''(?:name=\"id\" value=\")(.+)(?:">)''' , I111iiIii1 . text )
   iiII = { 'op' : iI1oOoO0OOo0 [ 0 ] ,
 'id' : id [ 0 ] ,
 'rand' : '' ,
 'referer' : '' ,
 'method_free' : '' ,
 'method_premium' : '' ,
 'adblock_detected' : '0' }
   if 22 - 22: IIII - II - I1 - oooOoO + I1 % ooOooO0OOO
   iiiIii1IiII = IiiII1iII . post ( i1ii1 , data = iiII )
   iiIi1I1ii = re . findall ( '''(?: href=['"])(.+)(?:"><i class="fa fa-cloud-download">)''' , iiiIii1IiII . text )
   if 82 - 82: II - I1IiI1III11i / oo / II . OOoOoO0o0o0OO
   i1ii1 = iiIi1I1ii [ 0 ]
   i1ii1 = HTMLParser . HTMLParser ( ) . unescape ( i1ii1 ) + '|verifypeer=false&auth=SSL/TLS&verifyhost=false'
   iI = i1ii1 . replace ( ' ' , '%20' )
   iI = iI . replace ( '_' , '%20' )
   IiiII1iII . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Osmk'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
    if 75 - 75: IiII1i1I
    if 83 - 83: OOO + i1iI1
  elif 'uptostream.com' in i1ii1 :
   if 42 - 42: iiIIi1i1Iii / II / oOO * IIoooO0ooO0oo / IiII1i1I
   if 62 - 62: II / IIII * oOO / ooOooO0OOO - Ii
   if 84 - 84: ii1I1ii1IiIi1 + iiIIi1i1Iii
   try :
    if len ( I11Ii1 [ 1 ] ) > 2 :
     pass
   except :
    try :
     if 87 - 87: oo . oOO - iiIIi1i1Iii * I1IiI1III11i
     O0ooO = "script.cuentas.palantir"
     i1I1I = xbmcaddon . Addon ( O0ooO )
    except :
     pass
    try :
     if i1I1I :
      iI11I1 = i1I1I . getSetting ( 'username_uptobox' )
      II1I = i1I1I . getSetting ( 'pass_uptobox' )
      if iI11I1 != '' :
       OoOO0O0oO0O = 'https://uptostream.com/login?referer=homepage'
       iiII = { 'login' : iI11I1 ,
 'password' : II1I }
       OOoooo0o0O = requests . post ( OoOO0O0oO0O , data = iiII , headers = { 'Referer' : OoOO0O0oO0O } , allow_redirects = False )
       I11Ii1 = re . findall ( '''(?:xfss=)([a-zA-Z0-9]+)(?:\;)''' , OOoooo0o0O . headers [ 'Set-Cookie' ] )
    except :
     pass
     if 82 - 82: IIII / oOO - OOoOoO0o0o0OO
   try :
    if len ( I11Ii1 [ 1 ] ) > 2 :
     iIiiIi1i1i1i1 = { 'Cookie' : 'xfss=' + I11Ii1 [ 1 ] , 'Referer' : i1ii1 }
     oO0o0O = i1ii1 [ i1ii1 . find ( 'com/' ) + 4 : ]
     Oo00oOOOoO0OoOoO = 'https://uptobox.com/' + oO0o0O
     IIIi1ii11i = requests . get ( Oo00oOOOoO0OoOoO , headers = iIiiIi1i1i1i1 , allow_redirects = False )
   except :
    try :
     if len ( oo00oOoo [ 1 ] ) > 2 :
      pass
    except :
     try :
      OoOO0O0oO0O = 'https://uptostream.com/login?referer=homepage'
      o0Ii1I11iIi1I1I = [ [ 'Pal01' , 'pal012019' ] ]
      iIIiIii1i1 = random . randint ( 0 , len ( o0Ii1I11iIi1I1I ) - 1 )
      iiII = { 'login' : o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 0 ] ,
 'password' : o0Ii1I11iIi1I1I [ iIIiIii1i1 ] [ 1 ] }
      OOoooo0o0O = requests . post ( OoOO0O0oO0O , data = iiII )
      oo00oOoo = re . findall ( '''(?:xfss=)([a-zA-Z0-9]+)(?:\;)''' , OOoooo0o0O . headers [ 'Set-Cookie' ] )
     except :
      pass
    try :
     iIiiIi1i1i1i1 = { 'Cookie' : 'xfss=' + oo00oOoo [ 1 ] , 'Referer' : i1ii1 }
    except :
     iIiiIi1i1i1i1 = { 'Referer' : i1ii1 }
   I111iiIii1 = requests . get ( i1ii1 , headers = iIiiIi1i1i1i1 )
   II1IIiIIIIi1i = re . findall ( '''(?:{\"src\"\:\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\",\"type\")''' , I111iiIii1 . text )
   if len ( II1IIiIIIIi1i ) < 1 :
    I111iiIii1 = requests . get ( i1ii1 , headers = iIiiIi1i1i1i1 , allow_redirects = False )
    II1IIiIIIIi1i = re . findall ( '''(?:{\"src\"\:\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\",\"type\")''' , I111iiIii1 . text )
   O0OoO = re . findall ( '''(File not found)''' , I111iiIii1 . text )
   if O0OoO :
    return xbmc . executebuiltin ( "Notification(\"Palantir INFO:\", \"Posible enlace borrado, notifica en Telegram. Gracias.\")" )
   II1IIiIIIIi1i = re . findall ( '''(?:{\"src\"\:\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\",\"type\")''' , I111iiIii1 . text )
   i1IiIi111I1i1 = re . findall ( '''(?:\"label\"\:\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\"\,\"res\")''' , I111iiIii1 . text )
   II1ii111IIi = re . findall ( '''(?:\"lang\"\:\")([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\"\,\"idLang\")''' , I111iiIii1 . text )
   try :
    IIII1i1I11 = re . findall ( '''(?:kind=\'subtitles\' src=\')([\%|\+|:/.A-z?<_&\s=>0-9;-]+)(?:\' srclang=\')''' , I111iiIii1 . text )
    if 95 - 95: iIi11 / OOO % IiII1i1I * IIoooO0ooO0oo * IIII * I1IiI1III11i
    if 97 - 97: IIoooO0ooO0oo - iIi11 % Ii1I + oo
    if 55 - 55: iiIIi1i1Iii . IIII / IiII1i1I . i1iI1 * IIoooO0ooO0oo
    if 56 - 56: o00oO0oo0O0O0 + IiII1IiI . I1IiI1III11i
    if 78 - 78: iiIIi1i1Iii / OOO - IIoooO0ooO0oo / IIII / i1iI1 / oOO
    ooi11iiIii = [ ]
    if 4 - 4: OOoOoO0o0o0OO - IiII1i1I - i1iI1 - iIi11 % IIoooO0ooO0oo
    for IIiIiiIIiI in range ( 0 , len ( IIII1i1I11 ) ) :
     if 54 - 54: oooOoO . ii1I1ii1IiIi1 + o00oO0oo0O0O0 - II . II
     ii1iiiIiIiiI1I = IIII1i1I11 [ IIiIiiIIiI ] [ : - 3 ]
     if 98 - 98: oo
     ooi11iiIii . append ( ii1iiiIiIiiI1I + 'srt' )
   except :
    pass
   IIiOooo00oO0 = [ ]
   for i1ii1 in II1IIiIIIIi1i :
    IIiOooo00oO0 . append ( i1ii1 . replace ( "\\" , '' ) )
    i11i1iiIi1 = [ ]
   for O00Ooo0o0OO in range ( 0 , len ( II1ii111IIi ) ) :
    i1I1 = II1ii111IIi [ O00Ooo0o0OO ] . replace ( 'spa' , u'Español' ) . replace ( 'eng' , 'English' ) + ' - ' + i1IiIi111I1i1 [ O00Ooo0o0OO ] . replace ( '2160p' , '4K (2160p)' )
    i11i1iiIi1 . append ( i1I1 )
   try :
    if len ( I11Ii1 [ 1 ] ) > 2 :
     try :
      i11i1iiIi1 = [ 'Cuenta Premium' ] + i11i1iiIi1
     except :
      i11i1iiIi1 = [ 'Cuenta Premium' ]
     try :
      IIiOooo00oO0 = [ IIIi1ii11i . headers [ 'Location' ] ] + IIiOooo00oO0
     except :
      IIiOooo00oO0 = [ IIIi1ii11i . headers [ 'Location' ] ]
   except :
    try :
     if len ( oo00oOoo [ 1 ] ) > 2 :
      II1I11IiII = re . findall ( '''(?:window.token = \')([\%|\+|:/.A-z?<_&\s=>0-9;-]+)''' , I111iiIii1 . text )
      iIoOoooOoo000 = 'https://uptostream.com/api/checkIp?token=' + II1I11IiII [ 0 ]
      I1I1IiiIi1 = requests . get ( iIoOoooOoo000 , headers = iIiiIi1i1i1i1 )
    except :
     iIoOoooOoo000 = 'https://uptostream.com/api/checkIp'
     I1I1IiiIi1 = requests . get ( iIoOoooOoo000 )
    try :
     ooOo00 = "%s" % str ( datetime . timedelta ( seconds = int ( I1I1IiiIi1 . text ) ) )
    except :
     ooOo00 = '0'
    xbmc . executebuiltin ( "Notification(\"Palantir INFO:\", \"Te quedan %s de visionado, luego cambia la IP\")" % ooOo00 )
    if 29 - 29: iiIIi1i1Iii - IIoooO0ooO0oo / IIoooO0ooO0oo
   o00000Oo = __settings__ . getSetting ( 'auto_top' )
   if o00000Oo == "false" :
    if len ( IIiOooo00oO0 ) > 1 :
     ii1i = xbmcgui . Dialog ( ) . select ( "Selecciona un enlace" , i11i1iiIi1 )
     if ii1i == - 1 :
      ooOo00 = "%s" % 'Has cancelado'
      return xbmc . executebuiltin ( "Notification(\"Palantir INFO:\", \"%s\")" % ooOo00 )
     else :
      iI = IIiOooo00oO0 [ ii1i ]
   else :
    iI = IIiOooo00oO0 [ 0 ]
    if 57 - 57: IIII + OOO * oooOoO + oo / oo - oooOoO
   I111iiIii1 . connection . close ( )
   try :
    iIIi = xbmcgui . ListItem ( IiII11i )
    iIIi . setPath ( iI )
    try :
     iIIi . setSubtitles ( ooi11iiIii )
     del ooi11iiIii
     del IIII1i1I11
    except :
     pass
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , True , iIIi )
   except :
    iii = 'Error del servidor %s, Trabajamos para solucionarlo' % 'Top'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
  elif 'google.com' in i1ii1 :
   try :
    iIiiiiiI111I = "https?://(?:drive|docs)\\.google\\.com/(?:file/d/|uc\\?id=|get_video_info\\?docid=)([^/&]+)"
    id = re . findall ( iIiiiiiI111I , i1ii1 , flags = re . DOTALL ) [ 0 ]
    oO00oOo = 'https://drive.google.com/uc?export=download&id=%s' % id
    xbmc . log ( '############ %s' % oO00oOo )
    if 31 - 31: IIoooO0ooO0oo * iIi11 + II / oOO * OOoOoO0o0o0OO
    ooO000oOo00 = iI = ''
    try :
     iiII = I1iiIi ( oO00oOo ) . data
     ooO000oOo00 = re . findall ( 'href="(/uc\?export=download&confirm=[^&]+&id=[^"]+)"' , iiII , flags = re . DOTALL )
     xbmc . log ( '############ %s' % ooO000oOo00 )
    except :
     xbmc . log ( '############ error downloadpage' )
     pass
     if 19 - 19: oo * iIi11 . OOoOoO0o0o0OO . oOO - I1IiI1III11i
    if isinstance ( ooO000oOo00 , list ) and ooO000oOo00 :
     iiII = I1iiIi ( urlparse . urljoin ( oO00oOo , ooO000oOo00 [ 0 ] ) , follow_redirects = False )
     iI = iiII . headers . get ( 'location' )
     xbmc . log ( '############ metodo 1: %s' % iI )
     if 7 - 7: ooOooO0OOO
    if not ( iI and I1iiIi ( iI , follow_redirects = False , only_headers = True ) . headers . get ( 'content-disposition' ) ) :
     xbmc . log ( '############ metodo 2' )
     iI = resolveurl . resolve ( i1ii1 )
     xbmc . log ( '############ metodo 2: %s' % iI )
     if 36 - 36: iIi11 * ii1I1ii1IiIi1 . I1IiI1III11i . oo % iiIIi1i1Iii % IiII1i1I
    if iI :
     xbmc . log ( '############ exito %s' % iI )
     action ( IiII11i , iI )
    else :
     xbmc . log ( '############ error' )
     raise
     if 52 - 52: II % II + OOO
   except :
    import traceback
    traceback . print_exc ( file = sys . stdout )
    iii = 'Link caido,intentalo mas tarde.'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 7000 )
    if 29 - 29: iIi11 - oOO . Ii - IIII % Ii
  else :
   try :
    iI = resolveurl . resolve ( i1ii1 )
    if iI == False :
     Ooo0 = xbmcaddon . Addon ( id = "script.module.resolveurl" )
     iii = 'Limite diario consumido. Cambiar IP. script.module.resolveurl %s ' % Ooo0 . getAddonInfo (
 'version' )
     ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
     Ii1iI = xbmcgui . Dialog ( )
     Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 10000 )
    else :
     action ( IiII11i , iI )
   except :
    import traceback
    traceback . print_exc ( file = sys . stdout )
    iii = 'Link caido,intentalo mas tarde.'
    ooO = xbmcgui . ListItem ( iii , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( ii11ii1iIII1I , False , ooO )
    Ii1iI = xbmcgui . Dialog ( )
    Ii1iI . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 7000 )
    if 60 - 60: IiII1i1I * IiII1IiI + I1IiI1III11i % I1IiI1III11i
    if 93 - 93: II % IiII1i1I - Ii1I / I1IiI1III11i / oOO
def oOOOOO ( bas , data ) :
 IIiiIi = data . split ( '.' )
 if IIiiIi [ 0 ] == 'cp' :
  IIiiIi = i1iIIIii1 ( base64 . urlsafe_b64decode ( 'Y29waWFwb3AuY29t' ) , IIiiIi [ 1 ] , bas )
 elif IIiiIi [ 0 ] == 'dk' :
  IIiiIi = Oo00OooO ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , IIiiIi [ 1 ] )
 else :
  if 96 - 96: OOO * o00oO0oo0O0O0 * Ii - Ii + i1iI1 % I1IiI1III11i
  IIiiIi = base64 . urlsafe_b64decode ( 'JXMvbW9yaWEuY21w' ) % data
 data = I1iiI1I ( IIiiIi )
 try :
  data = zlib . decompress ( data )
 except :
  xbmc . log ( '[addon.Palantir] Error decrypt bd %s' % ( data ) )
  pass
 iiIii1IIi1I = open ( bas , 'wb' )
 iiIii1IIi1I . write ( data )
 iiIii1IIi1I . close ( )
 try :
  IIIii1Ii = sqlite3 . connect ( bas )
  OO0o = IIIii1Ii . cursor ( )
  if 41 - 41: ooOooO0OOO / oo
  OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IHZlcnNpb24sIChzZWxlY3QgY291bnQoKikgZnJvbSAoc2VsZWN0IGxpbmsgZnJvbSBzZXJpZXMgd2hlcmUgbGluayB1bmlvbiBzZWxlY3QgbGluayBmcm9tIHBlbGlzKSkgZnJvbSB2ZXJzaW9u' ) )
  I1iiiiIIII = OO0o . fetchone ( )
  IIIii1Ii . close ( )
  iii = 'Vers. %s (Más de %s contenidos diferentes)' % ( I1iiiiIIII [ 0 ] , I1iiiiIIII [ 1 ] )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_INFO , 5000 )
 except DatabaseError as o0o0000O0 :
  if 94 - 94: iIi11 % ooOooO0OOO % I1IiI1III11i . IIII / IIII % oo
  if os . path . isfile ( bas ) :
   os . remove ( bas )
   if 90 - 90: IiII1IiI / Ii1I . IIoooO0ooO0oo
  raise o0o0000O0
  if 24 - 24: II + oOO % o00oO0oo0O0O0
def iII1iIIiIi11I ( bas , provider ) :
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 21 - 21: IIoooO0ooO0oo - ii1I1ii1IiIi1 * IIII / i1iI1 + o00oO0oo0O0O0
 OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IGNyZWRlbnRpYWxzIGZyb20gdmVyc2lvbg==' ) )
 I1iiiiIIII = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 if I1iiiiIIII [ 0 ] :
  ii1 = I1iiiiIIII [ 0 ] . split ( '##' )
  for O00Ooo0o0OO in xrange ( len ( ii1 ) / 3 ) :
   if ii1 [ O00Ooo0o0OO * 3 ] == provider :
    if provider == 'k-bagi.com' :
     provider = 'kbg'
    elif provider == 'kbagi.com' :
     provider = 'kbg'
    else :
     provider = 'dk'
    return [ __settings__ . getSetting ( '%sUserName' % provider ) or ii1 [ O00Ooo0o0OO * 3 + 1 ] ,
 __settings__ . getSetting ( '%sPassword' % provider ) or ii1 [ O00Ooo0o0OO * 3 + 2 ] ]
    if 63 - 63: I1IiI1III11i % OOoOoO0o0o0OO
 return [ 'NoBDNoUser' ] * 2
 if 38 - 38: IIII * IIoooO0ooO0oo / oo
import urlparse
if 77 - 77: oooOoO % I1IiI1III11i % I1IiI1III11i * iIi11
if 100 - 100: i1iI1 % Ii
if 15 - 15: OOO / iIi11 * IiII1IiI
import gzip
import cookielib
from StringIO import StringIO
from threading import Lock
if 26 - 26: ii1I1ii1IiIi1 + OOO
iiI1Iii11ii = Lock ( )
i11i111 = cookielib . MozillaCookieJar ( )
I1i1iiII1i11 = xbmc . translatePath ( xbmcaddon . Addon ( ) . getAddonInfo ( 'Profile' ) . decode ( 'utf-8' ) )
i11I1 = os . path . join ( I1i1iiII1i11 , "cookies.dat" )
if 43 - 43: OOoOoO0o0o0OO - OOoOoO0o0o0OO
iiI1Iii11ii . acquire ( )
if os . path . isfile ( i11I1 ) :
 try :
  i11i111 . load ( i11I1 , ignore_discard = True )
 except Exception :
  os . remove ( i11I1 )
iiI1Iii11ii . release ( )
if 65 - 65: oo % iiIIi1i1Iii % Ii1I % i1iI1 % I1IiI1III11i . ii1I1ii1IiIi1
def ii1Iii1 ( ) :
 iiI1Iii11ii . acquire ( )
 i11i111 . save ( i11I1 , ignore_discard = True )
 iiI1Iii11ii . release ( )
 if 22 - 22: Ii1I % Ii / oOO . oooOoO
def OOOo0o0o00oO ( domain ) :
 return dict ( ( c . name , c . value ) for c in i11i111 . _cookies . get ( "." + domain , { } ) . get ( "/" , { } ) . values ( ) )
 if 54 - 54: IIII - oooOoO
def I1iiIi ( url , post = None , headers = None , follow_redirects = True , only_headers = False , replace_headers = False ) :
 I11Iii11i1Ii1 = { }
 if 13 - 13: IIoooO0ooO0oo + II . IiII1i1I . I1IiI1III11i * IIII
 if 53 - 53: oo * IIoooO0ooO0oo . Ii1I % oOO . ooOooO0OOO
 if type ( post ) == dict :
  post = urllib . urlencode ( post )
  if 33 - 33: IiII1i1I . IIoooO0ooO0oo
  if 45 - 45: IIoooO0ooO0oo % oOO % oOO % o00oO0oo0O0O0 + oOO - oOO
 url = urllib . quote ( url , safe = "%/:=&?~#+!$,;'@()*[]" )
 if 28 - 28: I1 + Ii1I + IiII1IiI / o00oO0oo0O0O0 % OOoOoO0o0o0OO
 if 19 - 19: i1iI1 + Ii1I . Ii1I - IiII1i1I
 oO0o = dict ( )
 oO0o [ "User-Agent" ] = "Mozilla/5.0 (X11; Linux i686; rv:44.0) Gecko/20100101 Firefox/44.0 Iceweasel/44.0"
 oO0o [ "Accept" ] = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
 oO0o [ "Accept-Language" ] = "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3"
 oO0o [ "Accept-Charset" ] = "UTF-8"
 oO0o [ "Accept-Encoding" ] = "gzip"
 i1ii = oO0o . copy ( )
 if 43 - 43: OOoOoO0o0o0OO . o00oO0oo0O0O0 % Ii / iIi11 / o00oO0oo0O0O0
 if 66 - 66: oooOoO
 if headers is not None :
  if not replace_headers :
   i1ii . update ( dict ( headers ) )
  else :
   i1ii = dict ( headers )
   if 66 - 66: i1iI1 . OOO - Ii1I
   if 42 - 42: ooOooO0OOO + oo / iIi11 * IIoooO0ooO0oo - oooOoO . i1iI1
 OOooo0O = list ( )
 OOooo0O . append ( urllib2 . HTTPHandler ( debuglevel = False ) )
 OOooo0O . append ( urllib2 . HTTPCookieProcessor ( i11i111 ) )
 if 5 - 5: oOO
 if 83 - 83: OOoOoO0o0o0OO + IIII . II % OOoOoO0o0o0OO / iiIIi1i1Iii
 if not follow_redirects :
  OOooo0O . append ( I1OO ( ) )
 else :
  OOooo0O . append ( iiiI ( ) )
  if 78 - 78: oooOoO - I1 / IiII1i1I / II - IIoooO0ooO0oo
  if 95 - 95: o00oO0oo0O0O0 % IiII1i1I * IIII + iIi11 - iiIIi1i1Iii
 O00O00o0ooo = urllib2 . build_opener ( * OOooo0O )
 if 9 - 9: iIi11
 if 31 - 31: iIi11 % ooOooO0OOO + oooOoO . IIoooO0ooO0oo
 Ii11 = urllib2 . Request ( url , post , i1ii )
 if 28 - 28: I1IiI1III11i - oooOoO % Ii
 try :
  if 21 - 21: Ii1I - ooOooO0OOO - II / oooOoO
  OO0oOOOOO = O00O00o0ooo . open ( Ii11 )
  if 34 - 34: OOoOoO0o0o0OO * ooOooO0OOO . oo
  if 4 - 4: OOoOoO0o0o0OO
 except urllib2 . HTTPError , OO0oOOOOO :
  xbmc . log ( '###### Peticion realizada con error' )
  I11Iii11i1Ii1 [ "sucess" ] = False
  I11Iii11i1Ii1 [ "code" ] = OO0oOOOOO . code
  I11Iii11i1Ii1 [ "error" ] = OO0oOOOOO . __dict__ . get ( "reason" , str ( OO0oOOOOO ) )
  I11Iii11i1Ii1 [ "headers" ] = OO0oOOOOO . headers . dict
  I11Iii11i1Ii1 [ 'cookies' ] = OOOo0o0o00oO ( urlparse . urlparse ( url ) [ 1 ] )
  I11Iii11i1Ii1 [ "data" ] = "" if only_headers else OO0oOOOOO . read ( )
  I11Iii11i1Ii1 [ "url" ] = OO0oOOOOO . geturl ( )
  if 100 - 100: Ii1I
 except Exception , o0o0000O0 :
  xbmc . log ( '###### Peticion NO realizada' )
  I11Iii11i1Ii1 [ "sucess" ] = False
  I11Iii11i1Ii1 [ "code" ] = o0o0000O0 . __dict__ . get ( "errno" , o0o0000O0 . __dict__ . get ( "code" , str ( o0o0000O0 ) ) )
  I11Iii11i1Ii1 [ "error" ] = o0o0000O0 . __dict__ . get ( "reason" , str ( o0o0000O0 ) )
  I11Iii11i1Ii1 [ "headers" ] = { }
  I11Iii11i1Ii1 [ 'cookies' ] = OOOo0o0o00oO ( urlparse . urlparse ( url ) [ 1 ] )
  I11Iii11i1Ii1 [ "data" ] = ""
  I11Iii11i1Ii1 [ "url" ] = url
  if 39 - 39: OOO % I1 . o00oO0oo0O0O0
 else :
  I11Iii11i1Ii1 [ "sucess" ] = True
  I11Iii11i1Ii1 [ "code" ] = OO0oOOOOO . code
  I11Iii11i1Ii1 [ "error" ] = None
  I11Iii11i1Ii1 [ "headers" ] = OO0oOOOOO . headers . dict
  I11Iii11i1Ii1 [ 'cookies' ] = OOOo0o0o00oO ( urlparse . urlparse ( url ) [ 1 ] )
  I11Iii11i1Ii1 [ "data" ] = "" if only_headers else OO0oOOOOO . read ( )
  I11Iii11i1Ii1 [ "url" ] = OO0oOOOOO . geturl ( )
  if 83 - 83: IIoooO0ooO0oo . II + IiII1i1I - IiII1i1I
  if 46 - 46: Ii1I
 if I11Iii11i1Ii1 [ "headers" ] . get ( 'content-encoding' ) == 'gzip' :
  I11Iii11i1Ii1 [ "data" ] = gzip . GzipFile ( fileobj = StringIO ( I11Iii11i1Ii1 [ "data" ] ) ) . read ( )
  if 67 - 67: Ii1I
 I11Iii11i1Ii1 [ "data" ] = HTMLParser . HTMLParser ( ) . unescape ( unicode ( I11Iii11i1Ii1 [ "data" ] , 'utf8' ) ) . encode ( 'utf8' )
 return oo0O0O0 ( I11Iii11i1Ii1 )
 if 58 - 58: iiIIi1i1Iii % IIII * IiII1i1I % IIoooO0ooO0oo + i1iI1 . Ii
 if 6 - 6: Ii - OOoOoO0o0o0OO
class I1OO ( urllib2 . HTTPRedirectHandler ) :
 def http_error_302 ( self , req , fp , code , msg , headers ) :
  III1i = urllib . addinfourl ( fp , headers , req . get_full_url ( ) )
  III1i . status = code
  III1i . code = code
  return III1i
  if 4 - 4: Ii1I . o00oO0oo0O0O0 . iIi11 / IiII1i1I - Ii1I * IIoooO0ooO0oo
 http_error_300 = http_error_302
 http_error_301 = http_error_302
 http_error_303 = http_error_302
 http_error_307 = http_error_302
 if 60 - 60: oOO * oooOoO . iIi11 + IiII1i1I % IIII % ii1I1ii1IiIi1
class iiiI ( urllib2 . HTTPRedirectHandler ) :
 def redirect_request ( self , req , fp , code , msg , headers , newurl ) :
  if 'Authorization' in req . headers :
   req . headers . pop ( 'Authorization' )
  return urllib2 . HTTPRedirectHandler . redirect_request ( self , req , fp , code , msg , headers , newurl )
  if 10 - 10: OOoOoO0o0o0OO * o00oO0oo0O0O0 . ii1I1ii1IiIi1
class oo0O0O0 :
 def __init__ ( self , response ) :
  self . sucess = None
  self . code = None
  self . error = None
  self . headers = None
  self . cookies = None
  self . data = None
  self . time = None
  self . url = None
  self . __dict__ = response
  if 86 - 86: IiII1IiI + IIoooO0ooO0oo % ii1I1ii1IiIi1
def Iiii11iIi1I1 ( bas ) :
 I11iIiIIi = I111I11I11111 ( bas )
 if I11iIiIIi == '' :
  I11iIiIIi = OOo0000oO ( )
 I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I11iIiIIi ) )
 import xbmcaddon
 oooO0 = xbmcaddon . Addon ( )
 iI1I = xbmc . translatePath ( oooO0 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
 if os . path . isfile ( bas ) :
  try :
   if 87 - 87: IIII . o00oO0oo0O0O0 - IIII - ooOooO0OOO
   I1iiiiIIII = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   if 18 - 18: IIoooO0ooO0oo + o00oO0oo0O0O0 % ooOooO0OOO
   IiiII1iII = I1iiiiIIII . split ( ' ' )
   try :
    IIIii1Ii = sqlite3 . connect ( bas )
    OO0o = IIIii1Ii . cursor ( )
    if 46 - 46: Ii
    OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    i11O0O00o0OOO000 = str ( oO [ 0 ] )
    if int ( i11O0O00o0OOO000 ) < int ( IiiII1iII [ 0 ] ) :
     if 28 - 28: IIII
     oOOOOO ( bas , oo0o ( IiiII1iII [ 1 ] . strip ( ) ) )
     IIIii1Ii = sqlite3 . connect ( bas )
     OO0o = IIIii1Ii . cursor ( )
     if 24 - 24: iIi11 + OOoOoO0o0o0OO - IiII1IiI / IIII + Ii
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfdXBkYXRlLCBub3RpZmljYWNpb25fdXBkYXRlIGZyb20gdmVyc2lvbg==' ) )
     oO = OO0o . fetchone ( )
     IIIii1Ii . close ( )
     if oO [ 1 ] :
      xbmcgui . Dialog ( ) . notification ( 'Palantir' , oO [ 1 ] , xbmcgui . NOTIFICATION_INFO , 9000 )
     if oO [ 0 ] :
      xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
   except :
    oOOOOO ( bas , oo0o ( IiiII1iII [ 1 ] . strip ( ) ) )
  except ( HTTPError , URLError ) as o0o0000O0 :
   traceback . print_exc ( file = sys . stdout )
   iii = 'No puedo actualizarme,revisa internet'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_WARNING , 5000 )
 else :
  try :
   if 52 - 52: i1iI1
   if 73 - 73: IiII1IiI . IiII1i1I - I1 / I1 % IiII1i1I . ooOooO0OOO
   I1iiiiIIII = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   IiiII1iII = I1iiiiIIII . split ( ' ' )
   oOOOOO ( bas , oo0o ( IiiII1iII [ 1 ] . strip ( ) ) )
   IIIii1Ii = sqlite3 . connect ( bas )
   OO0o = IIIii1Ii . cursor ( )
   if 57 - 57: o00oO0oo0O0O0 * IIoooO0ooO0oo - Ii1I
   OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfaW5pY2lhbCBmcm9tIHZlcnNpb24=' ) )
   oO = OO0o . fetchone ( )
   IIIii1Ii . close ( )
   if oO [ 0 ] :
    xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
  except HTTPError :
   iii = 'No puedo cargar el addon, revisa internet'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , iii , xbmcgui . NOTIFICATION_ERROR , 5000 )
   xbmc . executebuiltin ( 'Action(Back)' )
   if 27 - 27: IiII1i1I * IIII * oooOoO / I1 - ii1I1ii1IiIi1
 if os . path . isfile ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % iI1I ) :
  if 70 - 70: Ii * ooOooO0OOO * iIi11 + I1 % OOO . oo
  pass
  if 80 - 80: o00oO0oo0O0O0 / IIII
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 30 - 30: oooOoO - IIoooO0ooO0oo - o00oO0oo0O0O0 + IiII1i1I / oo - I1
 OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
 oO = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 IiIiiIii1 = oooO0 . getAddonInfo ( 'version' ) . decode ( 'utf-8' )
 if int ( IiIiiIii1 . replace ( '.' , '' ) ) < oO [ 1 ] :
  iI11iiIIiIi = oO [ 2 ] . split ( ' ' )
  for O00Ooo0o0OO , oooooO0oooO in zip ( iI11iiIIiIi [ 0 : : 2 ] , iI11iiIIiIi [ 1 : : 2 ] ) :
   iiII = zlib . decompress ( base64 . b64decode ( oooooO0oooO ) )
   iiIii1IIi1I = open ( '%s/%s' % ( iI1I , base64 . b64decode ( O00Ooo0o0OO ) ) , 'wb' )
   if 55 - 55: ii1I1ii1IiIi1 * o00oO0oo0O0O0 - o00oO0oo0O0O0 + IIoooO0ooO0oo * OOO
   iiIii1IIi1I . close ( )
   if 27 - 27: oooOoO - IIII
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')